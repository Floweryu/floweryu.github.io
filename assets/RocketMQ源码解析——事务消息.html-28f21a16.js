import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{o as t,c as o,a as r}from"./app-dd34876d.js";const i="/assets/202301051728774-4b629d3c.png",e={},n=r('<h2 id="一、概要" tabindex="-1"><a class="header-anchor" href="#一、概要" aria-hidden="true">#</a> 一、概要</h2><p>RocketMQ采用了<strong>2PC</strong>的思想来实现了提交事务消息，同时增加<strong>一个补偿逻辑</strong>来处理二阶段超时或者失败的消息</p><figure><img src="'+i+'" alt="image-20221113154641351" tabindex="0" loading="lazy"><figcaption>image-20221113154641351</figcaption></figure><p>所以，事务消息大致分两个流程：<strong>正常事务消息的发送及提交</strong>、<strong>事务消息的补偿流程</strong></p><h4 id="_1-1-事务消息发送及提交-序号对照上图" tabindex="-1"><a class="header-anchor" href="#_1-1-事务消息发送及提交-序号对照上图" aria-hidden="true">#</a> 1.1 事务消息发送及提交（序号对照上图）</h4><ol><li>生产者发送消息（half消息）到服务端</li><li>服务端响应消息写入结果给生产者</li><li>根据第1步的发送结果执行本地事务（如果第1步写入失败，<strong>half消息对消费者不可见</strong>，本地逻辑也就不执行）</li><li>根据本地事务状态执行commit或者rollback操作（commit操作生成消息索引，<strong>消息此时对消费者可见</strong>）</li></ol><h4 id="_2-2-补偿流程-序号对照上图" tabindex="-1"><a class="header-anchor" href="#_2-2-补偿流程-序号对照上图" aria-hidden="true">#</a> 2.2 补偿流程（序号对照上图）</h4><ol start="5"><li>对没有commit/rollback的事务消息（等待状态的消息），从服务端发起一次回查</li><li>生产者收到回查的消息，检查该消息对应的本地事务的执行状态</li><li>根据本地事务的状态，重新commit或者rollback</li></ol><p><strong>补偿阶段主要用户解决消息commit或rollback发生超时或失败的情况</strong></p><h4 id="_2-3-2pc-两阶段提交" tabindex="-1"><a class="header-anchor" href="#_2-3-2pc-两阶段提交" aria-hidden="true">#</a> 2.3 2PC(两阶段提交)</h4><p>顾名思义就是两阶段提交：第一阶段：提交请求阶段（投票阶段）；第二阶段：提交阶段</p>',11),c=[n];function l(s,_){return t(),o("div",null,c)}const g=a(e,[["render",l],["__file","RocketMQ源码解析——事务消息.html.vue"]]);export{g as default};
