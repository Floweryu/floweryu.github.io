import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{o as n,c as a,a as d}from"./app-c2b0c0d8.js";const s="/assets/YPQXyAuKqF1kOWa-bc756e28.png",i="/assets/BP1luwCT3jNZ7Xd-42d97e8e.png",l="/assets/Q934aj28IrNkueD-924b691b.png",e="/assets/image-20231220193932316-cd589efe.png",o={},r=d(`<h2 id="mysql锁的类型" tabindex="-1"><a class="header-anchor" href="#mysql锁的类型" aria-hidden="true">#</a> MySQL锁的类型</h2><h3 id="全局锁" tabindex="-1"><a class="header-anchor" href="#全局锁" aria-hidden="true">#</a> 全局锁</h3><p>使用全局锁：</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>flush tables with read lock
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>执行后，<strong>整个数据库就处于只读状态了</strong>，这时其他线程执行以下操作，都会被阻塞：</p><ul><li>对数据的增删改操作，比如 <code>insert、delete、update</code>等语句。</li><li>对表结构的更改操作，比如 <code>alter table、drop table</code> 等语句。</li></ul><p>如果要释放全局锁，则要执行这条命令：</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>unlock tables
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>【应用场景】</p><p><strong>全库逻辑备份</strong>。这样在备份数据库期间，不会因为数据或表结构的更新，而出现备份文件的数据与预期的不一样。</p><p>【缺点】</p><p>全局锁意味着整个数据库都是<strong>只读状态</strong>。业务只能读数据，而不能更新数据，这样会造成业务停滞。</p><blockquote><p>既然备份数据库数据的时候，使用全局锁会影响业务，那有什么其他方式可以避免？</p><p>在备份数据库之前先开启事务，会先创建 Read View，然后整个事务执行期间都在用这个 Read View，而且由于 MVCC 的支持，备份期间业务依然可以对数据进行更新操作。</p><p>备份数据库的工具是 mysqldump，在使用 mysqldump 时加上 <code>–single-transaction</code> 参数的时候，就会在备份数据库之前先开启事务。这种方法只适用于支持「可重复读隔离级别的事务」的存储引擎。</p></blockquote><h3 id="行锁与表锁" tabindex="-1"><a class="header-anchor" href="#行锁与表锁" aria-hidden="true">#</a> 行锁与表锁</h3><ul><li>行锁就是锁定某行</li><li>表锁就是对整张表进行加锁</li></ul><p>各引擎对锁的支持情况如下：</p><table><thead><tr><th style="text-align:center;"></th><th style="text-align:center;">行锁</th><th style="text-align:center;">表锁</th><th style="text-align:center;">页锁</th></tr></thead><tbody><tr><td style="text-align:center;">MyISAM</td><td style="text-align:center;"></td><td style="text-align:center;">√</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">InnoDB</td><td style="text-align:center;">√</td><td style="text-align:center;">√</td><td style="text-align:center;"></td></tr><tr><td style="text-align:center;">BDB</td><td style="text-align:center;"></td><td style="text-align:center;">√</td><td style="text-align:center;">√</td></tr></tbody></table><h3 id="行级锁" tabindex="-1"><a class="header-anchor" href="#行级锁" aria-hidden="true">#</a> 行级锁</h3><p>通过二级索引查询数据时，加锁流程示意图：</p><figure><img src="`+s+`" alt="1614350-20201115221104598-1160606998" tabindex="0" loading="lazy"><figcaption>1614350-20201115221104598-1160606998</figcaption></figure><p>接下来以两条SQL的执行为例，讲解一下InnoDB对于单行数据的加锁原理：</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>update user set age = 10 where id = 49;
update user set age = 10 where name = &#39;Tom&#39;;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>第一条SQL使用主键查询，只需要在 id = 49 这个主键索引上加上锁。第二条 SQL 使用二级索引来查询，那么首先在 name = Tom 这个索引上加写锁，然后由于使用 InnoDB 二级索引还需再次根据主键索引查询，所以还需要在 id = 49 这个主键索引上加锁。</p><p>也就是说使用主键索引需要加一把锁，使用二级索引需要在二级索引和主键索引上各加一把锁。</p><p>根据索引对单行数据进行更新的加锁原理了解了，那如果更新操作涉及多个行呢，比如下面 SQL 的执行场景。</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">update</span> <span class="token keyword">user</span> <span class="token keyword">set</span> age <span class="token operator">=</span> <span class="token number">10</span> <span class="token keyword">where</span> id <span class="token operator">&gt;</span> <span class="token number">49</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>上述 SQL 的执行过程如下图所示。MySQL Server 会根据 WHERE 条件读取第一条满足条件的记录，然后 InnoDB 引擎会将第一条记录返回并加锁，接着 MySQL Server 发起更新改行记录的 UPDATE 请求，更新这条记录。一条记录操作完成，再读取下一条记录，直至没有匹配的记录为止。</p><figure><img src="`+i+'" alt="1614350-20201115221131283-1993522185" tabindex="0" loading="lazy"><figcaption>1614350-20201115221131283-1993522185</figcaption></figure><p>行级锁的类型主要有三类：</p><ul><li><strong>Record Lock</strong>：记录锁，也就是仅仅把一条记录锁上。</li><li><strong>Gap Lock</strong>：间隙锁，锁定一个范围，但是不包含记录本身。</li><li><strong>Next-Key Lock</strong>：Record Lock + Gap Lock 的组合，锁定一个范围，并且锁定记录本身。</li></ul><figure><img src="'+l+`" alt="1614350-20201115221250844-767865625" tabindex="0" loading="lazy"><figcaption>1614350-20201115221250844-767865625</figcaption></figure><h4 id="记录锁-record-lock" tabindex="-1"><a class="header-anchor" href="#记录锁-record-lock" aria-hidden="true">#</a> 记录锁 Record Lock</h4><p>InnoDB实现了以下两种类型的行锁：</p><ul><li><strong>共享锁（S）</strong>：加了锁的记录，所有事务都能去读取但不能修改。「S 锁」与「 X 锁」不兼容，「S 锁」与 「S 锁」兼容。</li><li><strong>排他锁（X）</strong>：允许已经获得排他锁的事务去更新数据。「X 锁」与「S 锁」和「X 锁」都不兼容。</li></ul><p><strong><code>select for update</code> 增加 X 锁</strong></p><p>在执行这个 select 查询语句的时候，会将对应的索引访问条目加上排他锁（X锁），也就是说这个语句对应的锁就相当于 <code>update</code> 带来的效果。</p><p><strong>使用场景</strong>：为了让确保自己查找到的数据一定是最新数据，并且查找到后的数据值允许自己来修改，此时就需要用到<code>select for update</code>语句。</p><p><strong>性能分析</strong>：<code>select for update</code>语句相当于一个<code>update</code>语句。在业务繁忙的情况下，如果事务没有及时地<code>commit</code>或者<code>rollback</code>可能会造成事务长时间的等待，从而影响数据库的并发使用效率。</p><p><strong><code>select lock in share mode</code></strong> 增加 S 锁</p><p><code>in share mode</code> 子句的作用就是将查找的数据加上一个 <code>share</code> 锁，这个就是表示其他的事务只能对这些数据进行简单的 <code>select</code> 操作，而不能进行 DML 操作。</p><p><strong>使用场景</strong>：为了确保自己查询的数据不会被其他事务正在修改，也就是确保自己查询到的数据是最新的数据，并且不允许其他事务来修改数据。与<code>select for update</code>不同的是，本事务在查找完之后不一定能去更新数据，因为有可能其他事务也对同数据集使用了<code> in share mode</code> 的方式加上了S锁；</p><p><strong>性能分析</strong>：<code>select lock in share mode</code> 语句是一个给查找的数据上一个共享锁（S 锁）的功能，它允许其他的事务也对该数据上S锁，但是不能够允许对该数据进行修改。如果不及时的<code>commit </code>或者<code>rollback </code>也可能会造成大量的事务等待。</p><h4 id="间隙锁-gap-lock" tabindex="-1"><a class="header-anchor" href="#间隙锁-gap-lock" aria-hidden="true">#</a> 间隙锁 Gap Lock</h4><p>Gap Lock 称为间隙锁，只存在于可重复读隔离级别，目的是为了解决可重复读隔离级别下「幻读」的现象。</p><p>间隙锁是可以共存的，「共享间隙锁」与「独占间隙锁」之间是没有区别的，<strong>两者之间并不冲突</strong>。其存在的目的都是防止其他事务往间隙中插入新的纪录，故而一个事务所采取的间隙锁是不会去阻止另外一个事务在同一个间隙中加锁的。</p><p>**示例：**假设表中有一个范围 id 为 （3，5）的间隙锁，则其他事务就无法插入 id = 4 的记录，从而防止幻读。</p><h4 id="临建锁-next-key-lock" tabindex="-1"><a class="header-anchor" href="#临建锁-next-key-lock" aria-hidden="true">#</a> 临建锁 Next-Key Lock</h4><p>Record Lock + Gap Lock 的组合，锁定一个范围，并且锁定记录本身。</p><p>**示例：**假设表中有一个范围 id 为（3，5] 的 next-key lock，那么其他事务即不能插入 id = 4 记录，也不能修改 id = 5 这条记录。</p><p><strong>next-key lock 是包含间隙锁 + 记录锁的，如果一个事务获取了 X 型的 next-key lock，那么另外一个事务在获取相同范围的 X 型的 next-key lock 时，是会被阻塞的</strong>。</p><h4 id="插入意向锁" tabindex="-1"><a class="header-anchor" href="#插入意向锁" aria-hidden="true">#</a> 插入意向锁</h4><p>一个事务在插入一条记录的时候，需要判断插入位置是否已被其他事务加了间隙锁（next-key lock 也包含间隙锁）。</p><p>如果有的话，插入操作就会发生<strong>阻塞</strong>，直到拥有间隙锁的那个事务提交为止（释放间隙锁的时刻），在此期间会生成一个<strong>插入意向锁</strong>，表明有事务想在某个区间插入新记录，但是现在处于等待状态。</p><p>【<strong>示例</strong>】</p><p>假设事务 A 对表添加了 id 范围为 （3，5）的间隙锁，当事务 A 还未提交时，事务 B 向该表插入一条 id = 4 的记录，这时会判断插入位置已经有了间隙锁，事务 B 生成一个<strong>插入意向锁</strong>，将锁 的状态设置为等待状态，事务 B 被阻塞，直到事务 A 提交了事务。</p><p>「插入意向锁」与「间隙锁」的重要的差别是：尽管「插入意向锁」也属于间隙锁，但两个事务却不能在同一时间内，一个拥有间隙锁，另一个拥有该间隙区间内的插入意向锁（当然，插入意向锁如果不在间隙锁区间内则是可以的）。</p><h4 id="不同类型锁之间的兼容" tabindex="-1"><a class="header-anchor" href="#不同类型锁之间的兼容" aria-hidden="true">#</a> 不同类型锁之间的兼容</h4><p>不同类型的锁之间的兼容如下表所示（其中行表示已有的锁，列表示意图加上的锁）：</p><table><thead><tr><th></th><th>RECORED</th><th>GAP</th><th>NEXT-KEY</th><th>II GAP（插入意向锁）</th></tr></thead><tbody><tr><td>RECORED</td><td></td><td>兼容</td><td></td><td>兼容</td></tr><tr><td>GAP</td><td>兼容</td><td>兼容</td><td>兼容</td><td>兼容</td></tr><tr><td>NEXT-KEY</td><td></td><td>兼容</td><td></td><td>兼容</td></tr><tr><td>II GAP</td><td>兼容</td><td></td><td></td><td>兼容</td></tr></tbody></table><p>其中，第一行表示已有的锁，第一列表示要加的锁。插入意向锁较为特殊，所以我们先对插入意向锁做个总结，如下：</p><ul><li>插入意向锁不影响其他事务加其他任何锁。也就是说，一个事务已经获取了插入意向锁，对其他事务是没有任何影响的；</li><li>插入意向锁与间隙锁和 Next-key 锁冲突。也就是说，一个事务想要获取插入意向锁，如果有其他事务已经加了间隙锁或 Next-key 锁，则会阻塞。</li></ul><p>其他类型的锁的规则较为简单：</p><ul><li>间隙锁不和其他锁（不包括插入意向锁）冲突；</li><li>记录锁和记录锁冲突，Next-key 锁和 Next-key 锁冲突，记录锁和 Next-key 锁冲突；</li></ul><hr><h3 id="表级锁" tabindex="-1"><a class="header-anchor" href="#表级锁" aria-hidden="true">#</a> 表级锁</h3><p>MySQL 里面表级别的锁有这几种：</p><ul><li>表锁。</li><li>元数据锁（MDL）。</li><li>意向锁。</li><li>AUTO-INC 锁。</li></ul><h4 id="表锁" tabindex="-1"><a class="header-anchor" href="#表锁" aria-hidden="true">#</a> 表锁</h4><p>在会话开始的地方使用 <code>lock </code>命令将后续需要用到的表都加上锁，在表释放前，只能访问这些加锁的表，不能访问其他表，直到最后通过 <code>unlock tables</code> 释放所有表锁。</p><p>除了使用 <code>unlock tables</code> 显示释放锁之外，会话持有其他表锁时执行<code>lock table</code> 语句会释放会话之前持有的锁；会话持有其他表锁时执行 <code>start transaction</code> 或者 <code>begin </code>开启事务时，也会释放之前持有的锁。</p><p>表锁由 MySQL Server 实现，行锁则是存储引擎实现，不同的引擎实现的不同。在 MySQL 的常用引擎中 InnoDB 支持行锁，而 MyISAM 则只能使用 MySQL Server 提供的表锁。</p><h4 id="元数据锁" tabindex="-1"><a class="header-anchor" href="#元数据锁" aria-hidden="true">#</a> 元数据锁</h4><p>对数据库表进行操作时，会自动给这个表加上 MDL：</p><ul><li>对一张表进行 CRUD 操作时，加的是 <strong>MDL 读锁</strong>。</li><li>对一张表做结构变更操作的时候，加的是 <strong>MDL 写锁</strong>。</li></ul><p>MDL 是为了保证当用户对表执行 CRUD 操作时，防止其他线程对这个表结构做了变更。</p><p>申请 MDL 锁的操作会形成一个队列，队列中<strong>写锁获取优先级高于读锁</strong>，一旦出现 MDL 写锁等待，会阻塞后续该表的所有 CRUD 操作。</p><h4 id="意向锁" tabindex="-1"><a class="header-anchor" href="#意向锁" aria-hidden="true">#</a> 意向锁</h4><ul><li>在使用 InnoDB 引擎的表里对某些记录加上「共享锁」之前，需要先在表级别加上一个「意向共享锁」；</li><li>在使用 InnoDB 引擎的表里对某些纪录加上「独占锁」之前，需要先在表级别加上一个「意向独占锁」；</li></ul><p>也就是，当执行插入、更新、删除操作，需要先对表加上「意向独占锁」，然后对该记录加独占锁。</p><p>而普通的 select 是不会加行级锁的，普通的 select 语句是利用 MVCC 实现一致性读，是无锁的。</p><p>不过，select 也是可以对记录加共享锁和独占锁的，具体方式如下：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token comment">//先在表上加上意向共享锁，然后对读取的记录加共享锁</span>
<span class="token keyword">select</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">lock</span> <span class="token operator">in</span> <span class="token keyword">share</span> <span class="token keyword">mode</span><span class="token punctuation">;</span>

<span class="token comment">//先表上加上意向独占锁，然后对读取的记录加独占锁</span>
<span class="token keyword">select</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">for</span> <span class="token keyword">update</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>意向共享锁和意向独占锁是表级锁，不会和行级的共享锁和独占锁发生冲突，而且意向锁之间也不会发生冲突，只会和共享表锁（<code>lock tables ... read</code>）和独占表锁（<code>lock tables ... write</code>）发生冲突。</strong></p><p>【为什么要有意向锁呢？】</p><p>如果没有「意向锁」，那么加「独占表锁」时，就需要遍历表里所有记录，查看是否有记录存在独占锁，这样效率会很慢。</p><p>那么有了「意向锁」，由于在对记录加独占锁前，先会加上表级别的意向独占锁，那么在加「独占表锁」时，直接查该表是否有意向独占锁，如果有就意味着表里已经有记录被加了独占锁，这样就不用去遍历表里的记录。</p><p>所以，<strong>意向锁的目的是为了快速判断表里是否有记录被加锁</strong>。</p><h4 id="auto-inc-锁" tabindex="-1"><a class="header-anchor" href="#auto-inc-锁" aria-hidden="true">#</a> AUTO-INC 锁</h4><p>表里的主键通常都会设置成自增的，这是通过对主键字段声明 <code>AUTO_INCREMENT</code> 属性实现的。</p><p>之后可以在插入数据时，可以不指定主键的值，数据库会自动给主键赋值递增的值，这主要是通过 <strong>AUTO-INC 锁</strong>实现的。</p><p>AUTO-INC 锁是特殊的表锁机制，锁<strong>不是再一个事务提交后才释放，而是再执行完插入语句后就会立即释放</strong>。</p><p><strong>在插入数据时，会加一个表级别的 AUTO-INC 锁</strong>，然后为被 <code>AUTO_INCREMENT</code> 修饰的字段赋值递增的值，等插入语句执行完成后，才会把 AUTO-INC 锁释放掉。</p><p>所以，一个事务在持有 AUTO-INC 锁的过程中，其他事务的如果要向该表插入语句都会被阻塞，从而保证插入数据时，被 <code>AUTO_INCREMENT</code> 修饰的字段的值是连续递增的。</p><p>但是， AUTO-INC 锁再对大量数据进行插入的时候，会影响插入性能，因为另一个事务中的插入会被阻塞。</p><p>因此， 在 MySQL 5.1.22 版本开始，InnoDB 存储引擎提供了一种<strong>轻量级的锁</strong>来实现自增。</p><p>在插入数据的时候，会为被 <code>AUTO_INCREMENT</code> 修饰的字段加上轻量级锁，<strong>然后给该字段赋值一个自增的值，就把这个轻量级锁释放了，而不需要等待整个插入语句执行完后才释放锁</strong>。</p><p>InnoDB 存储引擎提供了个 <code>innodb_autoinc_lock_mode</code> 的系统变量，是用来控制选择用 AUTO-INC 锁，还是轻量级的锁。</p><ul><li>当 <code>innodb_autoinc_lock_mode = 0</code>：就采用 AUTO-INC 锁，语句执行结束后才释放锁。</li><li>当 <code>innodb_autoinc_lock_mode = 2</code>：就采用轻量级锁，申请自增主键后就释放锁，并不需要等语句执行后才释放。</li><li>当 <code>innodb_autoinc_lock_mode = 1</code>： <ul><li>普通 <code>insert</code> 语句，自增锁在申请之后就马上释放。</li><li>类似 <code>insert … select</code> 这样的批量插入数据的语句，自增锁还是要等语句结束后才被释放。</li></ul></li></ul><h3 id="两种锁比较" tabindex="-1"><a class="header-anchor" href="#两种锁比较" aria-hidden="true">#</a> 两种锁比较</h3><p>表锁：加锁过程的开销小，加锁的速度快；不会出现死锁的情况；锁定的粒度大，发生锁冲突的几率大，并发度低。</p><ul><li>一般在执行DDL语句时会对整个表进行加锁，比如说 ALTER TABLE 等操作；</li><li>如果对InnoDB的表使用行锁，被锁定字段不是主键，也没有针对它建立索引的话，那么将会锁整张表；</li><li>表级锁更适合于以查询为主，并发用户少，只有少量按索引条件更新数据的应用，如Web 应用。</li></ul><p>行锁：加锁过程的开销大，加锁的速度慢；会出现死锁；锁定粒度最小，发生锁冲突的概率最低，并发度也最高；</p><ul><li>最大程度的支持并发，同时也带来了最大的锁开销。</li><li>在 InnoDB 中，除单个 SQL 组成的事务外，锁是逐步获得的，这就决定了在 InnoDB 中发生死锁是可能的。</li><li>行级锁只在存储引擎层实现，而 MySQL 服务器层没有实现。 行级锁更适合于有大量按索引条件并发更新少量不同数据，同时又有并发查询的应用，如一些在线事务处理（OLTP）系统。</li></ul><h3 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h3><ul><li><p>https://juejin.cn/post/6844903799534911496</p></li><li><p>https://www.cnblogs.com/jojop/p/13982679.html#1383854867</p></li></ul><h2 id="mysql-如何添加行级锁" tabindex="-1"><a class="header-anchor" href="#mysql-如何添加行级锁" aria-hidden="true">#</a> MySQL 如何添加行级锁</h2><p><strong>加锁的对象是索引，加锁的基本单位是 next-key lock</strong>，它是由记录锁和间隙锁组合而成的，<strong>next-key lock 是前开后闭区间，而间隙锁是前开后开区间</strong>。</p><p>但是，<strong>在能使用「记录锁」或者「间隙锁」就能避免幻读现象的场景下， next-key lock 就会退化成「记录锁」或「间隙锁」</strong>。</p><h3 id="唯一索引等值查询" tabindex="-1"><a class="header-anchor" href="#唯一索引等值查询" aria-hidden="true">#</a> 唯一索引等值查询</h3><p>用唯一索引进行等值查询的时候，查询的记录存不存在，加锁的规则也会不同：</p><ul><li>当查询的记录是「存在」的，在索引树上定位到这一条记录后，将该记录的索引中的 next-key lock 会<strong>退化成「记录锁」</strong>。</li><li>当查询的记录是「不存在」的，在索引树找到第一条大于该查询记录的记录后，将该记录的索引中的 next-key lock 会<strong>退化成「间隙锁」</strong>。</li></ul><h4 id="记录存在的情况" tabindex="-1"><a class="header-anchor" href="#记录存在的情况" aria-hidden="true">#</a> 记录存在的情况</h4><p>【<strong>问题</strong>】：为什么唯一索引等值查询并且查询记录存在的场景下，该记录的索引中的 next-key lock 会退化成记录锁？</p><p>在唯一索引等值查询并且查询记录存在的场景下，仅靠记录锁也能避免幻读的问题。</p><ul><li>由于主键具有唯一性，所以<strong>其他事务插入 id = 1 的时候，会因为主键冲突，导致无法插入 id = 1 的新记录</strong>。这样事务 A 在多次查询 id = 1 的记录的时候，不会出现前后两次查询的结果集不同，也就避免了幻读的问题。</li><li>由于对 id = 1 加了记录锁，<strong>其他事务无法删除该记录</strong>，这样事务 A 在多次查询 id = 1 的记录的时候，不会出现前后两次查询的结果集不同，也就避免了幻读的问题。</li></ul><h4 id="记录不存在的情况" tabindex="-1"><a class="header-anchor" href="#记录不存在的情况" aria-hidden="true">#</a> 记录不存在的情况</h4><img src="`+e+`" alt="image-20231220193932316" style="zoom:80%;"><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>mysql&gt; begin;
Query OK, 0 rows affected (0.00 sec)

mysql&gt; select * from user where id = 2 for update;
Empty set (0.03 sec)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>事务 A 在 id = 5 记录的主键索引上加的是间隙锁，锁住的范围是 (1, 5)。</strong></p><p>接下来，如果有其他事务插入 id 值为 2、3、4 这一些记录的话，这些插入语句都会发生阻塞。</p><p>注意，如果其他事务插入的 id = 1 或者 id = 5 的记录话，并不会发生阻塞，而是报主键冲突的错误，因为表中已经存在 id = 1 和 id = 5 的记录了。</p><p><strong>间隙锁的范围<code>(1, 5)</code> ，是怎么确定的？</strong></p><p>如果 LOCK_MODE 是 next-key 锁或者间隙锁，那么 LOCK_DATA 就表示锁的范围「右边界」，此次的事务 A 的 LOCK_DATA 是 5。</p><p>然后锁范围的「左边界」是表中 id 为 5 的上一条记录的 id 值，即 1。</p><p>因此，间隙锁的范围<code>(1, 5)</code>。</p><p>【问题】：为什么唯一索引查询记录「不存在」的场景下，在索引树找到第一条大于该查询记录的记录后，要将该记录的索引中的 next-key lock 会退化成「间隙锁」？</p><ul><li>id = 5 记录上的主键索引的锁如果是 next-key lock，就意味着其他事务无法删除 id = 5 这条记录。但是这次的案例是查询 id = 2 的记录，只要保证前后两次查询 id = 2 的结果集相同，就能避免幻读的问题了。即使 id =5 被删除，也不会有什么影响，那就没必须加 next-key lock，因此只需要在 id = 5 加间隙锁，避免其他事务插入 id = 2 的新记录就行了。</li></ul><p>【问题】：为什么不可以针对不存在的记录加记录锁？</p><p>锁是加在索引上的，而这个场景下查询的记录是不存在的，自然就没办法锁住这条不存在的记录。</p><h3 id="唯一索引范围查询" tabindex="-1"><a class="header-anchor" href="#唯一索引范围查询" aria-hidden="true">#</a> 唯一索引范围查询</h3><p>当唯一索引进行范围查询时，<strong>会对每一个扫描到的索引加 next-key 锁，然后如果遇到下面这些情况，会退化成记录锁或者间隙锁</strong>：</p><ul><li>针对「大于等于」的范围查询，因为存在等值查询的条件，那么如果等值查询的记录是存在于表中，那么该记录的索引中的 next-key 锁会<strong>退化成记录锁</strong>。</li><li>针对「小于或者小于等于」的范围查询，要看条件值的记录是否存在于表中： <ul><li>当条件值的记录「不在表」中，那么不管是「小于」还是「小于等于」条件的范围查询，<strong>扫描到终止范围查询的记录时，该记录的索引的 next-key 锁会退化成间隙锁</strong>，其他扫描到的记录，都是在这些记录的索引上加 next-key 锁。</li><li>当条件值的记录「在表」中，如果是「小于」条件的范围查询，<strong>扫描到终止范围查询的记录时，该记录的索引的 next-key 锁会退化成间隙锁</strong>，其他扫描到的记录，都是在这些记录的索引上加 next-key 锁；如果「小于等于」条件的范围查询，扫描到终止范围查询的记录时，该记录的索引 next-key 锁不会退化成间隙锁。其他扫描到的记录，都是在这些记录的索引上加 next-key 锁。</li></ul></li></ul><h4 id="针对「大于或者大于等于」的范围查询" tabindex="-1"><a class="header-anchor" href="#针对「大于或者大于等于」的范围查询" aria-hidden="true">#</a> 针对「大于或者大于等于」的范围查询</h4><img src="`+e+`" alt="image-20231220193932316" style="zoom:80%;"><p>【示例一：针对「大于」的范围查询】</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>select * from user where id &gt; 15 for update;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>加锁变化过程如下：</p><ol><li><p>最开始要找的第一行是 id = 20，由于查询该记录不是一个等值查询（不是大于等于条件查询），所以对该主键索引加的是范围为 (15, 20] 的 next-key 锁。</p></li><li><p>由于是范围查找，就会继续往后找存在的记录，虽然表中最后一条记录是 id = 20 的记录，但是实际在 Innodb 存储引擎中，会用一个特殊的记录来标识最后一条记录，该特殊的记录的名字叫 「supremum pseudo-record」 ，所以扫描第二行的时候，也就扫描到了这个特殊记录的时候，会对该主键索引加的是范围为 (20, +∞] 的 next-key 锁。</p></li></ol><ul><li>在 id = 20 这条记录的主键索引上，加了范围为 (15, 20] 的 next-key 锁，意味着其他事务即无法更新或者删除 id = 20 的记录，同时无法插入 id 值为 16、17、18、19 的这一些新记录。</li><li>在特殊记录「supremum pseudo-record」的主键索引上，加了范围为 (20, +∞] 的 next-key 锁，意味着其他事务无法插入 id 值大于 20 的这一些新记录。</li></ul><p>【示例二：针对「大于等于」的范围查询】</p><div class="language-mysql line-numbers-mode" data-ext="mysql"><pre class="language-mysql"><code>select * from user where id &gt;= 15 for update;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>加锁变化过程如下：</p><ol><li>最开始要找的第一行是 id = 15，由于查询该记录是一个等值查询（等于 15），所以该主键索引的 next-key 锁会<strong>退化成记录锁</strong>，也就是仅锁住 id = 15 这一行记录。</li><li>由于是范围查找，就会继续往后找存在的记录，扫描到的第二行是 id = 20，于是对该主键索引加的是范围为 (15, 20] 的 next-key 锁。</li><li>接着扫描到第三行的时候，扫描到了特殊记录「supremum pseudo-record」 ，于是对该主键索引加的是范围为 (20, +∞] 的 next-key 锁。</li></ol><ul><li>在 id = 15 这条记录的主键索引上，加了记录锁，范围是 id = 15 这一行记录；意味着其他事务无法更新或者删除 id = 15 的这一条记录；</li><li>在 id = 20 这条记录的主键索引上，加了 next-key 锁，范围是 (15, 20] 。意味着其他事务即无法更新或者删除 id = 20 的记录，同时无法插入 id 值为 16、17、18、19 的这一些新记录。</li><li>在特殊记录「supremum pseudo-record」的主键索引上，加了 next-key 锁，范围是 (20, +∞] 。意味着其他事务无法插入 id 值大于 20 的这一些新记录。</li></ul><h3 id="非唯一索引等值查询" tabindex="-1"><a class="header-anchor" href="#非唯一索引等值查询" aria-hidden="true">#</a> 非唯一索引等值查询</h3><p><strong>在加锁时，同时会对这两个索引都加锁，但是对主键索引加锁的时候，只有满足查询条件的记录才会对它们的主键索引加锁</strong>。</p><p>针对非唯一索引等值查询时，查询的记录存不存在，加锁的规则也会不同：</p><ul><li>当查询的记录「存在」时，由于不是唯一索引，所以肯定存在索引值相同的记录，于是<strong>非唯一索引等值查询的过程是一个扫描的过程，直到扫描到第一个不符合条件的二级索引记录就停止扫描，然后在扫描的过程中，对扫描到的二级索引记录加的是 next-key 锁，而对于第一个不符合条件的二级索引记录，该二级索引的 next-key 锁会退化成间隙锁。同时，在符合查询条件的记录的主键索引上加记录锁</strong>。</li><li>当查询的记录「不存在」时，<strong>扫描到第一条不符合条件的二级索引记录，该二级索引的 next-key 锁会退化成间隙锁。因为不存在满足查询条件的记录，所以不会对主键索引加锁</strong>。</li></ul>`,148),c=[r];function p(u,h){return n(),a("div",null,c)}const m=t(o,[["render",p],["__file","MySQL锁那些事.html.vue"]]);export{m as default};
