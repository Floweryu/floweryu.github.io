import{_ as s}from"./plugin-vue_export-helper-c27b6911.js";import{r as e,o,c as t,b as a,d as p,e as i,a as r}from"./app-c589b14c.js";const c="/assets/image-20231206193828613-4e7d69a2.png",l="/assets/image-20231211175059914-a37112a3.png",d="/assets/image-20231211175116609-a8a7694a.png",h="/assets/image-20231211175130713-df6b433f.png",g="/assets/image-20231211175144129-a29766d0.png",u="/assets/image-20231211175158047-55813b3c.png",m="/assets/image-20231211175211793-b4fff607.png",k="/assets/image-20231211175231142-474514a1.png",_="/assets/image-20231211175251663-811458ee.png",L="/assets/image-20231211175306029-cf320507.png",b="/assets/image-20231211175324947-b207945c.png",f={},y=r('<h2 id="mysql-数据文件存储在哪个文件" tabindex="-1"><a class="header-anchor" href="#mysql-数据文件存储在哪个文件" aria-hidden="true">#</a> MySQL 数据文件存储在哪个文件</h2><p>每创建一个数据库都会在「/var/lib/mysql/ 」 目录里面创建一个以该数据库为名的目录，然后保存表结构和表数据的文件都会存放在这个目录里。</p><ul><li><strong>db.opt</strong>：存储当前数据库的默认字符集和字符校验规则。</li><li><strong>表名.frm</strong>：存储表结构信息。</li><li><strong>表名.ibd</strong>：存储表数据。</li></ul><h2 id="表空间文件结构" tabindex="-1"><a class="header-anchor" href="#表空间文件结构" aria-hidden="true">#</a> 表空间文件结构</h2><p><strong>表空间由段「segment」、区「extent」、页「page」、行「row」组成</strong>，InnoDB存储引擎的逻辑存储结构大致如下图：</p><img src="'+c+'" alt="image-20231206193828613" style="zoom:50%;"><h3 id="行" tabindex="-1"><a class="header-anchor" href="#行" aria-hidden="true">#</a> 行</h3><p>数据库表中的记录都是按「行」进行存放的，每行记录根据不同的行格式，有不同的存储结构。</p><h3 id="页" tabindex="-1"><a class="header-anchor" href="#页" aria-hidden="true">#</a> 页</h3><p>记录是按照行来存储的，但是数据库的读取并不以「行」为单位，否则一次读取（也就是一次 I/O 操作）只能处理一行数据，效率会非常低。</p><p>因此，<strong>InnoDB 的数据是按「页」为单位来读写的</strong>，也就是说，当需要读一条记录的时候，并不是将这个行记录从磁盘读出来，而是以页为单位，将其整体读入内存。</p><p><strong>默认每个页的大小为 16KB</strong>，也就是最多能保证 16KB 的连续存储空间。</p><p>页是 InnoDB 存储引擎磁盘管理的最小单元，意味着数据库每次读写都是以 16KB 为单位的，一次最少从磁盘中读取 16KB 的内容到内存中，一次最少把内存中的 16KB 内容刷新到磁盘中。</p><h3 id="区" tabindex="-1"><a class="header-anchor" href="#区" aria-hidden="true">#</a> 区</h3><p>B+ 树中每一层都是通过双向链表连接起来的，如果是以页为单位来分配存储空间，那么链表中相邻的两个页之间的物理位置并不是连续的，可能离得非常远，那么磁盘查询时就会有大量的随机 I/O，随机 I/O 是非常慢的。</p><p>【<strong>怎么解决呢？</strong>】</p><p>在表中数据量大的时候，为某个索引分配空间的时候就不再按照页为单位分配了，而是按照「区」为单位分配。每个区的大小为 1MB，对于 16KB 的页来说，连续的 64 个页会被划为一个区，这样就使得链表中相邻的页的物理位置也相邻，就能使用顺序 I/O 了。</p><h3 id="段" tabindex="-1"><a class="header-anchor" href="#段" aria-hidden="true">#</a> 段</h3><p>表空间是由各个段组成的，段是由多个区组成的。段一般分为「数据段」、「索引段」和「回滚段」等。</p><ul><li>索引段：存放 B + 树的非叶子节点的区的集合。</li><li>数据段：存放 B + 树的叶子节点的区的集合。</li><li>回滚段：存放的是回滚数据的区的集合，MVCC 利用了回滚段实现了多版本查询数据。</li></ul><h2 id="innodb-行格式" tabindex="-1"><a class="header-anchor" href="#innodb-行格式" aria-hidden="true">#</a> InnoDB 行格式</h2><p>有下面 4 种行格式：</p><ul><li><strong>Redundant</strong>：MySQL 5.0 版本之前用的行格式，不紧凑。</li><li><strong>Compact</strong>：MySQL 5.1 版本之后，行格式默认设置成 Compact。一种紧凑的行格式，可以让一页存储更多行记录。</li><li><strong>Dynamic</strong> 和 <strong>Compressed</strong>：从 MySQL5.7 版本之后，默认使用 Dynamic 行格式。 两个都是紧凑的行格式，它们的行格式都和 Compact 差不多，都是基于 Compact 改进一点东西。</li></ul><h3 id="compact-行格式" tabindex="-1"><a class="header-anchor" href="#compact-行格式" aria-hidden="true">#</a> COMPACT 行格式</h3><figure><img src="'+l+'" alt="image-20231211175059914" tabindex="0" loading="lazy"><figcaption>image-20231211175059914</figcaption></figure><h4 id="记录的额外信息" tabindex="-1"><a class="header-anchor" href="#记录的额外信息" aria-hidden="true">#</a> 记录的额外信息</h4><h5 id="_1-变长字段长度列表" tabindex="-1"><a class="header-anchor" href="#_1-变长字段长度列表" aria-hidden="true">#</a> 1. 变长字段长度列表</h5><blockquote><p><code>varchar(n)</code> 和 <code>char(n)</code> 的区别：<code>char </code>是定长的，<code>varchar </code>是变长的，变长字段实际存储的数据的长度（大小）不固定的。</p></blockquote><p>在存储数据的时候，要把数据占用的大小存起来，存到「变长字段长度列表」里面，读取数据的时候才能根据这个「变长字段长度列表」去读取对应长度的数据。其他 TEXT、BLOB 等变长字段也是这么实现的。</p><p>【示例】创建下面表进行演示：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>t_user<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>\n  <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>phone<span class="token punctuation">`</span></span> <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>\n  <span class="token identifier"><span class="token punctuation">`</span>age<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>\n  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span> <span class="token keyword">USING</span> <span class="token keyword">BTREE</span>\n<span class="token punctuation">)</span> <span class="token keyword">ENGINE</span> <span class="token operator">=</span> <span class="token keyword">InnoDB</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARACTER</span> <span class="token keyword">SET</span> <span class="token operator">=</span> ascii ROW_FORMAT <span class="token operator">=</span> COMPACT<span class="token punctuation">;</span>\n</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>假设有下面三条记录：</p><img src="'+d+'" alt="image-20231211175116609" style="zoom:50%;"><p>第一条记录「只看变长字段」：</p><ul><li><code>name</code>字段值为 <code>a</code>，占 1 字节。</li><li><code>phone</code> 字段值为 <code>123</code>，占 3 字节。</li></ul><p>这些变长字段的真实数据占用的字节数会按照列的顺序 <strong>逆序存放</strong>，所以「变长字段长度列表」里的内容是「 03 01」，而不是 「01 03」。</p><figure><img src="'+h+'" alt="image-20231211175130713" tabindex="0" loading="lazy"><figcaption>image-20231211175130713</figcaption></figure><p>同理，第二条记录：</p><figure><img src="'+g+'" alt="image-20231211175144129" tabindex="0" loading="lazy"><figcaption>image-20231211175144129</figcaption></figure><p><strong>第三条记录</strong> 中 <code>phone </code>列的值是 NULL，<strong>NULL 是不会存放在行格式中记录的真实数据部分里的</strong>，所以「变长字段长度列表」里不需要保存值为 NULL 的变长字段的长度。</p><figure><img src="'+u+'" alt="image-20231211175158047" tabindex="0" loading="lazy"><figcaption>image-20231211175158047</figcaption></figure><hr><p>【为什么「变长字段长度列表」的信息要按照逆序存放】</p><p>因为「记录头信息」中指向下一个记录的指针，指向的是下一条记录的「记录头信息」和「真实数据」之间的位置，这样的好处是向左读就是记录头信息，向右读就是真实数据，比较方便。</p><p>「变长字段长度列表」中的信息之所以要逆序存放，是因为这样可以<strong>使得位置靠前的记录的真实数据和数据对应的字段长度信息可以同时在一个 CPU Cache Line 中，这样就可以提高 CPU Cache 的命中率</strong>。</p><p><strong>当数据表没有变长字段的时候，比如全部都是 int 类型的字段，这时候表里的行格式就不会有「变长字段长度列表」了</strong>，因为没必要，不如去掉以节省空间。</p><p>所以「变长字段长度列表」只出现在数据表有变长字段的时候。</p><h5 id="_2-null-值列表" tabindex="-1"><a class="header-anchor" href="#_2-null-值列表" aria-hidden="true">#</a> 2. NULL 值列表</h5><p>表中的某些列可能会存储 NULL 值，如果把这些 NULL 值都放到记录的真实数据中会比较浪费空间，所以 Compact 行格式把这些值为 NULL 的列存储到 NULL 值列表中。</p><p>如果存在允许 NULL 值的列，则每个列对应一个二进制位（bit），二进制位按照列的顺序逆序排列。</p><ul><li>二进制位的值为<code>1</code>时，代表该列的值为 NULL。</li><li>二进制位的值为<code>0</code>时，代表该列的值不为 NULL。</li></ul><p>另外，NULL 值列表必须用整数个字节的位表示（1字节8位），如果使用的二进制位个数不足整数个字节，则在字节的高位补 <code>0</code>。</p><p>当一条记录有 9 个字段值都是 NULL，那么就会创建 2 字节空间的「NULL 值列表」，以此类推。</p><p><strong>当数据表的字段都定义成 NOT NULL 的时候，这时候表里的行格式就不会有 NULL 值列表了</strong>。</p><blockquote><p>💡所以在设计数据库表的时候，通常都是建议将字段设置为 NOT NULL，这样可以至少节省 1 字节的空间（NULL 值列表至少占用 1 字节空间）。</p></blockquote><hr><p>【举例】以上面表举例：</p><img src="'+m+'" alt="image-20231211175211793" style="zoom:50%;"><p>第一条记录：</p><img src="'+k+'" alt="image-20231211175231142" style="zoom:25%;"><p>但是 InnoDB 是用整数字节的二进制位来表示 NULL 值列表的，现在不足 8 位，所以要在高位补 0，最终用二进制来表示：</p><img src="'+_+'" alt="image-20231211175251663" style="zoom:33%;"><p>第二条记录：</p><img src="'+L+'" alt="image-20231211175306029" style="zoom:33%;"><p>将三条记录的 NULL 值列表填充完毕后，行格式为下面这样：</p><img src="'+b+'" alt="image-20231211175324947" style="zoom:50%;"><h5 id="_3-记录头信息" tabindex="-1"><a class="header-anchor" href="#_3-记录头信息" aria-hidden="true">#</a> 3. 记录头信息</h5><p>列举比较重要的几个：</p><ul><li><strong>delete_mask</strong>：标识此条数据是否被删除。执行 <code>detele</code> 删除记录的时候，并不会真正的删除记录，只是将这个记录的 「delete_mask」标记为 1</li><li><strong>next_record</strong>：下一条记录的位置。记录与记录之间是通过链表组织的，指向的是下一条记录的「记录头信息」和「真实数据」之间的位置，这样的好处是向左读就是记录头信息，向右读就是真实数据，比较方便。</li><li><strong>record_type</strong>：表示当前记录的类型，0 表示普通记录，1 表示 B+ 树非叶子节点记录，2 表示最小记录，3 表示最大记录。</li></ul><h4 id="记录的真实数据" tabindex="-1"><a class="header-anchor" href="#记录的真实数据" aria-hidden="true">#</a> 记录的真实数据</h4><p>记录真实数据部分除了自定义的字段，还有三个隐藏字段，分别为：<strong>row_id</strong>、<strong>trx_id</strong>、<strong>roll_pointer</strong>。</p><h5 id="row-id" tabindex="-1"><a class="header-anchor" href="#row-id" aria-hidden="true">#</a> row_id</h5><p>建表的时候指定了主键或者唯一约束列，那么就没有 row_id 隐藏字段了。如果既没有指定主键，又没有唯一约束，那么 InnoDB 就会为记录添加 row_id 隐藏字段。row_id <strong>不是必需</strong>的，占用 6 个字节。</p><h5 id="trx-id" tabindex="-1"><a class="header-anchor" href="#trx-id" aria-hidden="true">#</a> trx_id</h5><p>事务id，表示这个数据是由哪个事务生成的。 trx_id 是<strong>必需</strong>的，占用 6 个字节。</p><h5 id="roll-pointer" tabindex="-1"><a class="header-anchor" href="#roll-pointer" aria-hidden="true">#</a> roll_pointer</h5><p>这条记录上一个版本的指针。roll_pointer 是<strong>必需</strong>的，占用 7 个字节。</p><blockquote><p>💡 MVCC 机制就跟 trx_id 和 roll_pointer 的作用有关。</p></blockquote><h2 id="varchar-n-中的-n-最大取值" tabindex="-1"><a class="header-anchor" href="#varchar-n-中的-n-最大取值" aria-hidden="true">#</a> varchar(n) 中的 n 最大取值</h2><p><strong>MySQL 规定除了 TEXT、BLOBs 这种大对象类型之外，其他所有的列（不包括隐藏列和记录头信息）占用的字节长度「加起来」不能超过 65535 个字节</strong>。</p><p><code>varchar(n)</code> 字段类型的 n 代表的是最多存储的字符数量，并不是字节大小。</p><p>要算 <code>varchar(n)</code> 最大能允许存储的字节数，还要看数据库表的字符集，因为字符集代表着：1个字符要占用多少字节，比如 ascii 字符集， 1 个字符占用 1 字节，那么 <code>varchar(100)</code> 意味着最大能允许存储 100 字节的数据。</p><p>【单字段情况】</p><p>在算 <code>varchar(n)</code> 中 n 最大值时，需要减去 「变长字段长度列表」和 「NULL 值列表」所占用的字节数的。</p><p>【多字段情况】</p><p>如果有多个字段的话，要保证「所有字段的长度 + 变长字段字节数列表所占用的字节数 + NULL值列表所占用的字节数」 &lt;= 65535。</p><h2 id="行溢出后-如何存储数据" tabindex="-1"><a class="header-anchor" href="#行溢出后-如何存储数据" aria-hidden="true">#</a> 行溢出后，如何存储数据</h2><p>如果一个数据页存不了一条记录，InnoDB 存储引擎会自动将溢出的数据存放到「溢出页」中。</p><p>在记录的真实数据处只会保存该列的一部分数据，而把剩余的数据放在「溢出页」中，然后「真实数据」处用 20 字节存储指向溢出页的地址，从而可以找到剩余数据所在的页。</p><h2 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考</h2>',90),x={href:"https://www.xiaolincoding.com/mysql/base/row_format.html",target:"_blank",rel:"noopener noreferrer"};function N(U,v){const n=e("ExternalLinkIcon");return o(),t("div",null,[y,a("ul",null,[a("li",null,[a("a",x,[p("MySQL一行记录如何存储"),i(n)])])])])}const C=s(f,[["render",N],["__file","MySQL一行记录如何存储.html.vue"]]);export{C as default};
