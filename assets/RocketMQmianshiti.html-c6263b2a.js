import{_ as n,o as s,c as a,d as t}from"./app-2271b034.js";const e="/assets/image-20231031220524727-9be5b88d.png",p={},o=t(`<h2 id="rocketmq如何保证消费幂等" tabindex="-1"><a class="header-anchor" href="#rocketmq如何保证消费幂等" aria-hidden="true">#</a> RocketMQ如何保证消费幂等？</h2><blockquote><p>也可以理解为RocketMQ如何防止重复消费？</p></blockquote><h3 id="消息幂等" tabindex="-1"><a class="header-anchor" href="#消息幂等" aria-hidden="true">#</a> 消息幂等</h3><p>当出现消费者对某条消息重复消费的情况时，<strong>重复消费的结果与消费一次的结果是相同</strong>，并且<strong>多次消费并未对业务系统产生任何负面影响</strong>，那么这个消费者的处理过程就是幂等的。</p><h3 id="适用场景" tabindex="-1"><a class="header-anchor" href="#适用场景" aria-hidden="true">#</a> 适用场景</h3><p><strong>1. 发送消息时重复</strong></p><p>当一条消息已被成功发送到服务端并完成持久化，此时出现了网络闪断或者客户端宕机，导致MQ服务端对客户端应答失败。 此时生产者意识到消息发送失败并尝试再次发送消息，消费者后续会收到两条内容相同但Message ID不同的消息。</p><p><strong>2. 投递时消息重复</strong></p><p>消息已投递到消费者并完成业务处理，当客户端给服务端反馈应答的时候网络闪断，导致消费成功的状态无法返回给MQ服务端。为了保证消息至少被消费一次，RocketMQ服务端将在网络恢复后再次尝试投递之前已被处理过的消息，消费者后续会收到两条内容相同并且Message ID也相同的消息。</p><p><strong>3. 负载均衡时消息重复</strong></p><p>当RocketMQ的Broker或客户端重启、扩容或缩容时，会触发Rebalance，此时消费者可能会收到少量重复消息。</p><h3 id="处理方法" tabindex="-1"><a class="header-anchor" href="#处理方法" aria-hidden="true">#</a> 处理方法</h3><p>因为<strong>不同的Message ID对应的消息内容可能相同</strong>，有可能出现冲突（重复）的情况，所以真正安全的幂等处理，不建议以Message ID作为处理依据。</p><p>最好的方式是<strong>以业务唯一标识作为幂等处理的关键依据</strong>，而业务的唯一标识可以通过消息Key设置。</p><p>以支付场景为例，可以将消息的Key设置为订单号，作为幂等处理的依据。具体代码示例如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Message</span> message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
message<span class="token punctuation">.</span><span class="token function">setKey</span><span class="token punctuation">(</span><span class="token string">&quot;ORDERID_100&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">SendResult</span> sendResult <span class="token operator">=</span> producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>消费者收到消息时可以根据消息的Key，即订单号来实现消息幂等：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>consumer<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">&quot;ons_test&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;*&quot;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">MessageListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token class-name">Action</span> <span class="token function">consume</span><span class="token punctuation">(</span><span class="token class-name">Message</span> message<span class="token punctuation">,</span> <span class="token class-name">ConsumeContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> key <span class="token operator">=</span> message<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token comment">// 根据业务唯一标识的Key做幂等处理。</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>处理方式如下：</p><h4 id="_1-数据库对唯一标识字段设置唯一索引" tabindex="-1"><a class="header-anchor" href="#_1-数据库对唯一标识字段设置唯一索引" aria-hidden="true">#</a> 1. 数据库对唯一标识字段设置唯一索引</h4><h4 id="_2-对数据库使用select-for-update或者乐观锁" tabindex="-1"><a class="header-anchor" href="#_2-对数据库使用select-for-update或者乐观锁" aria-hidden="true">#</a> 2. 对数据库使用<code>select for update</code>或者乐观锁</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>select <span class="token operator">*</span> from t_order where order_no <span class="token operator">=</span> &#39;<span class="token constant">THIS_ORDER_NO</span>&#39; <span class="token keyword">for</span> update  <span class="token comment">//开启事务</span>
<span class="token keyword">if</span><span class="token punctuation">(</span>order<span class="token punctuation">.</span>status <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">;</span><span class="token comment">//消息重复，直接返回</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-基于关系数据库事务插入消息表" tabindex="-1"><a class="header-anchor" href="#_3-基于关系数据库事务插入消息表" aria-hidden="true">#</a> 3. 基于关系数据库事务插入消息表</h4><p>在数据库中增加一个消息消费记录表，把消息插入到这个表，并且把原来的订单更新和这个插入的动作放到同一个事务中一起提交，就能保证消息只会被消费一遍了。</p><ol><li>开启事务</li><li>插入消息表（解决主键冲突，需要选择好唯一标识）</li><li>更新订单表（消费逻辑）</li><li>提交事务</li></ol><p>按照上面步骤：如果消息消费成功，则消息也插入成功。此时就算再次投递该条消息，也会因为插入消息表失败而回滚事务，从而保证消费幂等。</p><h4 id="_4-拆解消息" tabindex="-1"><a class="header-anchor" href="#_4-拆解消息" aria-hidden="true">#</a> 4. 拆解消息</h4><p>第三个方案基于事务，可能导致锁表时间过长等性能问题。考虑下面这个场景：</p><ol><li>检查库存（RPC）</li><li>锁库存（RPC）</li><li>开启事务，插入订单表（MySQL）</li><li>调用某些其他下游服务（RPC）</li><li>更新订单状态</li><li>commit 事务（MySQL）</li></ol><p>这种情况下，采取消息表+本地事务的实现方式，消息消费过程中很多子过程是不支持回滚的。特别是RPC调用，如果增加分布式事务，将大大降低系统并发。</p><p><strong>拆解消息过程：</strong></p><ol><li>库存系统消费A：检查库存并做锁库存，发送消息B给订单服务</li><li>订单系统消费消息B：插入订单表（MySQL），发送消息C给自己（下游系统）消费</li><li>下游系统消费消息C：处理部分逻辑，发送消息D给订单系统</li><li>订单系统消费消息D：更新订单状态</li></ol><p>上面操作使得每一步的操作都比较原子，意味着使用消息表+事务的方案显得可行。</p><h3 id="参考" tabindex="-1"><a class="header-anchor" href="#参考" aria-hidden="true">#</a> 参考：</h3><ul><li>https://jaskey.github.io/blog/2020/06/08/rocketmq-message-dedup/</li></ul><h2 id="如何保证消息不丢失-可靠性" tabindex="-1"><a class="header-anchor" href="#如何保证消息不丢失-可靠性" aria-hidden="true">#</a> 如何保证消息不丢失/可靠性？</h2><p>一条消息从生产到被消费，将会经历三个阶段：</p><p><img src="`+e+`" alt="image-20231031220524727"></p><h3 id="生产阶段" tabindex="-1"><a class="header-anchor" href="#生产阶段" aria-hidden="true">#</a> 生产阶段</h3><p><strong>概述</strong>：通过请求确认机制保证消息传递可靠性。如果消息发送失败，可以尝试一下操作：</p><ul><li>直接捕获异常重试</li><li>将消息存储到db，然后由后台线程定时重试，确保消息一定到达Broker</li></ul><p><strong>同步发送消息</strong>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token class-name">SendResult</span> sendResult <span class="token operator">=</span> mqProducer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RemotingException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">MQBrokerException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">MQClientException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>send</code>方法不抛出异常就表示消息发送成功，业务中可以对异常进行捕获进行重试。</p><p><strong>异步发送消息</strong>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">try</span> <span class="token punctuation">{</span>
    <span class="token comment">// 异步发送消息到，主线程不会被阻塞，立刻会返回</span>
    mqProducer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">SendCallback</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onSuccess</span><span class="token punctuation">(</span><span class="token class-name">SendResult</span> sendResult<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 消息发送成功，</span>
        <span class="token punctuation">}</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onException</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 消息发送失败，可以持久化这条数据，后续进行补偿处理</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RemotingException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">MQClientException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>异步发送一定要重新回调方法，可以在消息发送失败回调<code>onException()</code>方法中进行重试处理。</p><p>可以通过下面两个参数设置重试次数：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 同步发送消息重试次数，默认为 2</span>
mqProducer<span class="token punctuation">.</span><span class="token function">setRetryTimesWhenSendFailed</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 异步发送消息重试次数，默认为 2</span>
mqProducer<span class="token punctuation">.</span><span class="token function">setRetryTimesWhenSendAsyncFailed</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="存储阶段" tabindex="-1"><a class="header-anchor" href="#存储阶段" aria-hidden="true">#</a> 存储阶段</h3><p><strong>同步刷盘</strong>：只有在消息真正持久化至磁盘后 RocketMQ 的 Broker 端才会真正返回给 Producer 端一个成功的 ACK 响应。同步刷盘对 MQ 消息可靠性来说是一种不错的保障，但是性能上会有较大影响，一般适用于金融业务应用该模式较多。</p><p><strong>异步刷盘（默认）</strong>：能够充分利用 OS 的 <strong>PageCache</strong> 的优势，只要消息写入 <strong>PageCache</strong> 即可将成功的 ACK 返回给 Producer 端。消息刷盘采用后台异步线程提交的方式进行，降低了读写延迟，提高了 MQ 的性能和吞吐量。</p><p>所以，为了保证 <code>Broker</code> 端不丢消息，可以设置为<strong>同步刷盘</strong>：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code>## 默认情况为 <span class="token class-name">ASYNC_FLUSH</span> 
flushDiskType <span class="token operator">=</span> <span class="token constant">SYNC_FLUSH</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>当<code>Broker</code>服务器未在同步刷盘时间内（<strong>默认为5s</strong>）完成刷盘，则将返回该状态——刷盘超时。</p><p><strong>集群部署</strong>：</p><p>为了保证可用性，<code>Broker </code>通常采用一主（<strong>master</strong>）多从（<strong>slave</strong>）部署方式。为了保证消息不丢失，消息还需要复制到 <strong>slave</strong> 节点。</p><p>默认方式下，消息写入 <strong>master</strong> 成功，就可以返回确认响应给生产者，接着消息将会异步复制到 <strong>slave</strong> 节点。</p><blockquote><p>flushDiskType 默认值是ASYNC_FLUSH（异步刷盘）</p></blockquote><p>若 master 突然<strong>宕机且不可恢复</strong>，那么还未复制到 <strong>slave</strong> 的消息将会丢失。</p><p>所以为了提高消息的可靠性，采用<strong>同步刷盘</strong>方式，<strong>master</strong> 节点将会同步等待 <strong>slave</strong> 节点复制完成，才会返回确认响应。</p><p><strong>小结</strong>：</p><p>结合生产阶段与存储阶段，若需要<strong>严格保证消息不丢失</strong>，broker 需要采用如下配置：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token comment">## master 节点配置</span>
<span class="token comment"># 同步刷盘</span>
flushDiskType <span class="token operator">=</span> SYNC_FLUSH
<span class="token comment"># 同步master服务器</span>
brokerRole <span class="token operator">=</span> SYNC_MASTER

<span class="token comment">## slave 节点配置</span>
brokerRole <span class="token operator">=</span> slave
<span class="token comment"># 同步刷盘</span>
flushDiskType <span class="token operator">=</span> SYNC_FLUSH
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="消费阶段" tabindex="-1"><a class="header-anchor" href="#消费阶段" aria-hidden="true">#</a> 消费阶段</h3><p>消费者从 broker 拉取消息，然后执行相应的业务逻辑。一旦执行成功，将会返回 <code>ConsumeConcurrentlyStatus.CONSUME_SUCCESS</code> 状态给 Broker。</p><p>如果 Broker 未收到消费确认响应或收到其他状态，消费者下次还会再次拉取到该条消息，进行重试。这样的方式有效避免了消费者消费过程发生异常，或者消息在网络传输中丢失的情况。<strong>但业务方需要考虑是否保证消息幂等</strong>。具体方案见上文。</p><h3 id="参考-1" tabindex="-1"><a class="header-anchor" href="#参考-1" aria-hidden="true">#</a> 参考</h3><ul><li>https://github.com/apache/rocketmq/blob/master/docs/cn/best_practice.md</li></ul><h2 id="如何处理消息积压" tabindex="-1"><a class="header-anchor" href="#如何处理消息积压" aria-hidden="true">#</a> 如何处理消息积压？</h2><h3 id="产生原因" tabindex="-1"><a class="header-anchor" href="#产生原因" aria-hidden="true">#</a> 产生原因</h3><h4 id="消费耗时" tabindex="-1"><a class="header-anchor" href="#消费耗时" aria-hidden="true">#</a> 消费耗时</h4><p>代码中如果没有复杂的递归和循环的话，内部计算耗时相对外部 I/O 操作来说几乎可以忽略。外部 I/O 操作通常包括如下业务逻辑：</p><ul><li>读写外部数据库，例如 MySQL 数据库读写。</li><li>读写外部缓存等系统，例如 Redis 读写。</li><li>下游系统调用，例如 Dubbo 调用或者下游 HTTP 接口调用。</li></ul><h4 id="消费逻辑异常" tabindex="-1"><a class="header-anchor" href="#消费逻辑异常" aria-hidden="true">#</a> 消费逻辑异常</h4><p>消费者业务异常或者宕机，导致生产者不停投递消息到 Broker，消息被积压在 Broker 没有被消费</p><h3 id="如何避免消息堆积" tabindex="-1"><a class="header-anchor" href="#如何避免消息堆积" aria-hidden="true">#</a> 如何避免消息堆积？</h3><ul><li><p>梳理消息的消费耗时</p><p>主要关注一下信息：</p><ul><li>消息消费逻辑的计算复杂度是否过高，代码是否存在无限循环和递归等缺陷。</li><li>消息消费逻辑中的 I/O 操作（如：外部调用、读写存储等）是否是必须的，能否用本地缓存等方案规避。</li><li>消费逻辑中的复杂耗时的操作是否可以做异步化处理，如果可以是否会造成逻辑错乱（消费完成但异步操作未完成）。</li></ul></li><li><p>设置消息的消费并发度</p><ul><li>逐步调大线程的单个节点的线程数，并观测节点的系统指标，得到单个节点最优的消费线程数和消息吞吐量。</li><li>得到单个节点的最优线程数和消息吞吐量后，根据上下游链路的流量峰值计算出需要设置的节点数，节点数=流量峰值/单线程消息吞吐量。</li></ul></li></ul><h3 id="如何处理消息堆积" tabindex="-1"><a class="header-anchor" href="#如何处理消息堆积" aria-hidden="true">#</a> 如何处理消息堆积？</h3><p>消费逻辑无问题并且消费耗时正常情况下，可以考虑下面方案：</p><ul><li><p><strong>消费者扩容</strong></p><p>Topic 中 MessageQueue 的数量大于 Comsumer 实例数量时，可以增加 Consumer 实例数量。MessageQueue 会进行 Rebalance重新分配给 Consumer 实例。但要考虑 DB 读写压力。</p></li><li><p><strong>消息迁移到新 Topic，然后扩容 MessageQueue</strong></p><p>Topic 的 MessageQueue 的数量小于或者等于消费者数量，这种情况，再扩容消费者就没什么用，就得考虑扩容 MessageQueue。可以新建一个临时的 Topic，临时的Topic多设置一些 MessageQueue，然后先用一些消费者把消费的数据丢到临时的Topic，因为不用业务处理，只是转发一下消息，速度很快。接下来用扩容的消费者去消费新的 Topic 里的数据，消费完了之后，恢复原状。</p></li><li><p><strong>根据具体业务能否限制消息发送速率</strong></p><p>结合具体业务，使用令牌桶等限流算法限制消息发送速率。</p></li></ul><h3 id="参考-2" tabindex="-1"><a class="header-anchor" href="#参考-2" aria-hidden="true">#</a> 参考：</h3><ul><li>https://help.aliyun.com/zh/apsaramq-for-rocketmq/cloud-message-queue-rocketmq-4-x-series/use-cases/how-do-i-handle-accumulated-messages</li></ul><h2 id="如何实现顺序消息" tabindex="-1"><a class="header-anchor" href="#如何实现顺序消息" aria-hidden="true">#</a> 如何实现顺序消息？</h2><h3 id="局部顺序" tabindex="-1"><a class="header-anchor" href="#局部顺序" aria-hidden="true">#</a> 局部顺序</h3><ul><li>一个 Topic 下相同标识消息放入同一个分区队列</li><li>Consumer 同一队列只能有一个线程消费</li></ul><h3 id="全局顺序" tabindex="-1"><a class="header-anchor" href="#全局顺序" aria-hidden="true">#</a> 全局顺序</h3><ul><li>一个 Topic 下只能有一个队列</li><li>Consumer 只能有一个线程消费</li></ul><p><strong>综上所述</strong>：保证一组消息发送到同一分区队列，Consumer 保证同一队列只有一个线程消费。</p><p><strong>代码示例（来自官方）</strong>：</p><p>生产者使用 <code>MessageQueueSelector </code> 类来控制 把消息发往哪个 <code>Message Queue</code> 。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
    <span class="token class-name">DefaultMQProducer</span> producer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultMQProducer</span><span class="token punctuation">(</span><span class="token string">&quot;order_producer_group&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    producer<span class="token punctuation">.</span><span class="token function">setNamesrvAddr</span><span class="token punctuation">(</span><span class="token string">&quot;106.15.42.148:9876&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    producer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> tags <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token string">&quot;TagA&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;TagB&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;TagC&quot;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>

    <span class="token comment">// 订单列表</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">OrderStep</span><span class="token punctuation">&gt;</span></span> orderList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Producer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">buildOrders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">Date</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">SimpleDateFormat</span> sdf <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">String</span> dateStr <span class="token operator">=</span> sdf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 添加时间前缀</span>
        <span class="token class-name">String</span> body <span class="token operator">=</span> dateStr <span class="token operator">+</span> <span class="token string">&quot; Hello RocketMQ &quot;</span> <span class="token operator">+</span> orderList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Message</span> msg <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token string">&quot;TopicTestInorder&quot;</span><span class="token punctuation">,</span> tags<span class="token punctuation">[</span>i <span class="token operator">%</span> tags<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&quot;KEY&quot;</span> <span class="token operator">+</span> i<span class="token punctuation">,</span> body<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span><span class="token constant">UTF_8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">SendResult</span> sendResult <span class="token operator">=</span> producer<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">MessageQueueSelector</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token class-name">MessageQueue</span> <span class="token function">select</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageQueue</span><span class="token punctuation">&gt;</span></span> mqs<span class="token punctuation">,</span> <span class="token class-name">Message</span> msg<span class="token punctuation">,</span> <span class="token class-name">Object</span> arg<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// 根据订单id选择发送的queue</span>
                <span class="token class-name">Long</span> id <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Long</span><span class="token punctuation">)</span> arg<span class="token punctuation">;</span>
                <span class="token keyword">long</span> index <span class="token operator">=</span> id <span class="token operator">%</span> mqs<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">return</span> mqs<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span> orderList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getOrderId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">&quot;SendResult status:%s, queueId:%d, body:%s%n&quot;</span><span class="token punctuation">,</span>
                          sendResult<span class="token punctuation">.</span><span class="token function">getSendStatus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                          sendResult<span class="token punctuation">.</span><span class="token function">getMessageQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getQueueId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                          body<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    producer<span class="token punctuation">.</span><span class="token function">shutdown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>消费端通过使用 <code>MessageListenerOrderly </code>来解决单 <code>MessageQueue</code> 的消息被并发处理的问题。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> consumer<span class="token punctuation">.</span><span class="token function">registerMessageListener</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MessageListenerOrderly</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">final</span> <span class="token class-name">Random</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            
            <span class="token annotation punctuation">@Override</span>
            <span class="token keyword">public</span> <span class="token class-name">ConsumeOrderlyStatus</span> <span class="token function">consumeMessage</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MessageExt</span><span class="token punctuation">&gt;</span></span> msgs<span class="token punctuation">,</span> <span class="token class-name">ConsumeOrderlyContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                context<span class="token punctuation">.</span><span class="token function">setAutoCommit</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">MessageExt</span> msg <span class="token operator">:</span> msgs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 可以看到每个queue有唯一的consume线程来消费, 订单对每个queue(分区)有序</span>
                    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;consumeThread=&quot;</span> <span class="token operator">+</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;queueId=&quot;</span> <span class="token operator">+</span> msg<span class="token punctuation">.</span><span class="token function">getQueueId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;, content:&quot;</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>msg<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                
                <span class="token keyword">try</span> <span class="token punctuation">{</span>
                    <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span><span class="token constant">SECONDS</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">return</span> <span class="token class-name">ConsumeOrderlyStatus</span><span class="token punctuation">.</span><span class="token constant">SUCCESS</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="如何实现消息过滤" tabindex="-1"><a class="header-anchor" href="#如何实现消息过滤" aria-hidden="true">#</a> 如何实现消息过滤？</h2><p>消息过滤主要通过以下几个关键流程实现：</p><ul><li>生产者：生产者在初始化消息时预先为消息设置一些属性和标签，用于后续消费时指定过滤目标。</li><li>消费者：消费者在初始化及后续消费流程中通过调用订阅关系注册接口，向服务端上报需要订阅指定主题的哪些消息，即过滤条件。</li><li>服务端：消费者获取消息时会触发服务端的动态过滤计算，Apache RocketMQ 服务端根据消费者上报的过滤条件的表达式进行匹配，并将符合条件的消息投递给消费者。</li></ul><p><strong>消息过滤分类</strong></p><p>RocketMQ 支持 Tag 标签过滤和 SQL 属性过滤，这两种过滤方式对比如下：</p><table><thead><tr><th>对比项</th><th>Tag标签过滤</th><th>SQL属性过滤</th></tr></thead><tbody><tr><td>过滤目标</td><td>消息的 Tag 标签。</td><td>消息的属性，包括用户自定义属性以及系统属性（ Tag 是一种系统属性）。</td></tr><tr><td>过滤能力</td><td>精准匹配。</td><td>SQL 语法匹配。</td></tr><tr><td>适用场景</td><td>简单过滤场景、计算逻辑简单轻量。</td><td>复杂过滤场景、计算逻辑较复杂。</td></tr></tbody></table><h3 id="tag-标签过滤" tabindex="-1"><a class="header-anchor" href="#tag-标签过滤" aria-hidden="true">#</a> Tag 标签过滤</h3><p>生产者在发送消息时，设置消息的 Tag 标签，消费者需指定已有的 Tag 标签来进行匹配订阅。</p><p><strong>Tag 标签设置</strong></p><ul><li>Tag 由生产者发送消息时设置，每条消息允许设置一个 Tag 标签。</li><li>Tag 使用可见字符，建议长度不超过128字符。</li></ul><p><strong>Tag标签过滤规则</strong></p><p>Tag 标签过滤为精准字符串匹配，过滤规则设置格式如下：</p><ul><li>单 Tag 匹配：过滤表达式为目标 Tag 。表示只有消息标签为指定目标 Tag 的消息符合匹配条件，会被发送给消费者。</li><li>多 Tag 匹配：多个 Tag 之间为或的关系。不同 Tag 间使用两个竖线（||）隔开。例如，Tag1||Tag2||Tag3，表示标签为 Tag1 或 Tag2 或 Tag3 的消息都满足匹配条件，都会被发送给消费者进行消费。</li><li>全部匹配：使用星号（*）作为全匹配表达式。表示 Topic 下的所有消息都将被发送给消费者进行消费。</li></ul><h3 id="sql-属性过滤" tabindex="-1"><a class="header-anchor" href="#sql-属性过滤" aria-hidden="true">#</a> SQL 属性过滤</h3><p>生产者为消息设置的属性（Key）及属性值（Value）进行匹配。生产者在发送消息时可设置多个属性，消费者订阅时可设置SQL语法的过滤表达式过滤多个属性。</p><blockquote><p>📌 Tag 是一种系统属性，所以 SQL 过滤方式也兼容 Tag 标签过滤。在 SQL 语法中，Tag 的属性名称为 TAGS。</p></blockquote><p><strong>消息属性设置</strong></p><p>生产者发送消息时可以自定义消息属性，每个属性都是一个自定义的键值对（Key-Value）。</p><p>每条消息支持设置多个属性。</p><p><strong>SQL属性过滤规则</strong></p><p>SQL 属性过滤使用 SQL92 语法作为过滤规则表达式，语法规范如下：</p><table><thead><tr><th>语法</th><th>说明</th><th>示例</th></tr></thead><tbody><tr><td>IS NULL</td><td>判断属性不存在。</td><td><code>a IS NULL</code> ：属性a不存在。</td></tr><tr><td>IS NOT NULL</td><td>判断属性存在。</td><td><code>a IS NOT NULL</code>：属性a存在。</td></tr><tr><td><em>&gt;</em> &gt;= <em>&lt;</em> &lt;=</td><td>用于比较数字，不能用于比较字符串，否则消费者客户端启动时会报错。 <strong>说明</strong> 可转化为数字的字符串也被认为是数字。</td><td><em><code>a IS NOT NULL AND a &gt; 100</code>：属性a存在且属性a的值大于100。</em> <code>a IS NOT NULL AND a &gt; &#39;abc&#39;</code>：错误示例，abc为字符串，不能用于比较大小。</td></tr><tr><td>BETWEEN xxx AND xxx</td><td>用于比较数字，不能用于比较字符串，否则消费者客户端启动时会报错。等价于&gt;= xxx AND &lt;= xxx。表示属性值在两个数字之间。</td><td><code>a IS NOT NULL AND (a BETWEEN 10 AND 100)</code>：属性a存在且属性a的值大于等于10且小于等于100。</td></tr><tr><td>NOT BETWEEN xxx AND xxx</td><td>用于比较数字，不能用于比较字符串，否则消费者客户端启动会报错。等价于&lt; xxx OR &gt; xxx，表示属性值在两个值的区间之外。</td><td><code>a IS NOT NULL AND (a NOT BETWEEN 10 AND 100)</code>：属性a存在且属性a的值小于10或大于100。</td></tr><tr><td>IN (xxx, xxx)</td><td>表示属性的值在某个集合内。集合的元素只能是字符串。</td><td><code>a IS NOT NULL AND (a IN (&#39;abc&#39;, &#39;def&#39;))</code>：属性a存在且属性a的值为abc或def。</td></tr><tr><td><em>=</em> &lt;&gt;</td><td>等于和不等于。可用于比较数字和字符串。</td><td><code>a IS NOT NULL AND (a = &#39;abc&#39; OR a&lt;&gt;&#39;def&#39;)</code>：属性a存在且属性a的值为abc或a的值不为def。</td></tr><tr><td><em>AND</em> OR</td><td>逻辑与、逻辑或。可用于组合任意简单的逻辑判断，需要将每个逻辑判断内容放入括号内。</td><td><code>a IS NOT NULL AND (a &gt; 100) OR (b IS NULL)</code>：属性a存在且属性a的值大于100或属性b不存在。</td></tr></tbody></table><p>由于 SQL 属性过滤是生产者定义消息属性，消费者设置 SQL 过滤条件，因此过滤条件的计算结果具有不确定性，服务端的处理方式如下：</p><ul><li>异常情况处理：如果过滤条件的表达式计算抛异常，消息默认被过滤，不会被投递给消费者。例如比较数字和非数字类型的值。</li><li>空值情况处理：如果过滤条件的表达式计算值为 null 或不是布尔类型（true和false），则消息默认被过滤，不会被投递给消费者。例如发送消息时未定义某个属性，在订阅时过滤条件中直接使用该属性，则过滤条件的表达式计算结果为 null。</li><li>数值类型不符处理：如果消息自定义属性为浮点型，但过滤条件中使用整数进行判断，则消息默认被过滤，不会被投递给消费者。</li></ul><p><strong>使用示例</strong></p><p>发送消息，同时设置消息Tag标签和自定义属性：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Message</span> message <span class="token operator">=</span> messageBuilder<span class="token punctuation">.</span><span class="token function">setTopic</span><span class="token punctuation">(</span><span class="token string">&quot;topic&quot;</span><span class="token punctuation">)</span>
<span class="token comment">//设置消息索引键，可根据关键字精确查找某条消息。</span>
<span class="token punctuation">.</span><span class="token function">setKeys</span><span class="token punctuation">(</span><span class="token string">&quot;messageKey&quot;</span><span class="token punctuation">)</span>
<span class="token comment">//设置消息Tag，用于消费端根据指定Tag过滤消息。</span>
<span class="token comment">//该示例表示消息的Tag设置为&quot;messageTag&quot;。</span>
<span class="token punctuation">.</span><span class="token function">setTag</span><span class="token punctuation">(</span><span class="token string">&quot;messageTag&quot;</span><span class="token punctuation">)</span>
<span class="token comment">//消息也可以设置自定义的分类属性，例如环境标签、地域、逻辑分支。</span>
<span class="token comment">//该示例表示为消息自定义一个属性，该属性为地域，属性值为杭州。</span>
<span class="token punctuation">.</span><span class="token function">addProperty</span><span class="token punctuation">(</span><span class="token string">&quot;Region&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;Hangzhou&quot;</span><span class="token punctuation">)</span>
<span class="token comment">//消息体。</span>
<span class="token punctuation">.</span><span class="token function">setBody</span><span class="token punctuation">(</span><span class="token string">&quot;messageBody&quot;</span><span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>订阅消息，同时根据多个自定义属性匹配消息:</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">String</span> topic <span class="token operator">=</span> <span class="token string">&quot;topic&quot;</span><span class="token punctuation">;</span>
<span class="token comment">//只订阅地域属性为杭州且价格属性大于30的消息。</span>
<span class="token class-name">FilterExpression</span> filterExpression <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FilterExpression</span><span class="token punctuation">(</span><span class="token string">&quot;Region IS NOT NULL AND price IS NOT NULL AND Region = &#39;Hangzhou&#39; AND price &gt; 30&quot;</span><span class="token punctuation">,</span> <span class="token class-name">FilterExpressionType</span><span class="token punctuation">.</span><span class="token constant">SQL92</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
simpleConsumer<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span>topic<span class="token punctuation">,</span> filterExpression<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="参考-3" tabindex="-1"><a class="header-anchor" href="#参考-3" aria-hidden="true">#</a> 参考</h3><ul><li>https://rocketmq.apache.org/zh/docs/featureBehavior/07messagefilter/</li></ul>`,125),c=[o];function l(i,u){return s(),a("div",null,c)}const d=n(p,[["render",l],["__file","RocketMQmianshiti.html.vue"]]);export{d as default};
