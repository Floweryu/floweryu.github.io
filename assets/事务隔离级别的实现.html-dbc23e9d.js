import{_ as t}from"./plugin-vue_export-helper-c27b6911.js";import{r as a,o as n,c as d,b as e,d as o,e as r,a as s}from"./app-9eed816a.js";const g="/assets/image-20231213190553268-19e619f0.png",c="/assets/image-20231213192528639-4e567f53.png",l="/assets/image-20231213192817632-8e731903.png",h="/assets/image-20230316230315194-3be6c259.png",p="/assets/image-20231213204235711-b935e66e.png",_={},m=s('<h2 id="事务及四大特性" tabindex="-1"><a class="header-anchor" href="#事务及四大特性" aria-hidden="true">#</a> 事务及四大特性</h2><ul><li><p>原子性（Atomicity）：指事务包含的所有操作要么全部成功，要么全部失败回滚。</p></li><li><p>一致性（Consistency）：事务必须使数据库<strong>从一个一致性状态变换到另一个一致性状态</strong>，也就是说一个事务执行之前和执行之后都必须处于一致性状态。</p></li><li><p>隔离性（Isolation）：当多个用户并发访问数据库时，比如操作同一张表时，<strong>数据库为每一个用户开启的事务，不能被其他事务的操作所干扰，多个并发事务之间要相互隔离</strong>。</p></li><li><p>持久性（Durability）：一个事务一旦被提交了，那么对数据库中的数据的改变就是永久性的，即便是在数据库系统遇到故障的情况下也不会丢失提交事务的操作。</p></li></ul><p>事务的ACID是通过「InnoDB 日志和锁来保证」：</p><ul><li><strong>隔离性</strong>通过「数据库锁的机制」或「MVCC」实现的。</li><li><strong>持久性</strong>通过「redo log（重做日志）」实现。</li><li><strong>原子性</strong>通过「undo log（日志回滚）」实现。</li><li><strong>一致性</strong>通过「持久性」+「原子性」+「隔离性」实现。</li></ul><p>「 undo Log 」的原理很简单，为了满足事务的原子性，在操作任何数据之前，<strong>首先将数据备份到一个地方</strong>（这个存储数据备份的地方称为<code>Undo Log</code>）。然后进行数据的修改。如果出现了错误或者用户执行了<code>roll back</code>语句，系统可以利用<code>Undo Log</code>中的备份将数据恢复到事务开始之前的状态。</p><p>和<code>undo Log</code>相反，「 redo Log 」记录的是新数据的备份。在事务提交前，只要将<code>redo Log</code>持久化即可，不需要将数据持久化。当系统崩溃时，虽然数据没有持久化，但是<code>redo Log</code>已经持久化。系统可以根据<code>redo Log</code>的内容，将所有数据恢复到最新的状态。</p><h2 id="事务的隔离性及隔离级别" tabindex="-1"><a class="header-anchor" href="#事务的隔离性及隔离级别" aria-hidden="true">#</a> 事务的隔离性及隔离级别</h2><p><strong>事务的隔离性</strong>：当多个线程都开启事务操作数据库中的数据时，数据库系统要能进行隔离操作，以保证各个线程获取数据的准确性。</p><p>不考虑<strong>隔离性</strong>会发生的问题：</p><h3 id="脏读" tabindex="-1"><a class="header-anchor" href="#脏读" aria-hidden="true">#</a> 脏读</h3><p>事务 A 修改一条数据，但还未提交事务；此时事务 B 查询该条数据。但假如事务 A 未提交事务，进行了回滚，则事务 B 读取到的数据就是脏数据。</p><figure><img src="'+g+'" alt="image-20231213190553268" tabindex="0" loading="lazy"><figcaption>image-20231213190553268</figcaption></figure><h3 id="不可重复读" tabindex="-1"><a class="header-anchor" href="#不可重复读" aria-hidden="true">#</a> 不可重复读</h3><p><strong>在一个事务内多次读取同一个数据，出现前后两次读到的数据不一样的情况</strong>。</p><figure><img src="'+c+'" alt="image-20231213192528639" tabindex="0" loading="lazy"><figcaption>image-20231213192528639</figcaption></figure><h3 id="幻读" tabindex="-1"><a class="header-anchor" href="#幻读" aria-hidden="true">#</a> 幻读</h3><p><strong>在一个事务内多次查询某个符合查询条件的「记录数量」，如果出现前后两次查询到的记录数量不一样的情况，就意味着发生了「幻读」现象。</strong></p><figure><img src="'+l+'" alt="image-20231213192817632" tabindex="0" loading="lazy"><figcaption>image-20231213192817632</figcaption></figure><h2 id="事务隔离级别" tabindex="-1"><a class="header-anchor" href="#事务隔离级别" aria-hidden="true">#</a> 事务隔离级别</h2><ul><li><code>Read uncomitted (读未提交)</code>：最低级别，以上问题均无法解决。<strong>事务中的修改即使没有提交，对其它事务也都是可见的。</strong></li><li><code>Read committed (读已提交)</code>：读已提交，可避免脏读情况发生。**一个事务从开始直到提交之前，所做的任何修改对其它事务都是不可见的。**也可以叫做不可重复读，因为两次执行同样的查询，可能会得到不一样的结果。</li><li><code>Repeatable Read（可重复读）</code>：保证了在同一个事务中多次读取同样记录的结果是一致的。可以避免脏读和不可重复读，仍会出现幻读问题。可重复读是MySQL默认的事务隔离级别。</li><li><code>Serializable （串行化）</code>：最严格的事务隔离级别，要求所有事务被串行执行，不能并发执行，可避免脏读、不可重复读、幻读情况的发生。</li></ul><figure><img src="'+h+'" alt="image-20230316230315194" tabindex="0" loading="lazy"><figcaption>image-20230316230315194</figcaption></figure><h2 id="read-view-「mvcc」工作机制" tabindex="-1"><a class="header-anchor" href="#read-view-「mvcc」工作机制" aria-hidden="true">#</a> Read View 「MVCC」工作机制</h2><blockquote><p>对于「读提交」和「可重复读」隔离级别的事务来说，它们是通过 Read View 来实现的，它们的区别在于创建 Read View 的时机不同。「读提交」隔离级别是在「每个语句执行前」都会重新生成一个 Read View，而「可重复读」隔离级别是「启动事务时」生成一个 Read View，然后整个事务期间都在用这个 Read View。</p></blockquote><h3 id="read-view-四个重要的字段" tabindex="-1"><a class="header-anchor" href="#read-view-四个重要的字段" aria-hidden="true">#</a> Read View 四个重要的字段：</h3><ul><li><strong>m_ids</strong>：在创建 Read View 时，当前数据库中「活跃事务」的<strong>事务 id 列表</strong>，注意是一个列表。「活跃事务」是指：启动了但还没提交的事务。</li><li><strong>min_trx_id</strong>：在创建 Read View 时，当前数据库中「活跃事务」中事务 <strong>id 最小的事务</strong>，也就是 m_ids 的最小值。</li><li><strong>max_trx_id</strong>：这个并不是 m_ids 的最大值，而是<strong>创建 Read View 时当前数据库中应该给下一个事务的 id 值</strong>，也就是全局事务中最大的事务 id 值 + 1。</li><li><strong>creator_trx_id</strong>：创建该 Read View 的事务的事务 id。</li></ul><p>在创建 Read View 后，我们可以将记录中的 trx_id 划分这三种情况：</p><figure><img src="'+p+'" alt="image-20231213204235711" tabindex="0" loading="lazy"><figcaption>image-20231213204235711</figcaption></figure><h3 id="聚簇索引记录中的两个隐藏列" tabindex="-1"><a class="header-anchor" href="#聚簇索引记录中的两个隐藏列" aria-hidden="true">#</a> 聚簇索引记录中的两个隐藏列</h3><p>对于使用 InnoDB 存储引擎的数据库表，它的聚簇索引记录中都包含下面两个隐藏列：</p><ul><li><strong>trx_id</strong>：当一个事务对某条聚簇索引记录进行改动时，就会<strong>把该事务的事务 id 记录在 trx_id 隐藏列里</strong>。</li><li><strong>roll_pointer</strong>：每次对某条聚簇索引记录进行改动时，都会把旧版本的记录写入到 undo 日志中，然后<strong>这个隐藏列是个指针，指向每一个旧版本记录</strong>，于是就可以通过它找到修改前的记录。</li></ul><p>一个事务去访问记录的时候，会进行下面操作：</p><ul><li>如果记录的 <code>trx_id </code>值小于 Read View 中的 <code>min_trx_id</code> 值，表示这个版本的记录是在创建 Read View <strong>前</strong>已经提交的事务生成的，所以该版本的记录对当前事务<strong>可见</strong>。</li><li>如果记录的 <code>trx_id </code>值大于等于 Read View 中的 <code>max_trx_id</code> 值，表示这个版本的记录是在创建 Read View <strong>后</strong>才启动的事务生成的，所以该版本的记录对当前事务<strong>不可见</strong>。</li><li>如果记录的 <code>trx_id </code>值在 Read View 的 <code>min_trx_id</code> 和 <code>max_trx_id</code> 之间，需要判断 <code>trx_id </code>是否在 <code>m_ids </code>列表中： <ul><li>如果记录的 <code>trx_id </code><strong>在</strong> <code>m_ids</code> 列表中，表示生成该版本记录的活跃事务依然活跃着（还没提交事务），所以该版本的记录对当前事务<strong>不可见</strong>。</li><li>如果记录的 <code>trx_id </code><strong>不在</strong> <code>m_ids</code>列表中，表示生成该版本记录的活跃事务已经被提交，所以该版本的记录对当前事务<strong>可见</strong>。</li></ul></li></ul><p><strong>这种通过「版本链」来控制并发事务访问同一个记录时的行为就叫 MVCC（多版本并发控制）。</strong></p><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章" aria-hidden="true">#</a> 参考文章：</h2>',34),u={href:"https://blog.csdn.net/fuzhongmin05/article/details/91126936",target:"_blank",rel:"noopener noreferrer"},f={href:"https://www.cnblogs.com/dingpeng9055/p/11190203.html",target:"_blank",rel:"noopener noreferrer"};function x(b,w){const i=a("ExternalLinkIcon");return n(),d("div",null,[m,e("ul",null,[e("li",null,[e("a",u,[o("https://blog.csdn.net/fuzhongmin05/article/details/91126936"),r(i)])]),e("li",null,[e("a",f,[o("https://www.cnblogs.com/dingpeng9055/p/11190203.html"),r(i)])])])])}const L=t(_,[["render",x],["__file","事务隔离级别的实现.html.vue"]]);export{L as default};
