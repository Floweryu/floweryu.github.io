const e=JSON.parse('{"key":"v-0d12b8e6","path":"/java/jvm/JVM%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8.html","title":"JVM垃圾回收器","lang":"zh-CN","frontmatter":{"title":"JVM垃圾回收器","category":["Java"],"tag":["后端","JVM"],"date":"2023-10-23T13:00:00.000Z","description":"串行收集器 串行收集器采用单线程 stop-the-world 的方式进行收集。当内存不足时，串行 GC 设置停顿标识，待所有线程都进入安全点（Safepoint）时，应用线程暂停，串行 GC 开始工作，采用单线程方式回收空间并整理内存。 特点： 单线程意味着复杂度更低、占用内存更少，垃圾回收效率高；但同时也意味着不能有效利用多核优势。; 特别适合堆内...","head":[["meta",{"property":"og:url","content":"https://floweryu.top/java/jvm/JVM%E5%9E%83%E5%9C%BE%E5%9B%9E%E6%94%B6%E5%99%A8.html"}],["meta",{"property":"og:site_name","content":"Floweryu"}],["meta",{"property":"og:title","content":"JVM垃圾回收器"}],["meta",{"property":"og:description","content":"串行收集器 串行收集器采用单线程 stop-the-world 的方式进行收集。当内存不足时，串行 GC 设置停顿标识，待所有线程都进入安全点（Safepoint）时，应用线程暂停，串行 GC 开始工作，采用单线程方式回收空间并整理内存。 特点： 单线程意味着复杂度更低、占用内存更少，垃圾回收效率高；但同时也意味着不能有效利用多核优势。; 特别适合堆内..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2023-11-18T12:50:13.000Z"}],["meta",{"property":"article:author","content":"Floweryu"}],["meta",{"property":"article:tag","content":"后端"}],["meta",{"property":"article:tag","content":"JVM"}],["meta",{"property":"article:published_time","content":"2023-10-23T13:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-11-18T12:50:13.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"JVM垃圾回收器\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-10-23T13:00:00.000Z\\",\\"dateModified\\":\\"2023-11-18T12:50:13.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Floweryu\\",\\"url\\":\\"https://github.com/Floweryu/floweryu.github.io\\",\\"email\\":\\"869830837@qq.com\\"}]}"]]},"headers":[{"level":2,"title":"串行收集器","slug":"串行收集器","link":"#串行收集器","children":[{"level":3,"title":"Serial + Serial Old 收集器","slug":"serial-serial-old-收集器","link":"#serial-serial-old-收集器","children":[]}]},{"level":2,"title":"并行收集器","slug":"并行收集器","link":"#并行收集器","children":[{"level":3,"title":"Parallel Scavenge + Parallel Old收集器","slug":"parallel-scavenge-parallel-old收集器","link":"#parallel-scavenge-parallel-old收集器","children":[]}]},{"level":2,"title":"并发标记清除收集器","slug":"并发标记清除收集器","link":"#并发标记清除收集器","children":[{"level":3,"title":"CMS 收集器","slug":"cms-收集器","link":"#cms-收集器","children":[{"level":4,"title":"CMS收集器各个阶段","slug":"cms收集器各个阶段","link":"#cms收集器各个阶段","children":[{"level":5,"title":"阶段1：初始标记—STW","slug":"阶段1-初始标记—stw","link":"#阶段1-初始标记—stw","children":[]},{"level":5,"title":"阶段2：并发标记—并发","slug":"阶段2-并发标记—并发","link":"#阶段2-并发标记—并发","children":[]},{"level":5,"title":"阶段3：并发预清理—并发","slug":"阶段3-并发预清理—并发","link":"#阶段3-并发预清理—并发","children":[]},{"level":5,"title":"阶段4：可取消的并发预清理—并发","slug":"阶段4-可取消的并发预清理—并发","link":"#阶段4-可取消的并发预清理—并发","children":[]},{"level":5,"title":"阶段5：最终标记/重标记—STW","slug":"阶段5-最终标记-重标记—stw","link":"#阶段5-最终标记-重标记—stw","children":[]},{"level":5,"title":"阶段6：并发清除 Concurrent Sweep","slug":"阶段6-并发清除-concurrent-sweep","link":"#阶段6-并发清除-concurrent-sweep","children":[]},{"level":5,"title":"阶段7：并发重置 Concurrent Reset","slug":"阶段7-并发重置-concurrent-reset","link":"#阶段7-并发重置-concurrent-reset","children":[]}]},{"level":4,"title":"缺点：","slug":"缺点","link":"#缺点","children":[]}]},{"level":3,"title":"ParNew 收集器","slug":"parnew-收集器","link":"#parnew-收集器","children":[]},{"level":3,"title":"G1收集器","slug":"g1收集器","link":"#g1收集器","children":[{"level":4,"title":"分区Region","slug":"分区region","link":"#分区region","children":[]},{"level":4,"title":"卡片Card","slug":"卡片card","link":"#卡片card","children":[]},{"level":4,"title":"堆Heap","slug":"堆heap","link":"#堆heap","children":[]},{"level":4,"title":"分代模型","slug":"分代模型","link":"#分代模型","children":[{"level":5,"title":"分代垃圾回收","slug":"分代垃圾回收","link":"#分代垃圾回收","children":[]},{"level":5,"title":"本地分配缓冲","slug":"本地分配缓冲","link":"#本地分配缓冲","children":[]}]},{"level":4,"title":"分区模型","slug":"分区模型","link":"#分区模型","children":[{"level":5,"title":"巨型对象Humongous Region","slug":"巨型对象humongous-region","link":"#巨型对象humongous-region","children":[]},{"level":5,"title":"已记忆集合Remember Set (RSet)","slug":"已记忆集合remember-set-rset","link":"#已记忆集合remember-set-rset","children":[]},{"level":5,"title":"Per Region Table (PRT)","slug":"per-region-table-prt","link":"#per-region-table-prt","children":[]}]},{"level":4,"title":"收集集合 (CSet)","slug":"收集集合-cset","link":"#收集集合-cset","children":[{"level":5,"title":"年轻代收集集合 CSet of Young Collection","slug":"年轻代收集集合-cset-of-young-collection","link":"#年轻代收集集合-cset-of-young-collection","children":[]},{"level":5,"title":"混合收集集合 CSet of Mixed Collection","slug":"混合收集集合-cset-of-mixed-collection","link":"#混合收集集合-cset-of-mixed-collection","children":[]}]},{"level":4,"title":"并发标记算法（三色标记法）","slug":"并发标记算法-三色标记法","link":"#并发标记算法-三色标记法","children":[{"level":5,"title":"漏标问题","slug":"漏标问题","link":"#漏标问题","children":[]}]},{"level":4,"title":"G1垃圾回收机制","slug":"g1垃圾回收机制","link":"#g1垃圾回收机制","children":[{"level":5,"title":"RSet的维护","slug":"rset的维护","link":"#rset的维护","children":[]},{"level":5,"title":"栅栏Barrier","slug":"栅栏barrier","link":"#栅栏barrier","children":[]},{"level":5,"title":"起始快照算法Snapshot at the beginning (SATB)","slug":"起始快照算法snapshot-at-the-beginning-satb","link":"#起始快照算法snapshot-at-the-beginning-satb","children":[]},{"level":5,"title":"并发优化线程Concurrence Refinement Threads","slug":"并发优化线程concurrence-refinement-threads","link":"#并发优化线程concurrence-refinement-threads","children":[]},{"level":5,"title":"并发标记周期 Concurrent Marking Cycle","slug":"并发标记周期-concurrent-marking-cycle","link":"#并发标记周期-concurrent-marking-cycle","children":[{"level":6,"title":"初始标记 Initial Mark——SWT","slug":"初始标记-initial-mark——swt","link":"#初始标记-initial-mark——swt","children":[]},{"level":6,"title":"根分区扫描 Root Region Scanning——并发","slug":"根分区扫描-root-region-scanning——并发","link":"#根分区扫描-root-region-scanning——并发","children":[]},{"level":6,"title":"并发标记 Concurrent Marking——并发","slug":"并发标记-concurrent-marking——并发","link":"#并发标记-concurrent-marking——并发","children":[]},{"level":6,"title":"存活数据计算 Live Data Accounting","slug":"存活数据计算-live-data-accounting","link":"#存活数据计算-live-data-accounting","children":[]},{"level":6,"title":"重新标记 Remark——STW","slug":"重新标记-remark——stw","link":"#重新标记-remark——stw","children":[]},{"level":6,"title":"清除 Cleanup——STW","slug":"清除-cleanup——stw","link":"#清除-cleanup——stw","children":[]}]},{"level":5,"title":"年轻代收集/混合收集周期","slug":"年轻代收集-混合收集周期","link":"#年轻代收集-混合收集周期","children":[{"level":6,"title":"GC工作线程数","slug":"gc工作线程数","link":"#gc工作线程数","children":[]},{"level":6,"title":"年轻代收集 Young Collection","slug":"年轻代收集-young-collection","link":"#年轻代收集-young-collection","children":[]}]},{"level":5,"title":"并发标记周期后的年轻代收集 Young Collection Following Concurrent Marking Cycle","slug":"并发标记周期后的年轻代收集-young-collection-following-concurrent-marking-cycle","link":"#并发标记周期后的年轻代收集-young-collection-following-concurrent-marking-cycle","children":[{"level":6,"title":"混合收集周期 Mixed Collection Cycle","slug":"混合收集周期-mixed-collection-cycle","link":"#混合收集周期-mixed-collection-cycle","children":[]},{"level":6,"title":"转移失败的担保机制 Full GC","slug":"转移失败的担保机制-full-gc","link":"#转移失败的担保机制-full-gc","children":[]}]}]}]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]},{"level":2,"title":"参考：","slug":"参考","link":"#参考","children":[]}],"git":{"createdTime":1700311813000,"updatedTime":1700311813000,"contributors":[{"name":"Floweryu","email":"im.zhangjunfeng@qq.com","commits":1}]},"readingTime":{"minutes":33.79,"words":10138},"filePathRelative":"java/jvm/JVM垃圾回收器.md","localizedDate":"2023年10月23日","autoDesc":true}');export{e as data};
