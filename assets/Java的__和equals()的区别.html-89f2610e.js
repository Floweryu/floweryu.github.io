import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{r as o,o as p,c,b as s,d as n,e as l,a}from"./app-56be3a2f.js";const u={},i=a(`<h4 id="的含义" tabindex="-1"><a class="header-anchor" href="#的含义" aria-hidden="true">#</a> <code>==</code>的含义</h4><ul><li>基本数据类型：<code>byte, short, int, long, float, double, char, boolean</code>。它们之间的比较用<code>==</code>，<strong>比较的是它们的值</strong>。</li><li>引用数据类型：比较的是它们<strong>在堆内存中的存放地址</strong>。</li></ul><h4 id="equals-含义" tabindex="-1"><a class="header-anchor" href="#equals-含义" aria-hidden="true">#</a> <code>equals()</code>含义</h4><p>它不能用于比较基本数据类型的变量。<code>equals()</code>方法存在于<code>Object()</code>类中，而<code>Object()</code>类是所有类的直接或间接父类。但又两种使用情况：</p><ul><li>情况1：类没有覆盖<code>equals()</code>方法。则通过<code>equals()</code>比较该类的两个对象，等价于通过<code>==</code>比较这两个对象，<strong>也就是比较两个对象的地址</strong>。</li><li>情况2：类覆盖了<code>equals()</code>方法。使用<code>equals()</code>方法来<strong>比较两个对象的内容是否相等</strong>。若内容相等，则返回true.(即认为这两个对象相等）。</li></ul><h4 id="示例" tabindex="-1"><a class="header-anchor" href="#示例" aria-hidden="true">#</a> 示例：</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token string">&quot;Hello&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// true</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,7),r=s("code",null,"true",-1),d=s("code",null,"s1",-1),k=s("strong",null,"字符串常量池",-1),m=s("code",null,"s2",-1),v=s("strong",null,"直接将s2的引用指向字符串常量池中的字符串",-1),_=s("code",null,"s1和s2指向的是同一个地址",-1),b=s("code",null,"true",-1),h={href:"https://blog.csdn.net/weixin_43207025/article/details/109576226",target:"_blank",rel:"noopener noreferrer"},g=a(`<div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">package</span> <span class="token namespace">equals<span class="token punctuation">.</span>src</span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">{</span>
        <span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">String</span> str3 <span class="token operator">=</span> str2<span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1 <span class="token operator">==</span> str2<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// false</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str2 <span class="token operator">==</span> str3<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// true</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1 <span class="token operator">==</span> str3<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// false</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// true</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str2<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>str3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// true</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>str3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// true</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这与上述不同的地方在于，<code>str2</code>使用<code>new</code>创建了一个字符串。这时，会申请一个新的内存地址。而不是去指向字符串常量池中。所以<code>str1和str2指向的地址就不同</code>。推理，<code>str1和str3也不同</code>。而后面的<code>equals</code>使用的是<code>String</code>类覆盖的的<code>equals</code>方法，只要内容一致就返回<code>true</code>。</p>`,2);function f(q,y){const t=o("ExternalLinkIcon");return p(),c("div",null,[i,s("p",null,[n("上述代码输出为"),r,n("。是不是很奇怪？这就涉及到Java的内存。"),d,n("实际上创建了一个字符串常量，存放在"),k,n("中。"),m,n("再创建时，会去寻找字符串常量池中有没有该内容的字符串。有的话则"),v,n("。所以这里"),_,n("，因此打印"),b,n("。 "),s("a",h,[n("详细可参考这篇文章"),l(t)]),n(".")]),g])}const x=e(u,[["render",f],["__file","Java的__和equals()的区别.html.vue"]]);export{x as default};
