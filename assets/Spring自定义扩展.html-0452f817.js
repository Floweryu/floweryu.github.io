import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{o as t,c as e,a as s,b as n}from"./app-e40c2916.js";const p={},o=s(`<h2 id="设置默认的属性编辑器-可扩展" tabindex="-1"><a class="header-anchor" href="#设置默认的属性编辑器-可扩展" aria-hidden="true">#</a> 设置默认的属性编辑器（可扩展）</h2><p>核心方法：<code>org.springframework.beans.support.ResourceEditorRegistrar#registerCustomEditors</code></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerCustomEditors</span><span class="token punctuation">(</span><span class="token class-name">PropertyEditorRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">ResourceEditor</span> baseEditor <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ResourceEditor</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>resourceLoader<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>propertyResolver<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">doRegisterEditor</span><span class="token punctuation">(</span>registry<span class="token punctuation">,</span> <span class="token class-name">Resource</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> baseEditor<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">doRegisterEditor</span><span class="token punctuation">(</span>registry<span class="token punctuation">,</span> <span class="token class-name">ContextResource</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> baseEditor<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">doRegisterEditor</span><span class="token punctuation">(</span>registry<span class="token punctuation">,</span> <span class="token class-name">WritableResource</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> baseEditor<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">doRegisterEditor</span><span class="token punctuation">(</span>registry<span class="token punctuation">,</span> <span class="token class-name">InputStream</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">InputStreamEditor</span><span class="token punctuation">(</span>baseEditor<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">doRegisterEditor</span><span class="token punctuation">(</span>registry<span class="token punctuation">,</span> <span class="token class-name">InputSource</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">InputSourceEditor</span><span class="token punctuation">(</span>baseEditor<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">doRegisterEditor</span><span class="token punctuation">(</span>registry<span class="token punctuation">,</span> <span class="token class-name">File</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">FileEditor</span><span class="token punctuation">(</span>baseEditor<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">doRegisterEditor</span><span class="token punctuation">(</span>registry<span class="token punctuation">,</span> <span class="token class-name">Path</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">PathEditor</span><span class="token punctuation">(</span>baseEditor<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">doRegisterEditor</span><span class="token punctuation">(</span>registry<span class="token punctuation">,</span> <span class="token class-name">Reader</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ReaderEditor</span><span class="token punctuation">(</span>baseEditor<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">doRegisterEditor</span><span class="token punctuation">(</span>registry<span class="token punctuation">,</span> <span class="token constant">URL</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">URLEditor</span><span class="token punctuation">(</span>baseEditor<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token class-name">ClassLoader</span> classLoader <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>resourceLoader<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">doRegisterEditor</span><span class="token punctuation">(</span>registry<span class="token punctuation">,</span> <span class="token constant">URI</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">URIEditor</span><span class="token punctuation">(</span>classLoader<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">doRegisterEditor</span><span class="token punctuation">(</span>registry<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ClassEditor</span><span class="token punctuation">(</span>classLoader<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">doRegisterEditor</span><span class="token punctuation">(</span>registry<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ClassArrayEditor</span><span class="token punctuation">(</span>classLoader<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>resourceLoader <span class="token keyword">instanceof</span> <span class="token class-name">ResourcePatternResolver</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">doRegisterEditor</span><span class="token punctuation">(</span>registry<span class="token punctuation">,</span> <span class="token class-name">Resource</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span>
                         <span class="token keyword">new</span> <span class="token class-name">ResourceArrayPropertyEditor</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ResourcePatternResolver</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>resourceLoader<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>propertyResolver<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>该方法在后面类填充属性的时候会调用。</p></blockquote><p>如何自定义上面属性编辑器？</p><ol><li>自定义一个实现<code>PropertyEditorSupport</code>接口的编辑器。可以参考其它编辑器发现都实现了该接口。</li><li>为了让spring能识别编辑器，需要自定义一个类实现<code>PropertyEditorRegistrar</code>接口，该类的作用是将属性编辑器注册到spring中。参考<code>ResourceEditorRegistrar</code>类。</li><li>为了让spring识别注册器，需要将注册器注册到spring中。调用<code>org.springframework.beans.factory.config.CustomEditorConfigurer#setPropertyEditorRegistrars</code>方法。</li></ol><h3 id="如何自定义" tabindex="-1"><a class="header-anchor" href="#如何自定义" aria-hidden="true">#</a> 如何自定义？</h3><h4 id="_1-首先创建两个包装类" tabindex="-1"><a class="header-anchor" href="#_1-首先创建两个包装类" aria-hidden="true">#</a> 1. 首先创建两个包装类：</h4><p>创建包装类和对应的属性配置文件</p><div class="language-properties line-numbers-mode" data-ext="properties"><pre class="language-properties"><code><span class="token key attr-name">customer.name</span><span class="token punctuation">=</span> <span class="token value attr-value">zzz</span>
<span class="token key attr-name">customer.address</span><span class="token punctuation">=</span> <span class="token value attr-value">湖北省_襄阳市_谷城县</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Customer</span> <span class="token punctuation">{</span>

	<span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${customer.name}&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>

	<span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${customer.address}&quot;</span><span class="token punctuation">)</span>
	<span class="token keyword">private</span> <span class="token class-name">Address</span> address<span class="token punctuation">;</span>

	<span class="token comment">//......</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Address</span> <span class="token punctuation">{</span>
	<span class="token keyword">private</span> <span class="token class-name">String</span> province<span class="token punctuation">;</span>
	<span class="token keyword">private</span> <span class="token class-name">String</span> city<span class="token punctuation">;</span>
	<span class="token keyword">private</span> <span class="token class-name">String</span> town<span class="token punctuation">;</span>

	<span class="token comment">// ......</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-自定义属性编辑器" tabindex="-1"><a class="header-anchor" href="#_2-自定义属性编辑器" aria-hidden="true">#</a> 2. 自定义属性编辑器</h4><p>实现<code>PropertyEditorSupport</code>接口的<code>setAsText</code>方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAddressPropertyEditor</span> <span class="token keyword">extends</span> <span class="token class-name">PropertyEditorSupport</span> <span class="token punctuation">{</span>

	<span class="token annotation punctuation">@Override</span>
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAsText</span><span class="token punctuation">(</span><span class="token class-name">String</span> text<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IllegalArgumentException</span> <span class="token punctuation">{</span>
		<span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> s <span class="token operator">=</span> text<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&quot;_&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token class-name">Address</span> as <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Address</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		as<span class="token punctuation">.</span><span class="token function">setProvince</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		as<span class="token punctuation">.</span><span class="token function">setCity</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		as<span class="token punctuation">.</span><span class="token function">setTown</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setValue</span><span class="token punctuation">(</span>as<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-向spring中注册属性编辑器" tabindex="-1"><a class="header-anchor" href="#_3-向spring中注册属性编辑器" aria-hidden="true">#</a> 3. 向spring中注册属性编辑器</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyAddressPropertyEditorRegistrar</span> <span class="token keyword">implements</span> <span class="token class-name">PropertyEditorRegistrar</span> <span class="token punctuation">{</span>
	<span class="token annotation punctuation">@Override</span>
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">registerCustomEditors</span><span class="token punctuation">(</span><span class="token class-name">PropertyEditorRegistry</span> registry<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		registry<span class="token punctuation">.</span><span class="token function">registerCustomEditor</span><span class="token punctuation">(</span><span class="token class-name">Address</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">MyAddressPropertyEditor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-让spring识别注册器" tabindex="-1"><a class="header-anchor" href="#_4-让spring识别注册器" aria-hidden="true">#</a> 4.让spring识别注册器</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@PropertySource</span><span class="token punctuation">(</span><span class="token string">&quot;classpath:application.properties&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EditorConfig</span> <span class="token punctuation">{</span>

	<span class="token annotation punctuation">@Bean</span>
	<span class="token keyword">public</span> <span class="token class-name">Customer</span> <span class="token function">customer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
	    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Customer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token annotation punctuation">@Bean</span>
	<span class="token keyword">public</span> <span class="token class-name">CustomEditorConfigurer</span> <span class="token function">addressPropertyEditor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">CustomEditorConfigurer</span> configurer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CustomEditorConfigurer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 注入注册器</span>
		configurer<span class="token punctuation">.</span><span class="token function">setPropertyEditorRegistrars</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PropertyEditorRegistrar</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token keyword">new</span> <span class="token class-name">MyAddressPropertyEditorRegistrar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       	<span class="token comment">// 也可以直接设置编辑器，原因可见下面源码</span>
		<span class="token comment">// configurer.setCustomEditors(Map.of(Address.class, MyAddressPropertyEditor.class));</span>
		<span class="token keyword">return</span> configurer<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>org.springframework.beans.factory.config.CustomEditorConfigurer#postProcessBeanFactory源码</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postProcessBeanFactory</span><span class="token punctuation">(</span><span class="token class-name">ConfigurableListableBeanFactory</span> beanFactory<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>propertyEditorRegistrars <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">PropertyEditorRegistrar</span> propertyEditorRegistrar <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>propertyEditorRegistrars<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            beanFactory<span class="token punctuation">.</span><span class="token function">addPropertyEditorRegistrar</span><span class="token punctuation">(</span>propertyEditorRegistrar<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>customEditors <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>customEditors<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span>beanFactory<span class="token operator">::</span><span class="token function">registerCustomEditor</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-运行测试类" tabindex="-1"><a class="header-anchor" href="#_5-运行测试类" aria-hidden="true">#</a> 5. 运行测试类</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">properTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">AnnotationConfigApplicationContext</span> context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnnotationConfigApplicationContext</span><span class="token punctuation">(</span><span class="token class-name">EditorConfig</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Customer</span> bean <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getBean</span><span class="token punctuation">(</span><span class="token class-name">Customer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Address</span> address <span class="token operator">=</span> bean<span class="token punctuation">.</span><span class="token function">getAddress</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>address<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>输出：</p>`,23),c=n("blockquote",{province:"'湖北省',",city:"'襄阳市',",town:"'谷城县'"},[n("p",null,"Address")],-1),i=s(`<h2 id="spring自定义postprocessbeanfactory" tabindex="-1"><a class="header-anchor" href="#spring自定义postprocessbeanfactory" aria-hidden="true">#</a> Spring自定义postProcessBeanFactory</h2><h3 id="源码位置" tabindex="-1"><a class="header-anchor" href="#源码位置" aria-hidden="true">#</a> 源码位置</h3><p><code>org.springframework.context.support.AbstractApplicationContext#postProcessBeanFactory</code></p><p>可以看到在<code>AbstractApplicationContext</code>内部，该接口实现是空的。但spring支持我们自定义该接口。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">postProcessBeanFactory</span><span class="token punctuation">(</span><span class="token class-name">ConfigurableListableBeanFactory</span> beanFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="自定义该接口" tabindex="-1"><a class="header-anchor" href="#自定义该接口" aria-hidden="true">#</a> 自定义该接口</h3><p><strong>只需要在继承了<code>AbstractApplicationContext</code>类的子类中重写该方法即可。</strong></p><p>比如下面自定义一个<code>MyClassPathXmlApplicaionContext</code>继承<code>ClassPathXmlApplicationContext</code>，就可以实现该方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyClassPathXmlApplicaionContext</span> <span class="token keyword">extends</span> <span class="token class-name">ClassPathXmlApplicationContext</span> <span class="token punctuation">{</span>
	
	<span class="token keyword">public</span> <span class="token class-name">MyClassPathXmlApplicaionContext</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> configLocations<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">super</span><span class="token punctuation">(</span>configLocations<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
	
	<span class="token annotation punctuation">@Override</span>
	<span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">postProcessBeanFactory</span><span class="token punctuation">(</span><span class="token class-name">ConfigurableListableBeanFactory</span> beanFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;扩展实现postPrecessBeanFactory&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="spring自定义beanfactorypostprocessor" tabindex="-1"><a class="header-anchor" href="#spring自定义beanfactorypostprocessor" aria-hidden="true">#</a> Spring自定义BeanFactoryPostProcessor</h2><p>在源码中，可以在该方法中<code>org.springframework.context.support.PostProcessorRegistrationDelegate#invokeBeanFactoryPostProcessors</code></p><p>中有对BeanFactoryPostProcessor进行处理，但是如果没有自定义BeanFactoryPostProcessor，在该方法中的<code>beanFactoryPostProcessors</code>是空的。下面来自定义一个BeanFactoryPostProcessor。</p><h3 id="自定义" tabindex="-1"><a class="header-anchor" href="#自定义" aria-hidden="true">#</a> 自定义</h3><p>先创建一个自定义类</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyBeanFactoryPostProcessor</span> <span class="token keyword">implements</span> <span class="token class-name">BeanFactoryPostProcessor</span> <span class="token punctuation">{</span>
	<span class="token annotation punctuation">@Override</span>
	<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">postProcessBeanFactory</span><span class="token punctuation">(</span><span class="token class-name">ConfigurableListableBeanFactory</span> beanFactory<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BeansException</span> <span class="token punctuation">{</span>
		<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;自定义postProcessBeanFactory&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后添加到容器中</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyClassPathXmlApplicaionContext</span> <span class="token keyword">extends</span> <span class="token class-name">ClassPathXmlApplicationContext</span> <span class="token punctuation">{</span>
	
	<span class="token keyword">public</span> <span class="token class-name">MyClassPathXmlApplicaionContext</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> configLocations<span class="token punctuation">)</span> <span class="token punctuation">{</span>
		<span class="token keyword">super</span><span class="token punctuation">(</span>configLocations<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>

	<span class="token annotation punctuation">@Override</span>
	<span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">customizeBeanFactory</span><span class="token punctuation">(</span><span class="token class-name">DefaultListableBeanFactory</span> beanFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token comment">// 添加自定义BeanFactoryPostProcessor</span>
		<span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">addBeanFactoryPostProcessor</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyBeanFactoryPostProcessor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">customizeBeanFactory</span><span class="token punctuation">(</span>beanFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,17),l=[o,c,i];function u(r,d){return t(),e("div",null,l)}const m=a(p,[["render",u],["__file","Spring自定义扩展.html.vue"]]);export{m as default};
