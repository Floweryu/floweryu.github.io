import{_ as s,o as n,c as a,d as e}from"./app-a76132b9.js";const t="/assets/image-20231112221500225-a47b565e.png",p="/assets/image-20231112224559334-4969c115.png",o="/assets/image-20231112225226173-bd8cc5c7.png",i="/assets/image-20231112230009511-5959f4ad.png",c="/assets/image-20231112231617194-7e755e5c.png",l="/assets/image-20231112231916372-f524ac66.png",d="/assets/image-20231112231956836-73c34c37.png",r="/assets/image-20231112232027470-8a6aacaa.png",u="/assets/oJ8tYES64POIUGk-cb73f132.png",k="/assets/dTis4hCSugZoXyn-57f70e8f.png",g="/assets/E1YPyZ5Tjpk8CIH-00df61fc.png",v={},m=e('<h2 id="概述" tabindex="-1"><a class="header-anchor" href="#概述" aria-hidden="true">#</a> 概述</h2><p>下图是 Redis 对象和数据结构的对应关系图，左侧是 Redis3.0 版本的，右侧是 Redis7.0 版本。</p><p><img src="'+t+`" alt="image-20231112221500225"></p><h2 id="简单动态字符串-sds" tabindex="-1"><a class="header-anchor" href="#简单动态字符串-sds" aria-hidden="true">#</a> 简单动态字符串（SDS）</h2><h3 id="c语言字符串设计缺陷" tabindex="-1"><a class="header-anchor" href="#c语言字符串设计缺陷" aria-hidden="true">#</a> C语言字符串设计缺陷</h3><ul><li>获取字符串长度时间复杂度 <strong>O(N)</strong></li><li>字符串里面不能含有 <strong>\\0</strong> 字符，只能保存文本数据，<strong>不能保存像图片、音频、视频文化这样的二进制数据</strong></li><li>字符串操作函数不高效且不安全，字符串是不会记录自身的缓冲区大小，发生缓冲区溢出将可能会造成程序运行终止</li></ul><h3 id="sds结构" tabindex="-1"><a class="header-anchor" href="#sds结构" aria-hidden="true">#</a> SDS结构</h3><blockquote><p>Redis 5.0 版本</p></blockquote><div class="language-c++ line-numbers-mode" data-ext="c++"><pre class="language-c++"><code>struct __attribute__ ((__packed__)) sdshdr16 {
    uint16_t len;  // 字符串长度
    uint16_t alloc;  // 分配的空间长度
    unsigned char flags;  // sds类型
    char buf[];  // 字节数组
};
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>len</strong>：字符串长度。获取字符串长度时间复杂度 <strong>O(1)</strong>。</li><li><strong>alloc</strong>：分配给字符数组的空间长度。修改字符串时通过<code>alloc - len</code>可计算出剩余的空间大小，不满足自动扩容。</li><li><strong>flags</strong>：表示不同类型的 SDS。分别是：sdshdr5、sdshdr8、sdshdr16、sdshdr32 和 sdshdr64 。</li><li><strong>buf[]</strong>：字符数组，用来保存实际数据。</li></ul><h4 id="o-1-复杂度获取字符串长度" tabindex="-1"><a class="header-anchor" href="#o-1-复杂度获取字符串长度" aria-hidden="true">#</a> O（1）复杂度获取字符串长度</h4><p>len 成员变量来记录长度。</p><h4 id="二进制安全" tabindex="-1"><a class="header-anchor" href="#二进制安全" aria-hidden="true">#</a> 二进制安全</h4><p>len 成员变量来记录长度，所以可存储包含 <strong>\\0</strong> 的数据。</p><h4 id="不会发生缓冲区溢出" tabindex="-1"><a class="header-anchor" href="#不会发生缓冲区溢出" aria-hidden="true">#</a> 不会发生缓冲区溢出</h4><p><strong>自动扩容</strong>：</p><ul><li>如果所需的 sds 长度 <strong>小于 1 MB</strong>，那么最后的扩容是按照<strong>翻倍扩容</strong>来执行的，即 2 倍的 newlen</li><li>如果所需的 sds 长度 <strong>超过 1 MB</strong>，那么最后的扩容长度应该是 newlen <strong>+ 1MB</strong>。</li></ul><p>在扩容 SDS 空间之前，SDS API 会优先检查未使用空间是否足够，如果不够的话，API 不仅会为 SDS 分配修改所必须要的空间，还会给 SDS 分配额外的「未使用空间」。</p><p>这样的好处是，下次在操作 SDS 时，如果 SDS 空间够的话，API 就会直接使用「未使用空间」，而无须执行内存分配，<strong>有效的减少内存分配次数</strong>。</p><h4 id="节省内存空间" tabindex="-1"><a class="header-anchor" href="#节省内存空间" aria-hidden="true">#</a> 节省内存空间</h4><p>SDS 结构中有个 flags 成员变量，表示的是 SDS 类型。</p><p>Redis 一共设计了 5 种类型，分别是 sdshdr5、sdshdr8、sdshdr16、sdshdr32 和 sdshdr64。</p><p>这 5 种类型的主要<strong>区别就在于，它们数据结构中的 len 和 alloc 成员变量的数据类型不同</strong>。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">struct</span> <span class="token keyword">__attribute__</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>__packed__<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token class-name">sdshdr16</span> <span class="token punctuation">{</span>
    <span class="token class-name">uint16_t</span> len<span class="token punctuation">;</span>
    <span class="token class-name">uint16_t</span> alloc<span class="token punctuation">;</span> 
    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> flags<span class="token punctuation">;</span> 
    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>


<span class="token keyword">struct</span> <span class="token keyword">__attribute__</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>__packed__<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token class-name">sdshdr32</span> <span class="token punctuation">{</span>
    <span class="token class-name">uint32_t</span> len<span class="token punctuation">;</span>
    <span class="token class-name">uint32_t</span> alloc<span class="token punctuation">;</span> 
    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> flags<span class="token punctuation">;</span>
    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="链表" tabindex="-1"><a class="header-anchor" href="#链表" aria-hidden="true">#</a> 链表</h2><p><code>adlist.h/listNode</code>结构如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">listNode</span> <span class="token punctuation">{</span>
    <span class="token keyword">struct</span> <span class="token class-name">listNode</span> <span class="token operator">*</span>prev<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">listNode</span> <span class="token operator">*</span>next<span class="token punctuation">;</span>
    <span class="token keyword">void</span> <span class="token operator">*</span>value<span class="token punctuation">;</span>
<span class="token punctuation">}</span> listNode<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>adlist.h/list</code>结构如下：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">list</span> <span class="token punctuation">{</span>
    listNode <span class="token operator">*</span>head<span class="token punctuation">;</span>	<span class="token comment">// 表头节点</span>
    listNode <span class="token operator">*</span>tail<span class="token punctuation">;</span>	<span class="token comment">// 表尾节点</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> len<span class="token punctuation">;</span>	<span class="token comment">// 链表所包含的节点数量</span>
    <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span>dup<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// 节点值复制函数</span>
    <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>free<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// 节点释放函数</span>
    <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>match<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// 节点值对比函数</span>
<span class="token punctuation">}</span> list<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="`+p+'" alt="image-20231112224559334"></p><p>【优点】如下：</p><ul><li><strong>双端</strong>：获取某个节点的前置节点和后置节点的复杂度都是 <strong>O(1)</strong> 。</li><li><strong>无环</strong>：表头指针和表尾指针都指向 NULL ，对链表的访问以 NULL 为终点。</li><li>带表头指针和表尾指针：获取表头或表尾节点时间复杂度 <strong>O(1)</strong>。</li><li>带链表长度计数器：获取链表中的节点数量的时间复杂度只需 <strong>O(1)</strong>。</li><li>多态：链表节点使用 <code>void*</code> 指针来保存节点值，并且可以通过 <code>list</code> 结构的 <code>dup、free、match</code> 三个属性为节点值设置类型特定函数，链表可以用于保存不同类型的值。</li></ul><p>【缺点】如下：</p><ul><li>链表每个节点之间的内存不连续，<strong>无法很好利用 CPU 缓存</strong>。而数组的内存是连续的，就可以充分利用 CPU 缓存来加速访问。</li><li>保存一个链表节点的值都需要一个链表节点结构头的分配，<strong>内存开销较大</strong>。</li></ul><blockquote><p><strong>版本迭代历史</strong>：</p><p>Redis 3.0 的 List 对象在数据量比较少的情况下，会采用「压缩列表」作为底层数据结构的实现，它的优势是节省内存空间，并且是内存紧凑型的数据结构。</p><p>Redis 3.2 版本设计了新的数据结构 quicklist，并将 List 对象的底层数据结构改由 quicklist 实现。</p><p>Redis 5.0 设计了新的数据结构 listpack，沿用了压缩列表紧凑型的内存布局，最终在最新的 Redis 版本，将 Hash 对象和 Zset 对象的底层数据结构实现之一的压缩列表，替换成由 listpack 实现</p></blockquote><h2 id="压缩列表-ziplist" tabindex="-1"><a class="header-anchor" href="#压缩列表-ziplist" aria-hidden="true">#</a> 压缩列表(ziplist)</h2><p>为了节约内存，<strong>由连续内存块组成的顺序型数据结构</strong>，类似于数组。</p><p><img src="'+o+'" alt="image-20231112225226173"></p><ul><li><strong>zlbytes</strong>：记录整个压缩列表占用对内存字节数。作用于内存重新分配或者计算 zlend。</li><li><strong>zltail</strong>：记录压缩列表「尾部」节点距离起始地址有多少字节。通过该值，无须遍历即可确定表尾节点地址。</li><li><strong>zllen</strong>：记录压缩列表包含的节点数量。值小于 65535 时即列表节点数量，等于 65535 时列表节点真实数量需要遍历计算。</li><li><strong>zlend</strong>：标记压缩列表的结束点，固定值 0xFF（十进制255）。</li><li><strong>entryX</strong>：压缩链表节点。</li></ul><p>查询第一个元素和最后一个元素时间复杂度 <strong>O(1)</strong>。但查询其他元素需要遍历，时间复杂度 <strong>O(N)</strong>，所以压缩列表不适合存储过多元素。</p><p><strong>entryX</strong> 节点构成如下：</p><p><img src="'+i+'" alt="image-20231112230009511"></p><ul><li><strong>prevlen</strong>：记录了「前一个节点」的长度，目的是为了实现从后向前遍历；</li><li><strong>encoding</strong>：记录了当前节点实际数据的「类型和长度」，类型主要有两种：字符串和整数。</li><li><strong>data</strong>：记录了当前节点的实际数据，类型和长度都由 <code>encoding</code> 决定；</li></ul><p>当往压缩列表中插入数据时，压缩列表就会根据数据类型是字符串还是整数，以及数据的大小，会使用不同空间大小的 prevlen 和 encoding 这两个元素里保存的信息，<strong>这种根据数据大小和类型进行不同的空间大小分配的设计思想，正是 Redis 为了节省内存而采用的</strong>。</p><p><strong>如何分配？</strong></p><p>压缩列表里的每个节点中的 prevlen 属性都记录了「前一个节点的长度」，而且 prevlen 属性的空间大小跟前一个节点长度值有关，比如：</p><ul><li>如果<strong>前一个节点的长度小于 254 字节</strong>，那么 prevlen 属性需要用 <strong>1 字节的空间</strong>来保存这个长度值；</li><li>如果<strong>前一个节点的长度大于等于 254 字节</strong>，那么 prevlen 属性需要用 <strong>5 字节的空间</strong>来保存这个长度值；</li></ul><p>encoding 属性的空间大小跟数据是字符串还是整数，以及字符串的长度有关，如下图（下图中的 content 表示的是实际数据，即本文的 data 字段）：</p><p><img src="'+c+'" alt="image-20231112231617194"></p><ul><li>如果<strong>当前节点的数据是整数</strong>，则 encoding 会使用 <strong>1 字节的空间</strong>进行编码，也就是 encoding 长度为 1 字节。通过 encoding 确认了整数类型，就可以确认整数数据的实际大小了，比如如果 encoding 编码确认了数据是 int16 整数，那么 data 的长度就是 int16 的大小。</li><li>如果<strong>当前节点的数据是字符串，根据字符串的长度大小</strong>，encoding 会使用 <strong>1 字节/2字节/5字节的空间</strong>进行编码，encoding 编码的前两个 bit 表示数据的类型，后续的其他 bit 标识字符串数据的实际长度，即 data 的长度。</li></ul><h3 id="连锁更新问题" tabindex="-1"><a class="header-anchor" href="#连锁更新问题" aria-hidden="true">#</a> 连锁更新问题</h3><p><strong>问题描述</strong>：压缩列表新增某个元素或修改某个元素时，如果空间不不够，压缩列表占用的内存空间就需要重新分配。而当新插入的元素较大时，可能会导致后续元素的 prevlen 占用空间都发生变化，从而引起「连锁更新」问题，导致每个元素的空间都要重新分配，造成访问压缩列表性能的下降。</p><blockquote><p>前面提到，压缩列表节点的 prevlen 属性会根据前一个节点的长度进行不同的空间大小分配：</p><ul><li>如果前一个<strong>节点的长度小于 254 字节</strong>，那么 prevlen 属性需要用 <strong>1 字节的空间</strong>来保存这个长度值；</li><li>如果前一个<strong>节点的长度大于等于 254 字节</strong>，那么 prevlen 属性需要用 <strong>5 字节的空间</strong>来保存这个长度值；</li></ul></blockquote><p>假设一个压缩列表中有多个连续的、长度在 250～253 之间的节点，如下图：</p><p><img src="'+l+'" alt="image-20231112231916372"></p><p>这些节点长度值小于 254 字节，所以 prevlen 属性需要用 1 字节的空间来保存这个长度值。</p><p>这时，如果将一个长度大于等于 254 字节的新节点加入到压缩列表的表头节点，即新节点将成为 e1 的前置节点，如下图：</p><p><img src="'+d+'" alt="image-20231112231956836"></p><p>因为 e1 节点的 prevlen 属性只有 1 个字节大小，无法保存新节点的长度，此时就需要对压缩列表的空间重分配操作，并将 e1 节点的 prevlen 属性从原来的 1 字节大小扩展为 5 字节大小。</p><p><img src="'+r+`" alt="image-20231112232027470"></p><p>e1 原本的长度在 250～253 之间，因为刚才的扩展空间，此时 e1 的长度就大于等于 254 了，因此原本 e2 保存 e1 的 prevlen 属性也必须从 1 字节扩展至 5 字节大小。</p><h3 id="缺陷" tabindex="-1"><a class="header-anchor" href="#缺陷" aria-hidden="true">#</a> 缺陷</h3><ul><li>保存的元素数量增加了，或是元素变大了，会导致内存重新分配，最糟糕的是会有「连锁更新」的问题。</li></ul><p><strong>压缩列表只会用于保存的节点数量不多的场景</strong>，只要节点数量足够小，即使发生连锁更新，也是能接受的。</p><blockquote><p>Redis 针对压缩列表在设计上的不足，在后来的版本中，新增设计了两种数据结构：quicklist（Redis 3.2 引入） 和 listpack（Redis 5.0 引入）。</p></blockquote><h2 id="字典-dict" tabindex="-1"><a class="header-anchor" href="#字典-dict" aria-hidden="true">#</a> 字典(Dict)</h2><h3 id="字典的实现" tabindex="-1"><a class="header-anchor" href="#字典的实现" aria-hidden="true">#</a> 字典的实现</h3><p>Redis底层字典使用哈希表作为底层实现，一个哈希表里面可以有多个哈希表节点，而每个哈希表节点就保存了字典中的一个键值对。</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">dictht</span> <span class="token punctuation">{</span>
    dictRntry <span class="token operator">*</span><span class="token operator">*</span>table<span class="token punctuation">;</span>	<span class="token comment">// 哈希表数组</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> size<span class="token punctuation">;</span>	<span class="token comment">// 哈希表大小</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> sizemask<span class="token punctuation">;</span> <span class="token comment">//哈希表大小掩码，用于计算索引值，总是等于size=1</span>
    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> used<span class="token punctuation">;</span>	<span class="token comment">//哈希表已有节点的数量</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="哈希表节点" tabindex="-1"><a class="header-anchor" href="#哈希表节点" aria-hidden="true">#</a> 哈希表节点</h4><p>使用<code>dictEntry</code>结构表示：</p><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">dictEntry</span> <span class="token punctuation">{</span>
    <span class="token keyword">void</span> <span class="token operator">*</span>key<span class="token punctuation">;</span>
    <span class="token keyword">union</span> <span class="token punctuation">{</span>
        <span class="token keyword">void</span> <span class="token operator">*</span>val<span class="token punctuation">;</span>
        uint64_tu64<span class="token punctuation">;</span>
        int64_ts64<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> v<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">dictEntry</span> <span class="token operator">*</span>next<span class="token punctuation">;</span>
<span class="token punctuation">}</span> dictEntry<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>key</code>保存键，<code>v</code>保存值，<code>next</code>指针指向下一个节点.</p><h4 id="字典" tabindex="-1"><a class="header-anchor" href="#字典" aria-hidden="true">#</a> 字典</h4><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">dict</span> <span class="token punctuation">{</span>
    dictType <span class="token operator">*</span>type<span class="token punctuation">;</span>	<span class="token comment">// 类型特定函数</span>
    <span class="token keyword">void</span> <span class="token operator">*</span>privdata<span class="token punctuation">;</span>	<span class="token comment">// 私有数据</span>
    dictht ht<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>	<span class="token comment">// 哈希表</span>
    <span class="token keyword">int</span> trehashidx<span class="token punctuation">;</span> <span class="token comment">// rehash索引，当rehash值不在，值为1</span>
<span class="token punctuation">}</span> dict<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="哈希算法" tabindex="-1"><a class="header-anchor" href="#哈希算法" aria-hidden="true">#</a> 哈希算法</h4><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token comment">// 使用字典设置的哈希函数，计算键key的哈希值</span>
hash <span class="token operator">=</span> dict<span class="token operator">-&gt;</span>type<span class="token operator">-&gt;</span><span class="token function">hashFunction</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 使用哈希表的sizemask属性和哈希值，计算出索引值</span>
index <span class="token operator">=</span> hash <span class="token operator">&amp;</span> dict<span class="token operator">-&gt;</span>ht<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">.</span>sizemask<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="解决键冲突" tabindex="-1"><a class="header-anchor" href="#解决键冲突" aria-hidden="true">#</a> 解决键冲突</h4><p>链地址法：总是将新节点添加到链表表头的位置。</p><p><img src="`+u+'" alt="image-20210306143633380"></p><h2 id="跳跃表-skip-list" tabindex="-1"><a class="header-anchor" href="#跳跃表-skip-list" aria-hidden="true">#</a> 跳跃表(Skip List)</h2><p><img src="'+k+`" alt="image-20210306181234657"></p><p>图片最左侧是跳跃表结构：</p><ul><li><code>header</code>：跳跃表头节点</li><li><code>tail</code>：指向跳跃表的表头节点</li><li><code>level</code>：记录目前跳跃表内，层数最大的那个节点的层数（表头节点层数不计算再内）</li><li><code>length</code>：记录跳跃表的长度，即跳跃表目前包含节点的数量（表头节点不计算在内）</li><li>后退指针<code>BW</code>：指向位于当前节点的前一个节点</li><li>分值<code>score</code>：节点按照各自保存的分支从小到大排列</li></ul><h3 id="跳跃表节点" tabindex="-1"><a class="header-anchor" href="#跳跃表节点" aria-hidden="true">#</a> 跳跃表节点</h3><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">zskiplistNode</span> <span class="token punctuation">{</span>
    robj <span class="token operator">*</span>obj<span class="token punctuation">;</span>
    <span class="token keyword">double</span> score<span class="token punctuation">;</span>
    <span class="token keyword">struct</span> <span class="token class-name">zskiplistNode</span> <span class="token operator">*</span>backward<span class="token punctuation">;</span> <span class="token comment">//后向指针</span>
    <span class="token keyword">struct</span> <span class="token class-name">zskiplistLevel</span> <span class="token punctuation">{</span>
        <span class="token keyword">struct</span> <span class="token class-name">zskiplistNode</span> <span class="token operator">*</span>forward<span class="token punctuation">;</span><span class="token comment">//每一层中的前向指针</span>
        <span class="token keyword">unsigned</span> <span class="token keyword">int</span> span<span class="token punctuation">;</span><span class="token comment">//x.level[i].span 表示节点x在第i层到其下一个节点需跳过的节点数。注：两个相邻节点span为1</span>
    <span class="token punctuation">}</span> level<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> zskiplistNode<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>level</code>数组可以包含多个元素，每个元素都包含一个指向其它节点的指针。</p><p>每次创建一个新的跳跃表节点的时候，程序根据幂次定律(越大的数出现的而概率越小)随机生成一个介于1和32之间的值作为<code>level</code>数组的大小。</p><p>在同一个跳跃表中，各个节点保存的成员对象必须是唯一的，但多个节点保存的分值可以是相同的：分值相同的节点将按照成员对象在字典序中的大小来进行排序。</p><h2 id="整数集合-intset" tabindex="-1"><a class="header-anchor" href="#整数集合-intset" aria-hidden="true">#</a> 整数集合(intset)</h2><div class="language-c line-numbers-mode" data-ext="c"><pre class="language-c"><code><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">intset</span> <span class="token punctuation">{</span>
    <span class="token class-name">uint32_t</span> encoding<span class="token punctuation">;</span>	<span class="token comment">// 编码方式</span>
    <span class="token class-name">uint32_t</span> length<span class="token punctuation">;</span>	<span class="token comment">// 包含元素数量</span>
    <span class="token class-name">int8_t</span> contents<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>	<span class="token comment">// 保存元素的数组</span>
<span class="token punctuation">}</span> intset<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>contents</code>中的数据是从小到大排列，并且数组中不包含重复项</li><li><code>length</code>记录包含元素数量，也是<code>contents</code>数组的长度</li></ul><p><strong>升级</strong></p><p>当新元素类型比现在集合中元素类型要长时，需要对集合进行升级。</p><ol><li>根据新元素类型，扩展整数集合底层数组的空间大小，并为新元素分配空间。</li><li>将底层数组现有的所有元素都转换成与新元素相同的类型，并将类型转换后的元素放到正确的位置上，需要维持有序性不变。</li></ol><h2 id="压缩列表-ziplist-1" tabindex="-1"><a class="header-anchor" href="#压缩列表-ziplist-1" aria-hidden="true">#</a> 压缩列表(ziplist)</h2><p><img src="`+g+'" alt="image-20210306204120032"></p>',97),h=[m];function b(y,_){return n(),a("div",null,h)}const f=s(v,[["render",b],["__file","Redisshujujiegouyuduixiang.html.vue"]]);export{f as default};
