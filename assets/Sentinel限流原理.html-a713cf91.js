const n=JSON.parse('{"key":"v-514b65ee","path":"/sentinel/Sentinel%E9%99%90%E6%B5%81%E5%8E%9F%E7%90%86.html","title":"Sentinel限流原理","lang":"en-US","frontmatter":{"title":"Sentinel限流原理","date":"2023-07-09T19:00:00.000Z","category":["Sentinel"],"tag":["后端","中间件"],"description":"SphU.entry 入口 从SphU.entry()方法向下执行，会进入到下面这个方法中： private Entry entryWithPriority(ResourceWrapper resourceWrapper, int count, boolean prioritized, Object... args) throws BlockException { Context context = ContextUtil.getContext(); if (context instanceof NullContext) { // The {@link NullContext} indicates that the amount of context has exceeded the threshold, // so here init the entry only. No rule checking will be done. return new CtEntry(resourceWrapper, null, context); } if (context == null) { // Using default context. context = InternalContextUtil.internalEnter(Constants.CONTEXT_DEFAULT_NAME); } // Global switch is close, no rule checking will do. // 1. 全局开关关闭，说明没有规则检查，直接返回一个CtEntry对象，不再进行后续的限流检测 if (!Constants.ON) { return new CtEntry(resourceWrapper, null, context); } // 2. 根据包装过的资源获取对应的SlotChain ProcessorSlot&lt;Object&gt; chain = lookProcessChain(resourceWrapper); /* * Means amount of resources (slot chain) exceeds {@link Constants.MAX_SLOT_CHAIN_SIZE}, * so no rule checking will be done. */ if (chain == null) { return new CtEntry(resourceWrapper, null, context); } Entry e = new CtEntry(resourceWrapper, chain, context, count, args); try { // 3. 执行SlotChain的entry方法，如果SlotChain的entry方法抛出了BlockException，则将该异常继续向上抛出，如果SlotChain的entry方法正常执行了，则最后会将该entry对象返回 chain.entry(context, resourceWrapper, null, count, prioritized, args); } catch (BlockException e1) { e.exit(count, args); // 4. 如果上层方法捕获了BlockException，则说明请求被限流了，否则请求能正常执行 throw e1; } catch (Throwable e1) { // This should not happen, unless there are errors existing in Sentinel internal. RecordLog.info(\\"Sentinel unexpected exception\\", e1); } return e; }","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/sentinel/Sentinel%E9%99%90%E6%B5%81%E5%8E%9F%E7%90%86.html"}],["meta",{"property":"og:site_name","content":"Blog Demo"}],["meta",{"property":"og:title","content":"Sentinel限流原理"}],["meta",{"property":"og:description","content":"SphU.entry 入口 从SphU.entry()方法向下执行，会进入到下面这个方法中： private Entry entryWithPriority(ResourceWrapper resourceWrapper, int count, boolean prioritized, Object... args) throws BlockException { Context context = ContextUtil.getContext(); if (context instanceof NullContext) { // The {@link NullContext} indicates that the amount of context has exceeded the threshold, // so here init the entry only. No rule checking will be done. return new CtEntry(resourceWrapper, null, context); } if (context == null) { // Using default context. context = InternalContextUtil.internalEnter(Constants.CONTEXT_DEFAULT_NAME); } // Global switch is close, no rule checking will do. // 1. 全局开关关闭，说明没有规则检查，直接返回一个CtEntry对象，不再进行后续的限流检测 if (!Constants.ON) { return new CtEntry(resourceWrapper, null, context); } // 2. 根据包装过的资源获取对应的SlotChain ProcessorSlot&lt;Object&gt; chain = lookProcessChain(resourceWrapper); /* * Means amount of resources (slot chain) exceeds {@link Constants.MAX_SLOT_CHAIN_SIZE}, * so no rule checking will be done. */ if (chain == null) { return new CtEntry(resourceWrapper, null, context); } Entry e = new CtEntry(resourceWrapper, chain, context, count, args); try { // 3. 执行SlotChain的entry方法，如果SlotChain的entry方法抛出了BlockException，则将该异常继续向上抛出，如果SlotChain的entry方法正常执行了，则最后会将该entry对象返回 chain.entry(context, resourceWrapper, null, count, prioritized, args); } catch (BlockException e1) { e.exit(count, args); // 4. 如果上层方法捕获了BlockException，则说明请求被限流了，否则请求能正常执行 throw e1; } catch (Throwable e1) { // This should not happen, unless there are errors existing in Sentinel internal. RecordLog.info(\\"Sentinel unexpected exception\\", e1); } return e; }"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:updated_time","content":"2023-11-14T09:30:42.000Z"}],["meta",{"property":"article:author","content":"Mr.Hope"}],["meta",{"property":"article:tag","content":"后端"}],["meta",{"property":"article:tag","content":"中间件"}],["meta",{"property":"article:published_time","content":"2023-07-09T19:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2023-11-14T09:30:42.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Sentinel限流原理\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-07-09T19:00:00.000Z\\",\\"dateModified\\":\\"2023-11-14T09:30:42.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"Mr.Hope\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"SphU.entry 入口","slug":"sphu-entry-入口","link":"#sphu-entry-入口","children":[]},{"level":2,"title":"SlotChain 的链路获取","slug":"slotchain-的链路获取","link":"#slotchain-的链路获取","children":[]},{"level":2,"title":"SlotChain 的链路执行","slug":"slotchain-的链路执行","link":"#slotchain-的链路执行","children":[]},{"level":2,"title":"Slot 中的 entry 逻辑","slug":"slot-中的-entry-逻辑","link":"#slot-中的-entry-逻辑","children":[{"level":3,"title":"滑动窗口限流原理","slug":"滑动窗口限流原理","link":"#滑动窗口限流原理","children":[]}]},{"level":2,"title":"参考文章","slug":"参考文章","link":"#参考文章","children":[]}],"git":{"createdTime":1699954242000,"updatedTime":1699954242000,"contributors":[{"name":"zhangjunfeng","email":"im.zhangjunfeng@qq.com","commits":1}]},"readingTime":{"minutes":15.53,"words":4659},"filePathRelative":"sentinel/Sentinel限流原理.md","localizedDate":"July 9, 2023","excerpt":"<h2> SphU.entry 入口</h2>\\n<p>从<code>SphU.entry()</code>方法向下执行，会进入到下面这个方法中：</p>\\n<div class=\\"language-java line-numbers-mode\\" data-ext=\\"java\\"><pre class=\\"language-java\\"><code> <span class=\\"token keyword\\">private</span> <span class=\\"token class-name\\">Entry</span> <span class=\\"token function\\">entryWithPriority</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">ResourceWrapper</span> resourceWrapper<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">int</span> count<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">boolean</span> prioritized<span class=\\"token punctuation\\">,</span> <span class=\\"token class-name\\">Object</span><span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span><span class=\\"token punctuation\\">.</span> args<span class=\\"token punctuation\\">)</span>\\n        <span class=\\"token keyword\\">throws</span> <span class=\\"token class-name\\">BlockException</span> <span class=\\"token punctuation\\">{</span>\\n        <span class=\\"token class-name\\">Context</span> context <span class=\\"token operator\\">=</span> <span class=\\"token class-name\\">ContextUtil</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">getContext</span><span class=\\"token punctuation\\">(</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>context <span class=\\"token keyword\\">instanceof</span> <span class=\\"token class-name\\">NullContext</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token comment\\">// The {@link NullContext} indicates that the amount of context has exceeded the threshold,</span>\\n            <span class=\\"token comment\\">// so here init the entry only. No rule checking will be done.</span>\\n            <span class=\\"token keyword\\">return</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">CtEntry</span><span class=\\"token punctuation\\">(</span>resourceWrapper<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">,</span> context<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n\\n        <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>context <span class=\\"token operator\\">==</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token comment\\">// Using default context.</span>\\n            context <span class=\\"token operator\\">=</span> <span class=\\"token class-name\\">InternalContextUtil</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">internalEnter</span><span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Constants</span><span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">CONTEXT_DEFAULT_NAME</span><span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n\\n        <span class=\\"token comment\\">// Global switch is close, no rule checking will do.</span>\\n        <span class=\\"token comment\\">// 1. 全局开关关闭，说明没有规则检查，直接返回一个CtEntry对象，不再进行后续的限流检测</span>\\n        <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span><span class=\\"token operator\\">!</span><span class=\\"token class-name\\">Constants</span><span class=\\"token punctuation\\">.</span><span class=\\"token constant\\">ON</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token keyword\\">return</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">CtEntry</span><span class=\\"token punctuation\\">(</span>resourceWrapper<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">,</span> context<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n\\n        <span class=\\"token comment\\">// 2. 根据包装过的资源获取对应的SlotChain</span>\\n        <span class=\\"token class-name\\">ProcessorSlot</span><span class=\\"token generics\\"><span class=\\"token punctuation\\">&lt;</span><span class=\\"token class-name\\">Object</span><span class=\\"token punctuation\\">&gt;</span></span> chain <span class=\\"token operator\\">=</span> <span class=\\"token function\\">lookProcessChain</span><span class=\\"token punctuation\\">(</span>resourceWrapper<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n\\n        <span class=\\"token comment\\">/*\\n         * Means amount of resources (slot chain) exceeds {@link Constants.MAX_SLOT_CHAIN_SIZE},\\n         * so no rule checking will be done.\\n         */</span>\\n        <span class=\\"token keyword\\">if</span> <span class=\\"token punctuation\\">(</span>chain <span class=\\"token operator\\">==</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token keyword\\">return</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">CtEntry</span><span class=\\"token punctuation\\">(</span>resourceWrapper<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">,</span> context<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n\\n        <span class=\\"token class-name\\">Entry</span> e <span class=\\"token operator\\">=</span> <span class=\\"token keyword\\">new</span> <span class=\\"token class-name\\">CtEntry</span><span class=\\"token punctuation\\">(</span>resourceWrapper<span class=\\"token punctuation\\">,</span> chain<span class=\\"token punctuation\\">,</span> context<span class=\\"token punctuation\\">,</span> count<span class=\\"token punctuation\\">,</span> args<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token keyword\\">try</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token comment\\">// 3. 执行SlotChain的entry方法，如果SlotChain的entry方法抛出了BlockException，则将该异常继续向上抛出，如果SlotChain的entry方法正常执行了，则最后会将该entry对象返回</span>\\n            chain<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">entry</span><span class=\\"token punctuation\\">(</span>context<span class=\\"token punctuation\\">,</span> resourceWrapper<span class=\\"token punctuation\\">,</span> <span class=\\"token keyword\\">null</span><span class=\\"token punctuation\\">,</span> count<span class=\\"token punctuation\\">,</span> prioritized<span class=\\"token punctuation\\">,</span> args<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">catch</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">BlockException</span> e1<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            e<span class=\\"token punctuation\\">.</span><span class=\\"token function\\">exit</span><span class=\\"token punctuation\\">(</span>count<span class=\\"token punctuation\\">,</span> args<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n            <span class=\\"token comment\\">// 4. 如果上层方法捕获了BlockException，则说明请求被限流了，否则请求能正常执行</span>\\n            <span class=\\"token keyword\\">throw</span> e1<span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span> <span class=\\"token keyword\\">catch</span> <span class=\\"token punctuation\\">(</span><span class=\\"token class-name\\">Throwable</span> e1<span class=\\"token punctuation\\">)</span> <span class=\\"token punctuation\\">{</span>\\n            <span class=\\"token comment\\">// This should not happen, unless there are errors existing in Sentinel internal.</span>\\n            <span class=\\"token class-name\\">RecordLog</span><span class=\\"token punctuation\\">.</span><span class=\\"token function\\">info</span><span class=\\"token punctuation\\">(</span><span class=\\"token string\\">\\"Sentinel unexpected exception\\"</span><span class=\\"token punctuation\\">,</span> e1<span class=\\"token punctuation\\">)</span><span class=\\"token punctuation\\">;</span>\\n        <span class=\\"token punctuation\\">}</span>\\n        <span class=\\"token keyword\\">return</span> e<span class=\\"token punctuation\\">;</span>\\n    <span class=\\"token punctuation\\">}</span>\\n</code></pre><div class=\\"line-numbers\\" aria-hidden=\\"true\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{n as data};
