import{_ as a}from"./plugin-vue_export-helper-c27b6911.js";import{r as t,o as e,c as p,b as n,d as o,e as c,a as l}from"./app-1a233b40.js";const i="/assets/202112192043820-0a51d88e.png",u={},r=l('<h2 id="_1-使用场景" tabindex="-1"><a class="header-anchor" href="#_1-使用场景" aria-hidden="true">#</a> 1. 使用场景</h2><p>在淘宝购物车下单时，涉及到购物车系统和交易系统，这两个系统之间的数据最终一致性可以通过分布式事务消息的异步处理实现。在这种场景下，交易系统是最为核心的系统，需要最大限度地保证下单成功。而购物车系统只需要订阅消息队列RocketMQ版的交易订单消息，做相应的业务处理，即可保证最终的数据一致性。</p><h2 id="_2-执行流程" tabindex="-1"><a class="header-anchor" href="#_2-执行流程" aria-hidden="true">#</a> 2. 执行流程</h2><figure><img src="'+i+`" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h4 id="事务消息发送步骤如下" tabindex="-1"><a class="header-anchor" href="#事务消息发送步骤如下" aria-hidden="true">#</a> 事务消息发送步骤如下：</h4><ol><li>生产者将半事务消息发送至消息队列RocketMQ服务端。</li><li>服务端将消息持久化成功之后，向生产者返回Ack确认消息已经发送成功，此时消息为半事务消息。</li><li>生产者开始执行本地事务逻辑。</li><li>生产者根据本地事务执行结果向服务端提交二次确认结果（Commit或是Rollback），服务端收到确认结果后处理逻辑如下： <ul><li>二次确认结果为Commit：服务端将半事务消息标记为可投递，并投递给消费者。</li><li>二次确认结果为Rollback：服务端不会将该消息投递给消费者，并按照如下逻辑进行回查处理。</li></ul></li></ol><h4 id="事务消息回查步骤如下" tabindex="-1"><a class="header-anchor" href="#事务消息回查步骤如下" aria-hidden="true">#</a> 事务消息回查步骤如下：</h4><ol><li>在断网或者是生产者应用重启的特殊情况下，上述步骤4提交的二次确认最终未到达服务端，经过固定时间后，服务端将对消息生产者即生产者集群中任一生产者实例发起消息回查。</li><li>生产者收到消息回查后，需要检查对应消息的本地事务执行的最终结果。</li><li>生产者根据检查得到的本地事务的最终状态再次提交二次确认，服务端仍按照步骤4对半事务消息进行处理。</li></ol><h4 id="事务消息存储的topic" tabindex="-1"><a class="header-anchor" href="#事务消息存储的topic" aria-hidden="true">#</a> 事务消息存储的<code>TOPIC</code>：</h4><ol><li>生产者发送消息到BROKER,该消息是半事务消息，且事务消息的发送是同步发送的方式。</li><li>BROKER接收到消息后，会将消息进行切换，所有事务消息统一会写入<strong>RMQ_SYS_TRANS_HALF_TOPIC</strong>中，写入成功后会给生产者返回成功状态。</li><li>本地生产获取到该消息的事务Id，进行本地事务处理。</li><li>本地事务执行成功提交COMMIT，失败则提交ROLLBACK，超时提交或提交UNKNOW状态则会触发BROKER的事务回查。</li><li>若提交了COMMIT或ROLLBACK状态，BROKER会将该消息写入到<strong>RMQ_SYS_TRANS_OP_HALF_TOPIC</strong>中，该TOPIC主要记录已经COMMIT或ROLLBACK的半事务消息，BROKER利用<strong>RMQ_SYS_TRANS_HALF_TOPIC</strong>和<strong>RMQ_SYS_TRANS_OP_HALF_TOPIC</strong>计算出需要回查的事务消息。如果是COMMIT消息，BROKER会将消息从<strong>RMQ_SYS_TRANS_HALF_TOPIC</strong>取出来存储到真正的TOPIC中，从而消费者可以正常进行消费，如果是ROOLBACK则不进行操作.</li><li>如果本地事务执行超时或者返回了UNKNOW状态，则BROKER会进行事务回查。BROKER每次回查时会将消息在<strong>RMQ_SYS_TRANS_HALF_TOPIC</strong>中写一次。</li></ol><p>所以，经历的三个TOPIC的功能如下：</p><ul><li><strong>RMQ_SYS_TRANS_HALF_TOPIC</strong>：记录所有的半事务消息</li><li><strong>RMQ_SYS_TRANS_OP_HALF_TOPIC</strong>：记录已经提交了状态的半事务消息</li><li><strong>REAL_TOPIC</strong>：事务消息真正的TOPIC，在事务COMMIT后才会将消息写入该TOPIC，从而消费者才能消费</li></ul><h4 id="broker处理半事务消息" tabindex="-1"><a class="header-anchor" href="#broker处理半事务消息" aria-hidden="true">#</a> BROKER处理半事务消息</h4><p>从RocketMQ的源码按照一下步骤点下去，既可以看到此处存储到TOPIC的逻辑：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 源码查看路径 broker包的processor目录下
 * SendMessageProcessor.java--&gt;processRequest-&gt;asyncProcessRequest
 */</span>
<span class="token comment">// 下面这部分代码判断是否为事务消息，因为事务消息是单条的</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>requestHeader<span class="token punctuation">.</span><span class="token function">isBatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">asyncSendBatchMessage</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> request<span class="token punctuation">,</span> mqtraceContext<span class="token punctuation">,</span> requestHeader<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">asyncSendMessage</span><span class="token punctuation">(</span>ctx<span class="token punctuation">,</span> request<span class="token punctuation">,</span> mqtraceContext<span class="token punctuation">,</span> requestHeader<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * 点击asyncSendMessage，后面有下面代码
 */</span>
<span class="token class-name">String</span> transFlag <span class="token operator">=</span> origProps<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">MessageConst</span><span class="token punctuation">.</span><span class="token constant">PROPERTY_TRANSACTION_PREPARED</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// PROPERTY_TRANSACTION_PREPARED = &quot;TRAN_MSG&quot;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>transFlag <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token function">parseBoolean</span><span class="token punctuation">(</span>transFlag<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>brokerController<span class="token punctuation">.</span><span class="token function">getBrokerConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isRejectTransactionMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        response<span class="token punctuation">.</span><span class="token function">setCode</span><span class="token punctuation">(</span><span class="token class-name">ResponseCode</span><span class="token punctuation">.</span><span class="token constant">NO_PERMISSION</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        response<span class="token punctuation">.</span><span class="token function">setRemark</span><span class="token punctuation">(</span>
            <span class="token string">&quot;the broker[&quot;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>brokerController<span class="token punctuation">.</span><span class="token function">getBrokerConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getBrokerIP1</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token operator">+</span> <span class="token string">&quot;] sending transaction message is forbidden&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token class-name">CompletableFuture</span><span class="token punctuation">.</span><span class="token function">completedFuture</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    putMessageResult <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>brokerController<span class="token punctuation">.</span><span class="token function">getTransactionalMessageService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">asyncPrepareMessage</span><span class="token punctuation">(</span>msgInner<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    putMessageResult <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>brokerController<span class="token punctuation">.</span><span class="token function">getMessageStore</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">asyncPutMessage</span><span class="token punctuation">(</span>msgInner<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * 点击asyncPrepareMessage一直下去，会进入TransactionlMessageBridge.java类中的下面方法
 */</span>
<span class="token keyword">public</span> <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">PutMessageResult</span><span class="token punctuation">&gt;</span></span> <span class="token function">asyncPutHalfMessage</span><span class="token punctuation">(</span><span class="token class-name">MessageExtBrokerInner</span> messageInner<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> store<span class="token punctuation">.</span><span class="token function">asyncPutMessage</span><span class="token punctuation">(</span><span class="token function">parseHalfMessageInner</span><span class="token punctuation">(</span>messageInner<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * 将消息进行转换，最终将消息存储到统一处理事务的Topic中：RMQ_SYS_TRANS_HALF_TOPIC
 * <span class="token keyword">@return</span> 转换后的消息
 */</span>
<span class="token keyword">private</span> <span class="token class-name">MessageExtBrokerInner</span> <span class="token function">parseHalfMessageInner</span><span class="token punctuation">(</span><span class="token class-name">MessageExtBrokerInner</span> msgInner<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 将消息所属真正Topic存储到消息的properties中</span>
    <span class="token class-name">MessageAccessor</span><span class="token punctuation">.</span><span class="token function">putProperty</span><span class="token punctuation">(</span>msgInner<span class="token punctuation">,</span> <span class="token class-name">MessageConst</span><span class="token punctuation">.</span><span class="token constant">PROPERTY_REAL_TOPIC</span><span class="token punctuation">,</span> msgInner<span class="token punctuation">.</span><span class="token function">getTopic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//将消息应该写的queue存储到消息的properties中</span>
    <span class="token class-name">MessageAccessor</span><span class="token punctuation">.</span><span class="token function">putProperty</span><span class="token punctuation">(</span>msgInner<span class="token punctuation">,</span> <span class="token class-name">MessageConst</span><span class="token punctuation">.</span><span class="token constant">PROPERTY_REAL_QUEUE_ID</span><span class="token punctuation">,</span>
                                <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>msgInner<span class="token punctuation">.</span><span class="token function">getQueueId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//设置事务消息标志：Unknow，因为现在还没有接收到该事务消息的状态</span>
    msgInner<span class="token punctuation">.</span><span class="token function">setSysFlag</span><span class="token punctuation">(</span>
        <span class="token class-name">MessageSysFlag</span><span class="token punctuation">.</span><span class="token function">resetTransactionValue</span><span class="token punctuation">(</span>msgInner<span class="token punctuation">.</span><span class="token function">getSysFlag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">MessageSysFlag</span><span class="token punctuation">.</span><span class="token constant">TRANSACTION_NOT_TYPE</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//设置消息存储到的Topic: 统一事务消息Topic: RMQ_SYS_TRANS_HALF_TOPIC</span>
    msgInner<span class="token punctuation">.</span><span class="token function">setTopic</span><span class="token punctuation">(</span><span class="token class-name">TransactionalMessageUtil</span><span class="token punctuation">.</span><span class="token function">buildHalfTopic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//所有事务消息存放在该Topic的第一个队列里</span>
    msgInner<span class="token punctuation">.</span><span class="token function">setQueueId</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//将其余该消息的属性统一存放进来</span>
    msgInner<span class="token punctuation">.</span><span class="token function">setPropertiesString</span><span class="token punctuation">(</span><span class="token class-name">MessageDecoder</span><span class="token punctuation">.</span><span class="token function">messageProperties2String</span><span class="token punctuation">(</span>msgInner<span class="token punctuation">.</span><span class="token function">getProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> msgInner<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到所有的prepare消息都是存储在一个Topic中的一个队列里，该Topic就是上面的<strong>Half Topic</strong>，最后会对消息进行存储逻辑的操作，并调用<code>handlePutMessageResult</code>构造返回结果返回给生产者</p><h4 id="broker结束事务消息" tabindex="-1"><a class="header-anchor" href="#broker结束事务消息" aria-hidden="true">#</a> BROKER结束事务消息</h4><p>生产者在发送prepare消息后—&gt;执行本地事务逻辑—&gt;broker接收请求结束本次事务状态：Broker在接收请求后根据命令会执行<code>EndTransactionProcessor</code>的<code>processRequest</code>方法，该方法中下面的逻辑是真正处理事务消息状态的：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">OperationResult</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OperationResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">MessageSysFlag</span><span class="token punctuation">.</span><span class="token constant">TRANSACTION_COMMIT_TYPE</span> <span class="token operator">==</span> requestHeader<span class="token punctuation">.</span><span class="token function">getCommitOrRollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 获取RMQ_SYS_TRANS_HALF_TOPIC中的prepare消息</span>
    result <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>brokerController<span class="token punctuation">.</span><span class="token function">getTransactionalMessageService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">commitMessage</span><span class="token punctuation">(</span>requestHeader<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">getResponseCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">ResponseCode</span><span class="token punctuation">.</span><span class="token constant">SUCCESS</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token comment">// 校验消息是否正确：Half中的该消息是不是真正的本次请求处理的消息</span>
        <span class="token class-name">RemotingCommand</span> res <span class="token operator">=</span> <span class="token function">checkPrepareMessage</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">getPrepareMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> requestHeader<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">ResponseCode</span><span class="token punctuation">.</span><span class="token constant">SUCCESS</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

            <span class="token comment">// 将prepare消息转换为原消息，该消息的Topic就是真正消息的Topic</span>
            <span class="token class-name">MessageExtBrokerInner</span> msgInner <span class="token operator">=</span> <span class="token function">endMessageTransaction</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">getPrepareMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            msgInner<span class="token punctuation">.</span><span class="token function">setSysFlag</span><span class="token punctuation">(</span><span class="token class-name">MessageSysFlag</span><span class="token punctuation">.</span><span class="token function">resetTransactionValue</span><span class="token punctuation">(</span>msgInner<span class="token punctuation">.</span><span class="token function">getSysFlag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> requestHeader<span class="token punctuation">.</span><span class="token function">getCommitOrRollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            msgInner<span class="token punctuation">.</span><span class="token function">setQueueOffset</span><span class="token punctuation">(</span>requestHeader<span class="token punctuation">.</span><span class="token function">getTranStateTableOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            msgInner<span class="token punctuation">.</span><span class="token function">setPreparedTransactionOffset</span><span class="token punctuation">(</span>requestHeader<span class="token punctuation">.</span><span class="token function">getCommitLogOffset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            msgInner<span class="token punctuation">.</span><span class="token function">setStoreTimestamp</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">getPrepareMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getStoreTimestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">MessageAccessor</span><span class="token punctuation">.</span><span class="token function">clearProperty</span><span class="token punctuation">(</span>msgInner<span class="token punctuation">,</span> <span class="token class-name">MessageConst</span><span class="token punctuation">.</span><span class="token constant">PROPERTY_TRANSACTION_PREPARED</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token comment">//将消息发送到真正的Topic里，该消息可以开始下发给消费者</span>
            <span class="token class-name">RemotingCommand</span> sendResult <span class="token operator">=</span> <span class="token function">sendFinalMessage</span><span class="token punctuation">(</span>msgInner<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>sendResult<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">ResponseCode</span><span class="token punctuation">.</span><span class="token constant">SUCCESS</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">//将消息放入RMQ_SYS_TRANS_OP_HALF_TOPIC</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>brokerController<span class="token punctuation">.</span><span class="token function">getTransactionalMessageService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">deletePrepareMessage</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">getPrepareMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">return</span> sendResult<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">MessageSysFlag</span><span class="token punctuation">.</span><span class="token constant">TRANSACTION_ROLLBACK_TYPE</span> <span class="token operator">==</span> requestHeader<span class="token punctuation">.</span><span class="token function">getCommitOrRollback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 同commitMessage方法一样，返回真正的操作的消息：将RMQ_SYS_TRANS_HALF_TOPIC中的该消息还原为原消息</span>
    result <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>brokerController<span class="token punctuation">.</span><span class="token function">getTransactionalMessageService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rollbackMessage</span><span class="token punctuation">(</span>requestHeader<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">getResponseCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">ResponseCode</span><span class="token punctuation">.</span><span class="token constant">SUCCESS</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">RemotingCommand</span> res <span class="token operator">=</span> <span class="token function">checkPrepareMessage</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">getPrepareMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> requestHeader<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">getCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">ResponseCode</span><span class="token punctuation">.</span><span class="token constant">SUCCESS</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 将消息放入RMQ_SYS_TRANS_OP_HALF_TOPIC</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>brokerController<span class="token punctuation">.</span><span class="token function">getTransactionalMessageService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">deletePrepareMessage</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">getPrepareMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> res<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该方法会判断本次事务的最终状态，如果是COMMIT：</p><ol><li>获取<strong>RMQ_SYS_TRANS_HALF_TOPIC</strong>中的消息</li><li>将该消息转换为原消息</li><li>将消息写入到真正的TOPIC里，这里是事务消息的真正落盘，从而消息可以被消费者消费到</li><li>如果落盘成功，则删除prepare消息，其实是将消息写入到<strong>RMQ_SYS_TRANS_OP_HALF_TOPIC</strong>里，该消息的内容就是这条消息在<strong>RMQ_SYS_TRANS_HALF_TOPIC</strong>队列里的offset，原因见后面的分析</li></ol><p>如果是ROOLBACK，则直接将消息转换为原消息，所以在真正的TOPIC看不到ROOLBACK的消息，并写入到<strong>RMQ_SYS_TRANS_OP_HALF_TOPIC</strong>里</p><h4 id="事务消息回查" tabindex="-1"><a class="header-anchor" href="#事务消息回查" aria-hidden="true">#</a> 事务消息回查</h4><p>在RocketMQ中，消息都是顺序写随机读的，以offset来记录消息的存储位置与消费位置，所以对于事务消息的半事务消息来说，不可能做到物理删除，broker启动时每间隔60s会开始检查一下有哪些半事务消息需要回查，从上面的分析我们知道，所有半事务消息都存储在<strong>RMQ_SYS_TRANS_HALF_TOPIC</strong>中，那么如何从该Topic中取出需要回查的消息进行回查呢？这就需要<strong>RMQ_SYS_TRANS_OP_HALF_TOPIC</strong>以及一个内部的消费进度计算出需要回查的半事务消息进行回查：</p><ul><li><strong>RMQ_SYS_TRANS_HALF_TOPIC</strong>：建一个队列，存储所有的半事务消息</li><li><strong>RMQ_SYS_TRANS_OP_HALF_TOPIC</strong>：建立的对列数与<strong>RMQ_SYS_TRANS_HALF_TOPIC</strong>相同，存储所有已经确定状态的半事务消息（rollback与commit状态），消息内容是该条消息在<strong>RMQ_SYS_TRANS_HALF_TOPIC</strong>的Offset</li><li><strong>RMQ_SYS_TRANS_HALF_TOPIC消费进度</strong>：默认消费者是<strong>CID_RMQ_SYS_TRANS</strong>，每次取半事务消息判断回查时，从该消费进度开始依次获取消息。</li><li><strong>RMQ_SYS_TRANS_OP_HALF_TOPIC消费进度</strong>：默认消费者是<strong>CID_RMQ_SYS_TRANS</strong>，每次获取半事务消息都需要判断是否在RMQ_SYS_TRANS_OP_HALF_TOPIC中已存在该消息了，若存在表示该半事务消息已结束流程，不需要再进行事务回查，每次判断都是从RMQ_SYS_TRANS_OP_HALF_TOPIC中获取一定消息数量出来进行对比的，获取的消息就是从RMQ_SYS_TRANS_OP_HALF_TOPIC中该消费进度开始获取的，最大一次获取32条。</li></ul><p>broker在启动时会启动线程回查的服务，在<code>TransactionMessageCheckService</code>的<code>run</code>方法中，该方法会执行到onWaitEnd方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onWaitEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 获取超时时间 6s</span>
    <span class="token keyword">long</span> timeout <span class="token operator">=</span> brokerController<span class="token punctuation">.</span><span class="token function">getBrokerConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTransactionTimeOut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 获取最大检测次数 15次</span>
    <span class="token keyword">int</span> checkMax <span class="token operator">=</span> brokerController<span class="token punctuation">.</span><span class="token function">getBrokerConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTransactionCheckMax</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 获取当前时间</span>
    <span class="token keyword">long</span> begin <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Begin to check prepare message, begin time:{}&quot;</span><span class="token punctuation">,</span> begin<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//开始检测</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>brokerController<span class="token punctuation">.</span><span class="token function">getTransactionalMessageService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">check</span><span class="token punctuation">(</span>timeout<span class="token punctuation">,</span> checkMax<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>brokerController<span class="token punctuation">.</span><span class="token function">getTransactionalMessageCheckListener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;End to check prepare message, consumed time:{}&quot;</span><span class="token punctuation">,</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> begin<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该方法的最后会执行到<code>TransactionMessageServiceImpl</code>的<code>check</code>方法，该方法就是真正执行事务回查检测的方法，该方法的主要作用就是计算出需要回查的prepare消息进行事务回查，大致逻辑是：</p><ul><li>获取<strong>RMQ_SYS_TRANS_HALF_TOPIC</strong>的所有队列，循环队列开始检测需要获取的半事务消息，实际上<strong>RMQ_SYS_TRANS_HALF_TOPIC</strong>只有一个队列。</li><li>获取<strong>RMQ_SYS_TRANS_HALF_TOPIC</strong>与<strong>RMQ_SYS_TRANS_OP_HALF_TOPIC</strong>的消费进度。</li><li>调用<code>fillOpRemoveMap</code>方法，获取<strong>RMQ_SYS_TRANS_OP_HALF_TOPIC</strong>中已完成的半事务消息。</li><li>从<strong>RMQ_SYS_TRANS_HALF_TOPIC</strong>中当前消费进度依次获取消息，与第3步获取的已结束的半事务消息进行对比，判断是否进行回查：</li><li>如果<strong>RMQ_SYS_TRANS_OP_HALF_TOPIC</strong>消息中包含该消息，则不进行回查，</li><li>如果不包含，获取<strong>RMQ_SYS_TRANS_HALF_TOPIC</strong>中的该消息，判断写入时间是否符合回查条件，若是新消息则不处理下次处理，并将消息重新写入<strong>RMQ_SYS_TRANS_HALF_TOPIC</strong>，判断回查次数是否小于15次，写入时间是否小于72h，如果不满足就丢弃消息，若满足则更新回查次数，并将消息重新写入<strong>RMQ_SYS_TRANS_HALF_TOPIC</strong>并进行事务回查，</li><li>在循环完后重新更新<strong>RMQ_SYS_TRANS_HALF_TOPIC</strong>与<strong>RMQ_SYS_TRANS_OP_HALF_TOPIC</strong>中的消费进度，下次判断回查逻辑时，将从最新的消费进度获取信息</li></ul><h2 id="_3-使用规则" tabindex="-1"><a class="header-anchor" href="#_3-使用规则" aria-hidden="true">#</a> 3. 使用规则</h2><h4 id="生产消息规则" tabindex="-1"><a class="header-anchor" href="#生产消息规则" aria-hidden="true">#</a> 生产消息规则</h4><ul><li><p>事务消息发送完成本地事务后，可在<code>execute</code>方法中返回以下三种状态：</p><ul><li><code>TransactionStatus.CommitTransaction</code>：提交事务，允许消费者消费该消息。</li><li><code>TransactionStatus.RollbackTransaction</code>：回滚事务，消息将被丢弃不允许消费。</li><li><code>TransactionStatus.Unknow</code>：暂时无法判断状态，等待固定时间以后消息队列服务端根据回查规则向生产者进行消息回查。</li></ul></li><li><p>通过<code>ONSFactory.createTransactionProducer</code>创建事务消息的Producer时必须指定<code>LocalTransactionChecker</code>的实现类，处理异常情况下事务消息的回查。</p></li><li><p>回查规则：本地事务执行完成后，若消息队列服务端收到的本地事务返回状态为<code>TransactionStatus.Unknow</code>，或生产者应用退出导致本地事务未提交任何状态。则消息队列服务端会向消息生产者发起事务回查，第一次回查后仍未获取到事务状态，则之后每隔一段时间会再次回查。</p><ul><li><p>回查间隔时间：系统默认每隔30秒发起一次定时任务，对未提交的半事务消息进行回查，共持续12小时。</p></li><li><p>第一次消息回查最快时间：该参数支持自定义设置。若指定消息未达到设置的最快回查时间前，系统默认每隔30秒一次的回查任务不会检查该消息。</p><p>以Java为例，以下设置表示：第一次回查的最快时间为60秒。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Message</span> message <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Message</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
message<span class="token punctuation">.</span><span class="token function">putUserProperties</span><span class="token punctuation">(</span><span class="token class-name">PropertyKeyConst<span class="token punctuation">.</span>CheckImmunityTimeInSeconds</span><span class="token punctuation">,</span><span class="token string">&quot;60&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>因为系统默认的回查间隔，第一次消息回查的实际时间会向后有0秒~30秒的浮动。</p><p>例如：指定消息的第一次消息最快回查时间设置为60秒，系统在第58秒时达到定时的回查时间，但设置的60秒未到，所以该消息不在本次回查范围内。等待间隔30秒后，下一次的系统回查时间在第88秒，该消息才符合条件进行第一次回查，距设置的最快回查时间延后了28秒。</p></blockquote></li></ul></li></ul><h4 id="消费消息规则" tabindex="-1"><a class="header-anchor" href="#消费消息规则" aria-hidden="true">#</a> 消费消息规则</h4><ul><li>事务消息的Group ID不能与其他类型消息的Group ID共用。与其他类型的消息不同，事务消息有回查机制，回查时消息队列RocketMQ版服务端会根据Group ID去查询生产者客户端。</li></ul><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章" aria-hidden="true">#</a> 参考文章</h2>`,35),k={href:"https://github.com/Cicizz/binary/blob/master/RocketMQ/RocketMQ%E4%BA%8B%E5%8A%A1%E6%B6%88%E6%81%AF/RocketMQ%E6%98%AF%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E4%BA%8B%E5%8A%A1%E6%B6%88%E6%81%AF%E7%9A%84.md",target:"_blank",rel:"noopener noreferrer"},d=n("li",null,[n("p",null,"https://help.aliyun.com/document_detail/43348.html")],-1),m=n("li",null,[n("p",null,"https://github.com/apache/rocketmq/blob/master/docs/cn/RocketMQ_Example.md")],-1);function v(g,_){const s=t("ExternalLinkIcon");return e(),p("div",null,[r,n("ul",null,[n("li",null,[n("p",null,[n("a",k,[o("RocketMQ是如何实现事务消息的"),c(s)])])]),d,m])])}const R=a(u,[["render",v],["__file","RocketMQ的事务消息.html.vue"]]);export{R as default};
