import{_ as n,o as s,c as a,d as t}from"./app-1a00d703.js";const p={},e=t(`<h2 id="sphu-entry-入口" tabindex="-1"><a class="header-anchor" href="#sphu-entry-入口" aria-hidden="true">#</a> SphU.entry 入口</h2><p>从<code>SphU.entry()</code>方法向下执行，会进入到下面这个方法中：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code> <span class="token keyword">private</span> <span class="token class-name">Entry</span> <span class="token function">entryWithPriority</span><span class="token punctuation">(</span><span class="token class-name">ResourceWrapper</span> resourceWrapper<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">,</span> <span class="token keyword">boolean</span> prioritized<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span>
        <span class="token keyword">throws</span> <span class="token class-name">BlockException</span> <span class="token punctuation">{</span>
        <span class="token class-name">Context</span> context <span class="token operator">=</span> <span class="token class-name">ContextUtil</span><span class="token punctuation">.</span><span class="token function">getContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>context <span class="token keyword">instanceof</span> <span class="token class-name">NullContext</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// The {@link NullContext} indicates that the amount of context has exceeded the threshold,</span>
            <span class="token comment">// so here init the entry only. No rule checking will be done.</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CtEntry</span><span class="token punctuation">(</span>resourceWrapper<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">if</span> <span class="token punctuation">(</span>context <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// Using default context.</span>
            context <span class="token operator">=</span> <span class="token class-name">InternalContextUtil</span><span class="token punctuation">.</span><span class="token function">internalEnter</span><span class="token punctuation">(</span><span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">CONTEXT_DEFAULT_NAME</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// Global switch is close, no rule checking will do.</span>
        <span class="token comment">// 1. 全局开关关闭，说明没有规则检查，直接返回一个CtEntry对象，不再进行后续的限流检测</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">ON</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CtEntry</span><span class="token punctuation">(</span>resourceWrapper<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 2. 根据包装过的资源获取对应的SlotChain</span>
        <span class="token class-name">ProcessorSlot</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> chain <span class="token operator">=</span> <span class="token function">lookProcessChain</span><span class="token punctuation">(</span>resourceWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">/*
         * Means amount of resources (slot chain) exceeds {@link Constants.MAX_SLOT_CHAIN_SIZE},
         * so no rule checking will be done.
         */</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>chain <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">CtEntry</span><span class="token punctuation">(</span>resourceWrapper<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> context<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token class-name">Entry</span> e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CtEntry</span><span class="token punctuation">(</span>resourceWrapper<span class="token punctuation">,</span> chain<span class="token punctuation">,</span> context<span class="token punctuation">,</span> count<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
            <span class="token comment">// 3. 执行SlotChain的entry方法，如果SlotChain的entry方法抛出了BlockException，则将该异常继续向上抛出，如果SlotChain的entry方法正常执行了，则最后会将该entry对象返回</span>
            chain<span class="token punctuation">.</span><span class="token function">entry</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> resourceWrapper<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> count<span class="token punctuation">,</span> prioritized<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BlockException</span> e1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span>count<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 4. 如果上层方法捕获了BlockException，则说明请求被限流了，否则请求能正常执行</span>
            <span class="token keyword">throw</span> e1<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> e1<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// This should not happen, unless there are errors existing in Sentinel internal.</span>
            <span class="token class-name">RecordLog</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;Sentinel unexpected exception&quot;</span><span class="token punctuation">,</span> e1<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> e<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>该方法主要实现了下面几点：</p><ol><li>全局开关关闭，说明没有规则检查，直接返回一个 CtEntry 对象，不再进行后续的限流检测。</li><li>根据包装过的资源获取对应的 SlotChain。</li><li>执行 SlotChain 的 entry 方法，如果 SlotChain 的 entry 方法抛出了 BlockException，则将该异常继续向上抛出，如果 SlotChain 的 entry 方法正常执行了，则最后会将该 entry 对象返回。</li><li>如果上层方法捕获了 BlockException，则说明请求被限流了，否则请求能正常执行。</li></ol><h2 id="slotchain-的链路获取" tabindex="-1"><a class="header-anchor" href="#slotchain-的链路获取" aria-hidden="true">#</a> SlotChain 的链路获取</h2><p>重点关注一下<strong>SlotChain</strong>链路的获取逻辑。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">ProcessorSlot</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token function">lookProcessChain</span><span class="token punctuation">(</span><span class="token class-name">ResourceWrapper</span> resourceWrapper<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 这里使用两次判断为null(双重检查锁或缓存机制)的原因如下：</span>
    <span class="token comment">// 假设有两个线程A，B同时到达第一个if，都为null，此时A线程进入synchronized</span>
    <span class="token comment">// 遇到第二个if，当然还是null，A线程就会执行第二个if里面的语句，创建一个chain，然后存到缓存中，退出synchronized</span>
    <span class="token comment">// B线程进入synchronized，获取chain，但此时缓存命中，就不用再执行第二个if里面的语句了，减少了synchronized锁的时间</span>
    <span class="token class-name">ProcessorSlotChain</span> chain <span class="token operator">=</span> chainMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>resourceWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>chain <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token constant">LOCK</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            chain <span class="token operator">=</span> chainMap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>resourceWrapper<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>chain <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// Entry size limit.</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>chainMap<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;=</span> <span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">MAX_SLOT_CHAIN_SIZE</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
				<span class="token comment">// 构造SlotChain</span>
                chain <span class="token operator">=</span> <span class="token class-name">SlotChainProvider</span><span class="token punctuation">.</span><span class="token function">newSlotChain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

               	<span class="token comment">// map扩容</span>
                <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ResourceWrapper</span><span class="token punctuation">,</span> <span class="token class-name">ProcessorSlotChain</span><span class="token punctuation">&gt;</span></span> newMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ResourceWrapper</span><span class="token punctuation">,</span> <span class="token class-name">ProcessorSlotChain</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>
                    chainMap<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                newMap<span class="token punctuation">.</span><span class="token function">putAll</span><span class="token punctuation">(</span>chainMap<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// 将资源和slot-chain映射</span>
                newMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>resourceWrapper<span class="token punctuation">,</span> chain<span class="token punctuation">)</span><span class="token punctuation">;</span>
                chainMap <span class="token operator">=</span> newMap<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> chain<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ProcessorSlotChain</span> <span class="token function">newSlotChain</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>slotChainBuilder <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> slotChainBuilder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// Resolve the slot chain builder SPI.</span>
    <span class="token comment">// 从com.alibaba.csp.sentinel.slotchain.ProcessorSlot文件中读取slot构建slot chain</span>
    slotChainBuilder <span class="token operator">=</span> <span class="token class-name">SpiLoader</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token class-name">SlotChainBuilder</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">loadFirstInstanceOrDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 确保slotChainBuilder不为null</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>slotChainBuilder <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Should not go through here.</span>
        <span class="token class-name">RecordLog</span><span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;[SlotChainProvider] Wrong state when resolving slot chain builder, using default&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        slotChainBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultSlotChainBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token class-name">RecordLog</span><span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;[SlotChainProvider] Global slot chain builder resolved: {}&quot;</span><span class="token punctuation">,</span>
                       slotChainBuilder<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCanonicalName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> slotChainBuilder<span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DefaultSlotChainBuilder</span> <span class="token keyword">implements</span> <span class="token class-name">SlotChainBuilder</span> <span class="token punctuation">{</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token class-name">ProcessorSlotChain</span> <span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">ProcessorSlotChain</span> chain <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultProcessorSlotChain</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ProcessorSlot</span><span class="token punctuation">&gt;</span></span> sortedSlotList <span class="token operator">=</span> <span class="token class-name">SpiLoader</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token class-name">ProcessorSlot</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">loadInstanceListSorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">ProcessorSlot</span> slot <span class="token operator">:</span> sortedSlotList<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>slot <span class="token keyword">instanceof</span> <span class="token class-name">AbstractLinkedProcessorSlot</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">RecordLog</span><span class="token punctuation">.</span><span class="token function">warn</span><span class="token punctuation">(</span><span class="token string">&quot;The ProcessorSlot(&quot;</span> <span class="token operator">+</span> slot<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCanonicalName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;) is not an instance of AbstractLinkedProcessorSlot, can&#39;t be added into ProcessorSlotChain&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">continue</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            chain<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">AbstractLinkedProcessorSlot</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> slot<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> chain<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在 Sentinel 里面，所有的资源都对应一个资源名称（<code>resourceName</code>），每次资源调用都会创建一个 <code>Entry</code> 对象。Entry 可以通过对主流框架的适配自动创建，也可以通过注解的方式或调用 <code>SphU</code> API 显式创建。Entry 创建的时候，同时也会创建一系列功能插槽（slot chain），这些插槽有不同的职责，例如:</p><ul><li><strong><code>NodeSelectorSlot</code></strong>：收集资源的路径，并将这些资源的调用路径，以树状结构存储起来，用于根据调用路径来限流降级。</li><li><strong><code>ClusterBuilderSlot</code></strong> ：用于存储资源的统计信息以及调用者信息，例如该资源的 RT, QPS, thread count 等等，这些信息将用作为多维度限流，降级的依据；</li><li><strong><code>StatisticSlot</code></strong> ：用于记录、统计不同纬度的 runtime 指标监控信息；</li><li><strong><code>SystemSlot</code></strong> ：通过系统的状态，来控制总的入口流量；</li><li><strong><code>AuthoritySlot</code></strong> ：根据配置的黑白名单和调用来源信息，来做黑白名单控制；</li><li><strong><code>FlowSlot</code></strong> ：用于根据预设的限流规则以及前面 slot 统计的状态，来进行流量控制；</li><li><strong><code>DegradeSlot</code></strong> ：通过统计信息以及预设的规则，来做熔断降级；</li></ul><p>下面借用官网的图片：官方链接如下：https://sentinelguard.io/zh-cn/docs/basic-implementation.html</p><p><img src="https://floweryu-image.oss-cn-shanghai.aliyuncs.com/image202307091906761.png" alt="image-20220801191458948"></p><p>上面 slot 的排序规则根据下面代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>sortedClassList<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Class</span><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">S</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">S</span><span class="token punctuation">&gt;</span></span> o1<span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">S</span><span class="token punctuation">&gt;</span></span> o2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Spi</span> spi1 <span class="token operator">=</span> o1<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">Spi</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> order1 <span class="token operator">=</span> spi1 <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> spi1<span class="token punctuation">.</span><span class="token function">order</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Spi</span> spi2 <span class="token operator">=</span> o2<span class="token punctuation">.</span><span class="token function">getAnnotation</span><span class="token punctuation">(</span><span class="token class-name">Spi</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> order2 <span class="token operator">=</span> spi2 <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> spi2<span class="token punctuation">.</span><span class="token function">order</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>order1<span class="token punctuation">,</span> order2<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中<code>spi2.order()</code>是<code>@Spi</code>注解定义的，每个 slot 的顺序如下，</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">ORDER_NODE_SELECTOR_SLOT</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">10000</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">ORDER_CLUSTER_BUILDER_SLOT</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">9000</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">ORDER_LOG_SLOT</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">8000</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">ORDER_STATISTIC_SLOT</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">7000</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">ORDER_AUTHORITY_SLOT</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">6000</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">ORDER_SYSTEM_SLOT</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">5000</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">ORDER_FLOW_SLOT</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2000</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">ORDER_DEFAULT_CIRCUIT_BREAKER_SLOT</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1500</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token constant">ORDER_DEGRADE_SLOT</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1000</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>整个调用链中最核心的就是 **<code>StatisticSlot</code>(<strong>用于记录、统计不同纬度的 runtime 指标监控信息) 以及</strong><code>FlowSlot</code>(**根据预设的限流规则以及前面 slot 统计的状态，来进行流量控制）</p><p>可以查看**<code>DefaultProcessorSlotChain.java</code>**类的源码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DefaultProcessorSlotChain</span> <span class="token keyword">extends</span> <span class="token class-name">ProcessorSlotChain</span> <span class="token punctuation">{</span>

    <span class="token comment">// 先创建头结点</span>
    <span class="token class-name">AbstractLinkedProcessorSlot</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> first <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AbstractLinkedProcessorSlot</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">entry</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">,</span> <span class="token class-name">ResourceWrapper</span> resourceWrapper<span class="token punctuation">,</span> <span class="token class-name">Object</span> t<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">,</span> <span class="token keyword">boolean</span> prioritized<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span>
            <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
            <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">fireEntry</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> resourceWrapper<span class="token punctuation">,</span> t<span class="token punctuation">,</span> count<span class="token punctuation">,</span> prioritized<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token annotation punctuation">@Override</span>
        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">exit</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">,</span> <span class="token class-name">ResourceWrapper</span> resourceWrapper<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">fireExit</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> resourceWrapper<span class="token punctuation">,</span> count<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token comment">// 创建尾结点，直接指向头结点</span>
    <span class="token class-name">AbstractLinkedProcessorSlot</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> end <span class="token operator">=</span> first<span class="token punctuation">;</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看出<strong>ProcessorSlotChain</strong>是一个链表，里面有两个<strong>AbstractLinkedProcessorSlot</strong>类型的链表：first 和 end，即链表的头结点和尾结点。</p><p><img src="https://floweryu-image.oss-cn-shanghai.aliyuncs.com/image202307091906376.png" alt="image-20220801191557361"></p><p>然后添加通过<code>addLast</code>方法添加节点</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addLast</span><span class="token punctuation">(</span><span class="token class-name">AbstractLinkedProcessorSlot</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> protocolProcessor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    end<span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span>protocolProcessor<span class="token punctuation">)</span><span class="token punctuation">;</span>	<span class="token comment">// 由于end=first，所以是在first.next下面添加节点</span>
    end <span class="token operator">=</span> protocolProcessor<span class="token punctuation">;</span>	<span class="token comment">// 然后调整end的指针指向新节点</span>
<span class="token punctuation">}</span>

<span class="token comment">// AbstractLinkedProcessorSlot抽象类中的方法</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setNext</span><span class="token punctuation">(</span><span class="token class-name">AbstractLinkedProcessorSlot</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://floweryu-image.oss-cn-shanghai.aliyuncs.com/image202307091906704.png" alt="image-20220801191607238"></p><p>然后依次类推，可以得到下面的链路 SlotChain：</p><p><img src="https://floweryu-image.oss-cn-shanghai.aliyuncs.com/image202307091906079.png" alt="image-20220801191620840"></p><h2 id="slotchain-的链路执行" tabindex="-1"><a class="header-anchor" href="#slotchain-的链路执行" aria-hidden="true">#</a> SlotChain 的链路执行</h2><p><code>lookProcessChain</code>方法获得的第一个<code>ProcessorSlotChain</code>的实例是<code>DefaultProcessorSlotChain</code>，那么执行 chain.entry 方法，就会执行<code>DefaultProcessorSlotChain</code>的<code>entry</code>方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">entry</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">,</span> <span class="token class-name">ResourceWrapper</span> resourceWrapper<span class="token punctuation">,</span> <span class="token class-name">Object</span> t<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">,</span> <span class="token keyword">boolean</span> prioritized<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span>
    <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
    <span class="token comment">// 触发下一个slot</span>
    first<span class="token punctuation">.</span><span class="token function">transformEntry</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> resourceWrapper<span class="token punctuation">,</span> t<span class="token punctuation">,</span> count<span class="token punctuation">,</span> prioritized<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>接着调用父类<code>AbstractLinkedProcessorSlot </code>的<code>transformEntry</code>方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 触发下一个节点entry逻辑</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">fireEntry</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">,</span> <span class="token class-name">ResourceWrapper</span> resourceWrapper<span class="token punctuation">,</span> <span class="token class-name">Object</span> obj<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">,</span> <span class="token keyword">boolean</span> prioritized<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span>
    <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>next <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        next<span class="token punctuation">.</span><span class="token function">transformEntry</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> resourceWrapper<span class="token punctuation">,</span> obj<span class="token punctuation">,</span> count<span class="token punctuation">,</span> prioritized<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">void</span> <span class="token function">transformEntry</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">,</span> <span class="token class-name">ResourceWrapper</span> resourceWrapper<span class="token punctuation">,</span> <span class="token class-name">Object</span> o<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">,</span> <span class="token keyword">boolean</span> prioritized<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span>
    <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
    <span class="token class-name">T</span> t <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">)</span>o<span class="token punctuation">;</span>
    <span class="token comment">// 触发节点entry逻辑</span>
    <span class="token function">entry</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> resourceWrapper<span class="token punctuation">,</span> t<span class="token punctuation">,</span> count<span class="token punctuation">,</span> prioritized<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>跟着代码<code>debug</code>可以知道，上面代码会触发第一个 slot 节点，也就是<code>NodeSelectorSlot</code>。这里先不介绍这个 slot 的具体逻辑。</p><h2 id="slot-中的-entry-逻辑" tabindex="-1"><a class="header-anchor" href="#slot-中的-entry-逻辑" aria-hidden="true">#</a> Slot 中的 entry 逻辑</h2><h3 id="滑动窗口限流原理" tabindex="-1"><a class="header-anchor" href="#滑动窗口限流原理" aria-hidden="true">#</a> 滑动窗口限流原理</h3><h4 id="从-statisticslot-中的-entry-进入" tabindex="-1"><a class="header-anchor" href="#从-statisticslot-中的-entry-进入" aria-hidden="true">#</a> 从 StatisticSlot 中的 entry 进入</h4><p><code>StaticSlot</code>主要是统计指标数据，用来给<code>FlowSlot</code>进行校验。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">entry</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">,</span> <span class="token class-name">ResourceWrapper</span> resourceWrapper<span class="token punctuation">,</span> <span class="token class-name">DefaultNode</span> node<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">,</span> <span class="token keyword">boolean</span> prioritized<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
        <span class="token class-name">Iterator</span> var8<span class="token punctuation">;</span>
        <span class="token class-name">ProcessorSlotEntryCallback</span> handler<span class="token punctuation">;</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
			<span class="token comment">// Do some checking.</span>
            <span class="token comment">// 1. 做一些检查，执行AuthoritySlot、SystemSlot、FlowSlot、DefaultCircuitBreakerSlot方法</span>
            <span class="token comment">// 如果规则不通过，就会抛出BlockException异常。反之，会在node中统计通过的请求数和线程数等信息。</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">fireEntry</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> resourceWrapper<span class="token punctuation">,</span> node<span class="token punctuation">,</span> count<span class="token punctuation">,</span> prioritized<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 执行到这里表示通过了检查，没有被限流</span>
            node<span class="token punctuation">.</span><span class="token function">increaseThreadNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 2. 记录通过规则的请求</span>
            node<span class="token punctuation">.</span><span class="token function">addPassRequest</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getCurEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getOriginNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                context<span class="token punctuation">.</span><span class="token function">getCurEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getOriginNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increaseThreadNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                context<span class="token punctuation">.</span><span class="token function">getCurEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getOriginNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addPassRequest</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span>resourceWrapper<span class="token punctuation">.</span><span class="token function">getEntryType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">EntryType</span><span class="token punctuation">.</span><span class="token constant">IN</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">ENTRY_NODE</span><span class="token punctuation">.</span><span class="token function">increaseThreadNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">ENTRY_NODE</span><span class="token punctuation">.</span><span class="token function">addPassRequest</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token class-name">Iterator</span> var13 <span class="token operator">=</span> <span class="token class-name">StatisticSlotCallbackRegistry</span><span class="token punctuation">.</span><span class="token function">getEntryCallbacks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">while</span><span class="token punctuation">(</span>var13<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">ProcessorSlotEntryCallback</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">DefaultNode</span><span class="token punctuation">&gt;</span></span> handler <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ProcessorSlotEntryCallback</span><span class="token punctuation">)</span>var13<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                handler<span class="token punctuation">.</span><span class="token function">onPass</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> resourceWrapper<span class="token punctuation">,</span> node<span class="token punctuation">,</span> count<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">PriorityWaitException</span> var10<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            node<span class="token punctuation">.</span><span class="token function">increaseThreadNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getCurEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getOriginNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                context<span class="token punctuation">.</span><span class="token function">getCurEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getOriginNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increaseThreadNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span>resourceWrapper<span class="token punctuation">.</span><span class="token function">getEntryType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">EntryType</span><span class="token punctuation">.</span><span class="token constant">IN</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">ENTRY_NODE</span><span class="token punctuation">.</span><span class="token function">increaseThreadNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            var8 <span class="token operator">=</span> <span class="token class-name">StatisticSlotCallbackRegistry</span><span class="token punctuation">.</span><span class="token function">getEntryCallbacks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">while</span><span class="token punctuation">(</span>var8<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                handler <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ProcessorSlotEntryCallback</span><span class="token punctuation">)</span>var8<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                handler<span class="token punctuation">.</span><span class="token function">onPass</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> resourceWrapper<span class="token punctuation">,</span> node<span class="token punctuation">,</span> count<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">BlockException</span> var11<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">BlockException</span> e <span class="token operator">=</span> var11<span class="token punctuation">;</span>
            context<span class="token punctuation">.</span><span class="token function">getCurEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setBlockError</span><span class="token punctuation">(</span>var11<span class="token punctuation">)</span><span class="token punctuation">;</span>
            node<span class="token punctuation">.</span><span class="token function">increaseBlockQps</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>context<span class="token punctuation">.</span><span class="token function">getCurEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getOriginNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                context<span class="token punctuation">.</span><span class="token function">getCurEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getOriginNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">increaseBlockQps</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">if</span> <span class="token punctuation">(</span>resourceWrapper<span class="token punctuation">.</span><span class="token function">getEntryType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">EntryType</span><span class="token punctuation">.</span><span class="token constant">IN</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">Constants</span><span class="token punctuation">.</span><span class="token constant">ENTRY_NODE</span><span class="token punctuation">.</span><span class="token function">increaseBlockQps</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            var8 <span class="token operator">=</span> <span class="token class-name">StatisticSlotCallbackRegistry</span><span class="token punctuation">.</span><span class="token function">getEntryCallbacks</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">while</span><span class="token punctuation">(</span>var8<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                handler <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ProcessorSlotEntryCallback</span><span class="token punctuation">)</span>var8<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                handler<span class="token punctuation">.</span><span class="token function">onBlocked</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> context<span class="token punctuation">,</span> resourceWrapper<span class="token punctuation">,</span> node<span class="token punctuation">,</span> count<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>

            <span class="token keyword">throw</span> e<span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> var12<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            context<span class="token punctuation">.</span><span class="token function">getCurEntry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setError</span><span class="token punctuation">(</span>var12<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">throw</span> var12<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>node.addPassRequest</code>方法是在<code>fireEntry</code>执行后才执行的，也就是说，当前请求通过了 sentinel 的流控规则，此时需要将当次请求记录下来，也就是执行<code>addPassRequest</code>方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addPassRequest</span><span class="token punctuation">(</span><span class="token keyword">int</span> count<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">addPassRequest</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>clusterNode<span class="token punctuation">.</span><span class="token function">addPassRequest</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面方法在<code>DefaultNode</code>对象中。</p><ul><li><code>DefaultNode</code>：保存着某个 resource 在某个 context 中的实时指标，每个 DefaultNode 都指向一个 ClusterNode</li><li><code>ClusterNode</code>：保存着某个 resource 在所有 context 中实时指标的总和，同样的 resource 会共享同一个 ClusterNode，不管他在哪个 context 中</li></ul><p>在<code>StatisticNode</code>类中对<code>ArrayMetric</code>进行了初始化：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">this</span><span class="token punctuation">.</span>rollingCounterInSecond <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayMetric</span><span class="token punctuation">(</span><span class="token class-name">SampleCountProperty</span><span class="token punctuation">.</span><span class="token constant">SAMPLE_COUNT</span><span class="token punctuation">,</span> <span class="token class-name">IntervalProperty</span><span class="token punctuation">.</span><span class="token constant">INTERVAL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>rollingCounterInMinute <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayMetric</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">60000</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addPassRequest</span><span class="token punctuation">(</span><span class="token keyword">int</span> count<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>rollingCounterInSecond<span class="token punctuation">.</span><span class="token function">addPass</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>rollingCounterInMinute<span class="token punctuation">.</span><span class="token function">addPass</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>增加指标用的 addPass 方法是一个<code>ArrayMetric</code>的类：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">LeapArray</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MetricBucket</span><span class="token punctuation">&gt;</span></span> data<span class="token punctuation">;</span>

<span class="token comment">// SAMPLE_COUNT=2  INTERVAL=1000 上面传递的静态变量</span>
<span class="token keyword">public</span> <span class="token class-name">ArrayMetric</span><span class="token punctuation">(</span><span class="token keyword">int</span> sampleCount<span class="token punctuation">,</span> <span class="token keyword">int</span> intervalInMs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OccupiableBucketLeapArray</span><span class="token punctuation">(</span>sampleCount<span class="token punctuation">,</span> intervalInMs<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addPass</span><span class="token punctuation">(</span><span class="token keyword">int</span> count<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">WindowWrap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MetricBucket</span><span class="token punctuation">&gt;</span></span> wrap <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">currentWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">MetricBucket</span><span class="token punctuation">)</span>wrap<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addPass</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里就跟窗口有关系了，这里使用<code>data</code>来获取当前窗口，窗口大小为 2。data 的类型是<code>MetricBucket</code>对象，用来保存各项指标，变量如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">LongAdder</span><span class="token punctuation">[</span><span class="token punctuation">]</span> counters<span class="token punctuation">;</span>
<span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">long</span> minRt<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><code>WindowWrap</code>对象的变量如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 时间窗口的长度</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> windowLengthInMs<span class="token punctuation">;</span>
<span class="token comment">// 时间窗口的开始时间，单位是毫秒</span>
<span class="token keyword">private</span> <span class="token keyword">long</span> windowStart<span class="token punctuation">;</span>
<span class="token comment">//时间窗口的内容，在 WindowWrap 中是用泛型表示这个值的，但实际上就是 MetricBucket 类, 参考上面代码</span>
<span class="token keyword">private</span> <span class="token class-name">T</span> value<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><code>LeapArray</code>对象如下：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">LeapArray</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span>
    <span class="token comment">// 时间窗口的长度</span>
    <span class="token keyword">protected</span> <span class="token keyword">int</span> windowLengthInMs<span class="token punctuation">;</span>
    <span class="token comment">// 采样窗口的个数</span>
    <span class="token keyword">protected</span> <span class="token keyword">int</span> sampleCount<span class="token punctuation">;</span>
    <span class="token comment">// 以毫秒为单位的时间间隔</span>
    <span class="token keyword">protected</span> <span class="token keyword">int</span> intervalInMs<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">double</span> intervalInSecond<span class="token punctuation">;</span>
    <span class="token comment">// 采样的时间窗口数组</span>
    <span class="token keyword">protected</span> <span class="token keyword">final</span> <span class="token class-name">AtomicReferenceArray</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">WindowWrap</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> array<span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">ReentrantLock</span> updateLock <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReentrantLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token class-name">LeapArray</span><span class="token punctuation">(</span><span class="token keyword">int</span> sampleCount<span class="token punctuation">,</span> <span class="token keyword">int</span> intervalInMs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">AssertUtil</span><span class="token punctuation">.</span><span class="token function">isTrue</span><span class="token punctuation">(</span>sampleCount <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&quot;bucket count is invalid: &quot;</span> <span class="token operator">+</span> sampleCount<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">AssertUtil</span><span class="token punctuation">.</span><span class="token function">isTrue</span><span class="token punctuation">(</span>intervalInMs <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&quot;total time interval of the sliding window should be positive&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">AssertUtil</span><span class="token punctuation">.</span><span class="token function">isTrue</span><span class="token punctuation">(</span>intervalInMs <span class="token operator">%</span> sampleCount <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&quot;time span needs to be evenly divided&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>windowLengthInMs <span class="token operator">=</span> intervalInMs <span class="token operator">/</span> sampleCount<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>intervalInMs <span class="token operator">=</span> intervalInMs<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>intervalInSecond <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>intervalInMs <span class="token operator">/</span> <span class="token number">1000.0D</span><span class="token punctuation">;</span>
        <span class="token comment">// 时间窗口的采样个数，默认为2个采样窗口</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>sampleCount <span class="token operator">=</span> sampleCount<span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicReferenceArray</span><span class="token punctuation">(</span>sampleCount<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在<code>LeapArray</code>中创建了一个<code>AtomicReferenceArray</code>数组，用来对时间窗口中的统计值进行采样。通过采样的统计值计算出平均值，即最终的实时指标的值。</p><p>重点是<code>this.data.currentWindow();</code>方法</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">calculateTimeIdx</span><span class="token punctuation">(</span><span class="token comment">/*@Valid*/</span> <span class="token keyword">long</span> timeMillis<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 获取时间窗口个数</span>
    <span class="token keyword">long</span> timeId <span class="token operator">=</span> timeMillis <span class="token operator">/</span> windowLengthInMs<span class="token punctuation">;</span>
    <span class="token comment">// Calculate current index so we can map the timestamp to the leap array.</span>
    <span class="token comment">// 获取当前时间在实际窗口array数组中的索引</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>timeId <span class="token operator">%</span> array<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">protected</span> <span class="token keyword">long</span> <span class="token function">calculateWindowStart</span><span class="token punctuation">(</span><span class="token comment">/*@Valid*/</span> <span class="token keyword">long</span> timeMillis<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 获取时间窗口的起始时间。如下：</span>
    <span class="token comment">// 时间点：0    1    2   3   4   5   6</span>
    <span class="token comment">// 时间窗口windowLengthInMs为：2</span>
    <span class="token comment">// 当前时间为timeMillis为：5</span>
    <span class="token comment">// 当前时间所在的窗口起始时间= 5 - 5 % 2 = 4</span>
    <span class="token comment">// timeMillis % windowLengthInMs = 当前时间在当前时间窗口已经跑过的距离</span>
    <span class="token keyword">return</span> timeMillis <span class="token operator">-</span> timeMillis <span class="token operator">%</span> windowLengthInMs<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">// 传进来的是当前时间</span>
<span class="token keyword">public</span> <span class="token class-name">WindowWrap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">currentWindow</span><span class="token punctuation">(</span><span class="token keyword">long</span> timeMillis<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>timeMillis <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
		<span class="token comment">// 时间窗口个数对2（假如默认值）取模</span>
        <span class="token keyword">int</span> idx <span class="token operator">=</span> <span class="token function">calculateTimeIdx</span><span class="token punctuation">(</span>timeMillis<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// Calculate current bucket start time.</span>
    	<span class="token comment">// 时间窗口的起始时间</span>
        <span class="token keyword">long</span> windowStart <span class="token operator">=</span> <span class="token function">calculateWindowStart</span><span class="token punctuation">(</span>timeMillis<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">/*
         * Get bucket item at given time from the array.
         *
         * (1) Bucket is absent, then just create a new bucket and CAS update to circular array.
         * (2) Bucket is up-to-date, then just return the bucket.
         * (3) Bucket is deprecated, then reset current bucket and clean all deprecated buckets.
         */</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 根据索引获取缓存的时间窗口</span>
            <span class="token class-name">WindowWrap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> old <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>idx<span class="token punctuation">)</span><span class="token punctuation">;</span>
           	<span class="token comment">// 这里如果没有从缓存中取到，就会创建一个新的时间窗口，所以array的长度不能太大，不然不容易命中</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>old <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">/*
                 *     B0       B1      B2    NULL      B4
                 * ||_______|_______|_______|_______|_______||___
                 * 200     400     600     800     1000    1200  timestamp
                 *                             ^
                 *                          time=888
                 *            bucket is empty, so create new and update
                 *
                 * If the old bucket is absent, then we create a new bucket at {@code windowStart},
                 * then try to update circular array via a CAS operation. Only one thread can
                 * succeed to update, while other threads yield its time slice.
                 */</span>
                <span class="token comment">// (1) 没取到缓存，则创建一个新的时间窗口</span>
                <span class="token class-name">WindowWrap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> window <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WindowWrap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>windowLengthInMs<span class="token punctuation">,</span> windowStart<span class="token punctuation">,</span> <span class="token function">newEmptyBucket</span><span class="token punctuation">(</span>timeMillis<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token comment">// 通过CAS将新创建的窗口置换到缓存数组中去</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>array<span class="token punctuation">.</span><span class="token function">compareAndSet</span><span class="token punctuation">(</span>idx<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> window<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 设置成功就返回该窗口</span>
                    <span class="token keyword">return</span> window<span class="token punctuation">;</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 否则当前线程让出时间片，等待</span>
                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token keyword">yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token comment">// (2) 如果当前窗口的开始时间与old的开始时间相等，则直接返回old窗口</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>windowStart <span class="token operator">==</span> old<span class="token punctuation">.</span><span class="token function">windowStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">/*
                 *     B0       B1      B2     B3      B4
                 * ||_______|_______|_______|_______|_______||___
                 * 200     400     600     800     1000    1200  timestamp
                 *                             ^
                 *                          time=888
                 *            startTime of Bucket 3: 800, so it&#39;s up-to-date
                 *
                 * If current {@code windowStart} is equal to the start timestamp of old bucket,
                 * that means the time is within the bucket, so directly return the bucket.
                 */</span>
                <span class="token keyword">return</span> old<span class="token punctuation">;</span>
            <span class="token comment">// 如果当前时间窗口的开始时间已经超过了old窗口的开始时间，则放弃old窗口</span>
            <span class="token comment">// 并将time设置为新的时间窗口的开始时间，此时窗口向前滑动</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>windowStart <span class="token operator">&gt;</span> old<span class="token punctuation">.</span><span class="token function">windowStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">/*
                 *   (old)
                 *             B0       B1      B2    NULL      B4
                 * |_______||_______|_______|_______|_______|_______||___
                 * ...    1200     1400    1600    1800    2000    2200  timestamp
                 *                              ^
                 *                           time=1676
                 *          startTime of Bucket 2: 400, deprecated, should be reset
                 *
                 * If the start timestamp of old bucket is behind provided time, that means
                 * the bucket is deprecated. We have to reset the bucket to current {@code windowStart}.
                 * Note that the reset and clean-up operations are hard to be atomic,
                 * so we need a update lock to guarantee the correctness of bucket update.
                 *
                 * The update lock is conditional (tiny scope) and will take effect only when
                 * bucket is deprecated, so in most cases it won&#39;t lead to performance loss.
                 */</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>updateLock<span class="token punctuation">.</span><span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">try</span> <span class="token punctuation">{</span>
                        <span class="token comment">// (3) Successfully get the update lock, now we reset the bucket.</span>
                        <span class="token keyword">return</span> <span class="token function">resetWindowTo</span><span class="token punctuation">(</span>old<span class="token punctuation">,</span> windowStart<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
                        updateLock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token comment">// Contention failed, the thread will yield its time slice to wait for bucket available.</span>
                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token keyword">yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>windowStart <span class="token operator">&lt;</span> old<span class="token punctuation">.</span><span class="token function">windowStart</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// Should not go through here, as the provided time is already behind.</span>
                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">WindowWrap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>windowLengthInMs<span class="token punctuation">,</span> windowStart<span class="token punctuation">,</span> <span class="token function">newEmptyBucket</span><span class="token punctuation">(</span>timeMillis<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面代码实际可以分成以下几步：</p><ol><li>根据当前时间，算出该时间的 timeId，并根据 timeId 算出当前窗口在采样窗口数组中的索引 idx。</li><li>根据当前时间算出当前窗口的应该对应的开始时间 time，以毫秒为单位。</li><li>根据索引 idx，在采样窗口数组中取得一个时间窗口。</li><li>循环判断直到获取到一个当前时间窗口 old 。 <ol><li>如果 old 为空，则创建一个时间窗口，并将它插入到 array 的第 idx 个位置，array 上面已经分析过了，是一个 AtomicReferenceArray。</li><li>如果当前窗口的开始时间 time 与 old 的开始时间相等，那么说明 old 就是当前时间窗口，直接返回 old。</li><li>如果当前窗口的开始时间 time 大于 old 的开始时间，则说明 old 窗口已经过时了，将 old 的开始时间更新为最新值：time，进入下一次得循环再判断当前窗口的开始时间 time 与 old 的开始时间相等的时候返回。</li><li>如果当前窗口的开始时间 time 小于 old 的开始时间，实际上这种情况是不可能存在的，因为 time 是当前时间，old 是过去的一个时间。</li></ol></li></ol><p><strong>timeId（即时间窗口的个数）是会随着时间的增长而增加，当前时间每增长一个 windowLength 的长度，timeId 就加 1。但是 idx 不会增长，只会在 0 和 1 之间变换，因为 array 数组的长度是 2，只有两个采样时间窗口。</strong></p><p>为什么默认只有两个采样窗口？可能是因为时间窗口中保存着很多统计数据，如果时间窗口过多的话，一方面会占用过多内存，另一方面时间窗口过多就意味着时间窗口的长度会变小，如果时间窗口长度变小，就会导致时间窗口过于频繁的滑动。</p><p><strong>下面看看 currentWindow 代码逻辑</strong>：</p><p>根据当前时间除于 <code>windowLength </code>得到一个 timeId，再用 timeId 跟取样窗口的长度进行一个取模，那么值一定会落在 0，1 两个位置的其中一个。然后根据当前时间算出当前窗口的应该对应的开始时间 time。由于刚刚开始的时候 array 是空的，那么获取到的 old 应当是 null，那么会创建一个新的实例，用图看一下初始化的 LeapArray：</p><p><img src="https://floweryu-image.oss-cn-shanghai.aliyuncs.com/image202307091850289.png" alt="image-20230709184837045"></p><p>当 old 获取到的是 null，那么初始的时候 arrays 数组中只有一个窗口（可能是第一个(idx=0)，也可能是第二个(idx=1)），每个时间窗口的长度是 500ms，这就意味着只要当前时间与时间窗口的差值在 500ms 之内，时间窗口就不会向前滑动。例如，假如当前时间走到 300 或者 500 时，当前时间窗口仍然是相同的那个：</p><p><img src="https://floweryu-image.oss-cn-shanghai.aliyuncs.com/image202307091854811.png" alt="image-20230709185358381"></p><p>时间继续往前走，当超过 500ms 时，时间窗口就会向前滑动到下一个，这时就会更新当前窗口的开始时间,时间继续往前走，只要不超过 1000ms，则当前窗口不会发生变化，其中代码实现是 resetWindowTo 方法：</p><p><img src="https://floweryu-image.oss-cn-shanghai.aliyuncs.com/image202307091857034.png" alt="image-20230709185704628"></p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token class-name">WindowWrap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MetricBucket</span><span class="token punctuation">&gt;</span></span> <span class="token function">resetWindowTo</span><span class="token punctuation">(</span><span class="token class-name">WindowWrap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MetricBucket</span><span class="token punctuation">&gt;</span></span> w<span class="token punctuation">,</span> <span class="token keyword">long</span> time<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// Update the start time and reset value.</span>
    w<span class="token punctuation">.</span><span class="token function">resetTo</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">MetricBucket</span> borrowBucket <span class="token operator">=</span> borrowArray<span class="token punctuation">.</span><span class="token function">getWindowValue</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>borrowBucket <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        w<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        w<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addPass</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>borrowBucket<span class="token punctuation">.</span><span class="token function">pass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        w<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> w<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当时间继续往前走，当前时间超过 1000ms 时，就会再次进入下一个时间窗口，此时 arrays 数组中的窗口将会有一个失效，会有另一个新的窗口进行替换：</p><p><img src="https://floweryu-image.oss-cn-shanghai.aliyuncs.com/image202307091906190.png" alt="image-20220814153836045"></p><p>这样，在当前时间点中进入的请求，会被统计到当前时间对应的窗口中：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addPass</span><span class="token punctuation">(</span><span class="token keyword">int</span> count<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">WindowWrap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MetricBucket</span><span class="token punctuation">&gt;</span></span> wrap <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">currentWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    wrap<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">addPass</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>获得窗口后，会执行下面语句，增加当前窗口通过的请求数 QPS。这里的<code>wrap.value()</code>得到的是<code>MetricBucket</code>，在 Sentinel 中 QPS 相关数据的统计结果就维护在这个类中<code>LongAddr[]</code>中，最终由这个指标来与我们设置好的规则进行匹配，查看是否限流，也就是<code>StatisticSlot</code>的 entry 方法中的<code>fireEntry</code>，都要先进入到<code>FlowSlot</code>的<code>entry</code>方法进行限流过滤：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">entry</span><span class="token punctuation">(</span><span class="token class-name">Context</span> context<span class="token punctuation">,</span> <span class="token class-name">ResourceWrapper</span> resourceWrapper<span class="token punctuation">,</span> <span class="token class-name">DefaultNode</span> node<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">,</span>
                  <span class="token keyword">boolean</span> prioritized<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
    <span class="token comment">// 在此方法里面进行限流规则检查</span>
    <span class="token function">checkFlow</span><span class="token punctuation">(</span>resourceWrapper<span class="token punctuation">,</span> context<span class="token punctuation">,</span> node<span class="token punctuation">,</span> count<span class="token punctuation">,</span> prioritized<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token function">fireEntry</span><span class="token punctuation">(</span>context<span class="token punctuation">,</span> resourceWrapper<span class="token punctuation">,</span> node<span class="token punctuation">,</span> count<span class="token punctuation">,</span> prioritized<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在<code>FlowRuleChecker</code>类中，循环规则匹配资源进行限流过滤。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">checkFlow</span><span class="token punctuation">(</span><span class="token class-name">Function</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Collection</span><span class="token punctuation">&lt;</span><span class="token class-name">FlowRule</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> ruleProvider<span class="token punctuation">,</span> <span class="token class-name">ResourceWrapper</span> resource<span class="token punctuation">,</span>
                      <span class="token class-name">Context</span> context<span class="token punctuation">,</span> <span class="token class-name">DefaultNode</span> node<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">,</span> <span class="token keyword">boolean</span> prioritized<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">BlockException</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>ruleProvider <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> resource <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">FlowRule</span><span class="token punctuation">&gt;</span></span> rules <span class="token operator">=</span> ruleProvider<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>resource<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>rules <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">FlowRule</span> rule <span class="token operator">:</span> rules<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">canPassCheck</span><span class="token punctuation">(</span>rule<span class="token punctuation">,</span> context<span class="token punctuation">,</span> node<span class="token punctuation">,</span> count<span class="token punctuation">,</span> prioritized<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">FlowException</span><span class="token punctuation">(</span>rule<span class="token punctuation">.</span><span class="token function">getLimitApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> rule<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="参考文章" tabindex="-1"><a class="header-anchor" href="#参考文章" aria-hidden="true">#</a> 参考文章</h2><ul><li>https://www.cnblogs.com/wuzhenzhao/p/11453649.html</li></ul>`,76),o=[e];function c(l,i){return s(),a("div",null,o)}const k=n(p,[["render",c],["__file","Sentinelxianliuyuanli.html.vue"]]);export{k as default};
