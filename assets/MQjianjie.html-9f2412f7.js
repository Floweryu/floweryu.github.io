import{_ as a,o as e,c as t,a as r}from"./app-a707055d.js";const i="/assets/20210718104029-96f15121.png",s="/assets/20210718103747-b29505ba.png",c={},n=r('<h2 id="_1-为什么要使用mq" tabindex="-1"><a class="header-anchor" href="#_1-为什么要使用mq" aria-hidden="true">#</a> 1. 为什么要使用MQ</h2><h3 id="_1-1-流量削峰" tabindex="-1"><a class="header-anchor" href="#_1-1-流量削峰" aria-hidden="true">#</a> 1.1 流量削峰</h3><p>使用消息队列做缓冲。假设一个订单系统最多能处理一万个订单，当订单数量超过一万个后，只能限制超过一万后不允许用户下单。这时可以用MQ做缓冲，把一秒内下的订单分散成一段时间来处理，可能用户在下单后几十秒后才收到下单成功的操作，但是比不能下单要好。</p><h3 id="_1-2-应用解耦" tabindex="-1"><a class="header-anchor" href="#_1-2-应用解耦" aria-hidden="true">#</a> 1.2 应用解耦</h3><p>用户创建完成订单后，后面会调用库存系统、物流系统、支付系统，任何一个系统出现异常，都会造成下单操作异常。</p><p>可以使用消息队列对调用的系统进行解耦，这样系统之间调用的问题就会减少很多，比如，物流系统发生故障，需要几分钟来进行修复，在这几分钟的时间里，物流系统要处理的数据被缓存在消息队列中，用户下单的操作可以正常完成。当物流系统恢复后，继续处理订单信息即可。中间用户再下单就感受不到物流系统的障碍，提高系统的可用性。</p><p><img src="'+i+'" alt="image-20210718104024644"></p><h3 id="_1-3-异步处理" tabindex="-1"><a class="header-anchor" href="#_1-3-异步处理" aria-hidden="true">#</a> 1.3 异步处理</h3><p>A调用B的API，只需要监听B处理完后的信息，B处理完成后会发送一条信息给MQ，MQ会将此信息转发给A服务。</p><p>这样A服务不同循环调用B的查询，也不用提供<code>callback api</code>。</p><img src="'+s+'" alt="image-20210718103723104" style="zoom:67%;">',11),d=[n];function h(o,_){return e(),t("div",null,d)}const l=a(c,[["render",h],["__file","MQjianjie.html.vue"]]);export{l as default};
