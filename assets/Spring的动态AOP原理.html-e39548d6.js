import{_ as o}from"./plugin-vue_export-helper-c27b6911.js";import{r as c,o as i,c as l,e as a,w as t,a as e,b as n,d as p}from"./app-97bbaf68.js";const u="/assets/image202212262224611-30360159.png",r="/assets/image202212262225516-f9bc7ab0.png",k="/assets/image202212262225082-956b5501.png",d="/assets/image202212262225819-8c9c24c7.png",v="/assets/image202212262225561-9100a646.png",m="/assets/image202212262225225-a4160497.png",g="/assets/image202212262225257-0a48591e.png",b="/assets/image202212262225202-67bfca54.png",f="/assets/image202212262225090-5d082bec.png",y="/assets/image202212262225666-f65fa3d0.png",h="/assets/image202212262226122-2bcb90f2.png",w="/assets/image202212262226881-daeef360.png",A="/assets/image202212262226715-e50e3bf9.png",x="/assets/image202212262226938-4a3ecca0.png",I="/assets/image202212262226218-061764a8.png",C="/assets/image202212262226947-7bd20dc1.png",q="/assets/image202212262226516-4fdc07c8.png",_="/assets/image202212262226203-cceeb135.png",P="/assets/image202212262226716-28bc75f1.png",j="/assets/image202212262226469-8ee7f100.png",M="/assets/image202212262226416-f101672f.png",O="/assets/image202212262226931-a843042b.png",T="/assets/image202212262226220-b8622597.png",B="/assets/image202212262226612-09d150ad.png",S="/assets/image202212262226653-4ccf0f2b.png",L="/assets/image202212262226820-f7cb0709.png",J="/assets/image202212262226172-f485fb9d.png",N="/assets/image202212262227085-9acdb516.png",D="/assets/image202212262227748-263f65ab.png",R="/assets/image202212262227326-5edd1c79.png",z="/assets/image202212262227869-ea8a7ed0.png",E="/assets/image202212262227446-4c6edd5c.png",F="/assets/image202212262227868-f0f818bc.png",K="/assets/image202212262227660-db1c30d7.png",U="/assets/image202212262227405-c25dbb5d.png",G="/assets/image202212262227998-15125e38.png",V="/assets/image202212262227564-ba232a2e.png",W="/assets/image202212262227508-0969cfb6.png",X={},Y=e('<h2 id="一-引入" tabindex="-1"><a class="header-anchor" href="#一-引入" aria-hidden="true">#</a> 一.. 引入</h2><h3 id="_1-1-概念" tabindex="-1"><a class="header-anchor" href="#_1-1-概念" aria-hidden="true">#</a> 1.1 概念</h3><figure><img src="'+u+`" alt="image-20221130195504431" tabindex="0" loading="lazy"><figcaption>image-20221130195504431</figcaption></figure><h3 id="_1-2-注解方式使用aop" tabindex="-1"><a class="header-anchor" href="#_1-2-注解方式使用aop" aria-hidden="true">#</a> 1.2 注解方式使用AOP</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Aspect</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LogAspects</span> <span class="token punctuation">{</span>

<span class="token doc-comment comment">/**
     * 1. 本类引用，只需要写方法名
     * 2. 其他类引用，需要写路径
     */</span>
    <span class="token annotation punctuation">@Pointcut</span><span class="token punctuation">(</span><span class="token string">&quot;execution(public int com.floweryu.aop.MathCalculator.*(..))&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pointCut</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 前置通知：在目标方法被调用之前调用通知功能
     */</span>
    <span class="token annotation punctuation">@Before</span><span class="token punctuation">(</span><span class="token string">&quot;pointCut()&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">logStart</span><span class="token punctuation">(</span><span class="token class-name">JoinPoint</span> joinPoint<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">getArgs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;@Before执行...&quot;</span> <span class="token operator">+</span> joinPoint<span class="token punctuation">.</span><span class="token function">getSignature</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot; 运行开始.......参数列表是: {&quot;</span> <span class="token operator">+</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 后置通知：在目标方法调用之后调用通知，此时不关心方法的输出结果
     */</span>
    <span class="token annotation punctuation">@After</span><span class="token punctuation">(</span><span class="token string">&quot;pointCut()&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">logEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;@After执行...   方法执行结束.......&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 返回通知：在目标方法执行成功后调用通知
     */</span>
    <span class="token annotation punctuation">@AfterReturning</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;pointCut()&quot;</span><span class="token punctuation">,</span> returning <span class="token operator">=</span> <span class="token string">&quot;returning&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">logReturn</span><span class="token punctuation">(</span><span class="token class-name">Object</span> returning<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;@AfterReturning执行...   除法正常返回.......返回值: {&quot;</span> <span class="token operator">+</span> returning <span class="token operator">+</span> <span class="token string">&quot;}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token doc-comment comment">/**
     * 异常通知：在目标方法抛出异常后调用通知
     */</span>
    <span class="token annotation punctuation">@AfterThrowing</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;pointCut()&quot;</span><span class="token punctuation">,</span> throwing <span class="token operator">=</span> <span class="token string">&quot;ex&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">logException</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;@AfterThrowing执行...   除法异常.......异常: {&quot;</span> <span class="token operator">+</span> ex <span class="token operator">+</span><span class="token string">&quot;}&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token annotation punctuation">@Around</span><span class="token punctuation">(</span><span class="token string">&quot;pointCut()&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">logAround</span><span class="token punctuation">(</span><span class="token class-name">ProceedingJoinPoint</span> joinPoint<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;@Around执行...   方法执行前调用========&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token comment">// 通过反射调用div方法</span>
		<span class="token comment">// 又回到此处CglibAopProxy.CglibMethodInvocation.proceed, 相当于mi.proceed()</span>
        <span class="token class-name">Object</span> result <span class="token operator">=</span> joinPoint<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;@Around执行...   方法执行后调用========&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> result<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>


<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MathCalculator</span> <span class="token punctuation">{</span>
    
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">div</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;MathCalculator is running...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> i <span class="token operator">/</span> j<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-3-xml方式使用aop" tabindex="-1"><a class="header-anchor" href="#_1-3-xml方式使用aop" aria-hidden="true">#</a> 1.3 xml方式使用AOP</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">&quot;1.0&quot;</span> encoding<span class="token operator">=</span><span class="token string">&quot;UTF-8&quot;</span><span class="token operator">?</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>beans xmlns<span class="token operator">=</span><span class="token string">&quot;http://www.springframework.org/schema/beans&quot;</span>
	   xmlns<span class="token operator">:</span>xsi<span class="token operator">=</span><span class="token string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> xmlns<span class="token operator">:</span>aop<span class="token operator">=</span><span class="token string">&quot;http://www.springframework.org/schema/aop&quot;</span>
	   xsi<span class="token operator">:</span>schemaLocation<span class="token operator">=</span><span class="token string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd&quot;</span><span class="token operator">&gt;</span>
	
	<span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">&quot;logAspects&quot;</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;com.floweryu.aop.LogAspects&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
	<span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">&quot;mathCalculator&quot;</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;com.floweryu.aop.MathCalculator&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
	
	<span class="token operator">&lt;</span>aop<span class="token operator">:</span>config<span class="token operator">&gt;</span>
		<span class="token operator">&lt;</span>aop<span class="token operator">:</span>aspect ref<span class="token operator">=</span><span class="token string">&quot;logAspects&quot;</span><span class="token operator">&gt;</span>
			<span class="token operator">&lt;</span>aop<span class="token operator">:</span>pointcut id<span class="token operator">=</span><span class="token string">&quot;pointCut&quot;</span> expression<span class="token operator">=</span><span class="token string">&quot;execution(public int com.floweryu.aop.MathCalculator.*(..))&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
			<span class="token operator">&lt;</span>aop<span class="token operator">:</span>after method<span class="token operator">=</span><span class="token string">&quot;logEnd&quot;</span> pointcut<span class="token operator">-</span>ref<span class="token operator">=</span><span class="token string">&quot;pointCut&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
			<span class="token operator">&lt;</span>aop<span class="token operator">:</span>before method<span class="token operator">=</span><span class="token string">&quot;logStart&quot;</span> pointcut<span class="token operator">-</span>ref<span class="token operator">=</span><span class="token string">&quot;pointCut&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
			<span class="token operator">&lt;</span>aop<span class="token operator">:</span>after<span class="token operator">-</span>returning method<span class="token operator">=</span><span class="token string">&quot;logReturn&quot;</span> pointcut<span class="token operator">-</span>ref<span class="token operator">=</span><span class="token string">&quot;pointCut&quot;</span> returning<span class="token operator">=</span><span class="token string">&quot;returning&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
			<span class="token operator">&lt;</span>aop<span class="token operator">:</span>after<span class="token operator">-</span>throwing method<span class="token operator">=</span><span class="token string">&quot;logException&quot;</span> pointcut<span class="token operator">-</span>ref<span class="token operator">=</span><span class="token string">&quot;pointCut&quot;</span> throwing<span class="token operator">=</span><span class="token string">&quot;ex&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
			<span class="token operator">&lt;</span>aop<span class="token operator">:</span>around method<span class="token operator">=</span><span class="token string">&quot;logAround&quot;</span> pointcut<span class="token operator">-</span>ref<span class="token operator">=</span><span class="token string">&quot;pointCut&quot;</span> <span class="token operator">/</span><span class="token operator">&gt;</span>
		<span class="token operator">&lt;</span><span class="token operator">/</span>aop<span class="token operator">:</span>aspect<span class="token operator">&gt;</span>
	<span class="token operator">&lt;</span><span class="token operator">/</span>aop<span class="token operator">:</span>config<span class="token operator">&gt;</span>
	<span class="token operator">&lt;</span>aop<span class="token operator">:</span>aspectj<span class="token operator">-</span>autoproxy <span class="token operator">/</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>beans<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-4-抛出问题" tabindex="-1"><a class="header-anchor" href="#_1-4-抛出问题" aria-hidden="true">#</a> 1.4 抛出问题？</h3><h4 id="a-advice的执行顺序" tabindex="-1"><a class="header-anchor" href="#a-advice的执行顺序" aria-hidden="true">#</a> a. Advice的执行顺序？</h4><figure><img src="`+r+'" alt="image-20221130214127496" tabindex="0" loading="lazy"><figcaption>image-20221130214127496</figcaption></figure>',10),$=n("figure",null,[n("img",{src:k,alt:"image-20221130214215063",tabindex:"0",loading:"lazy"}),n("figcaption",null,"image-20221130214215063")],-1),H=e(`<p>对比上面两张图片，可以看到**@Around、@After、@Before**这三个执行顺序有变化。</p><p>在Spring5.x或6.x，省略@Around的时候，执行顺序为：</p><ul><li>正常情况：@Before —-&gt; 目标方法 —-&gt; @AfterReturning —-&gt; @After</li><li>异常情况：@Before —-&gt; 目标方法 —-&gt; @AfterThrowing —-&gt; @After</li></ul><h2 id="二-enableaspectjautoproxy注解" tabindex="-1"><a class="header-anchor" href="#二-enableaspectjautoproxy注解" aria-hidden="true">#</a> 二.. @EnableAspectJAutoProxy注解</h2><blockquote><p>以注解方式为例开始源码阅读。</p></blockquote><p>关键在于**@EnableAspectJAutoProxy<strong>注解，开启了AspectJ的代理功能，顺着该注解点下去，可以在</strong>AopConfigUtils类**中找到下面这一段代码：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">BeanDefinition</span> <span class="token function">registerAspectJAnnotationAutoProxyCreatorIfNecessary</span><span class="token punctuation">(</span>
    <span class="token class-name">BeanDefinitionRegistry</span> registry<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Object</span> source<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// 该方法会自动注册AnnotationAwareAspectJAutoProxyCreator类, 并且如果有其他代理，会根据代理优先级注入</span>
    <span class="token keyword">return</span> <span class="token function">registerOrEscalateApcAsRequired</span><span class="token punctuation">(</span><span class="token class-name">AnnotationAwareAspectJAutoProxyCreator</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> registry<span class="token punctuation">,</span> source<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

	<span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">BeanDefinition</span> <span class="token function">registerOrEscalateApcAsRequired</span><span class="token punctuation">(</span>
			<span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> cls<span class="token punctuation">,</span> <span class="token class-name">BeanDefinitionRegistry</span> registry<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Object</span> source<span class="token punctuation">)</span> <span class="token punctuation">{</span>

		<span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">notNull</span><span class="token punctuation">(</span>registry<span class="token punctuation">,</span> <span class="token string">&quot;BeanDefinitionRegistry must not be null&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 如果有org.springframework.aop.config.internalAutoProxyCreator代理，则根据优先级注入代理</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span>registry<span class="token punctuation">.</span><span class="token function">containsBeanDefinition</span><span class="token punctuation">(</span><span class="token constant">AUTO_PROXY_CREATOR_BEAN_NAME</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
			<span class="token class-name">BeanDefinition</span> apcDefinition <span class="token operator">=</span> registry<span class="token punctuation">.</span><span class="token function">getBeanDefinition</span><span class="token punctuation">(</span><span class="token constant">AUTO_PROXY_CREATOR_BEAN_NAME</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cls<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>apcDefinition<span class="token punctuation">.</span><span class="token function">getBeanClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
				<span class="token keyword">int</span> currentPriority <span class="token operator">=</span> <span class="token function">findPriorityForClass</span><span class="token punctuation">(</span>apcDefinition<span class="token punctuation">.</span><span class="token function">getBeanClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token keyword">int</span> requiredPriority <span class="token operator">=</span> <span class="token function">findPriorityForClass</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token keyword">if</span> <span class="token punctuation">(</span>currentPriority <span class="token operator">&lt;</span> requiredPriority<span class="token punctuation">)</span> <span class="token punctuation">{</span>
					apcDefinition<span class="token punctuation">.</span><span class="token function">setBeanClassName</span><span class="token punctuation">(</span>cls<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
				<span class="token punctuation">}</span>
			<span class="token punctuation">}</span>
			<span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
		<span class="token punctuation">}</span>
		<span class="token comment">// ......</span>
		<span class="token keyword">return</span> beanDefinition<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上面就将<strong>AnnotationAwareAspectJAutoProxyCreator</strong>类注入到容器中。</p><h2 id="三-aop代理创建过程" tabindex="-1"><a class="header-anchor" href="#三-aop代理创建过程" aria-hidden="true">#</a> 三.. AOP代理创建过程</h2><h3 id="_3-1-获取增强方法" tabindex="-1"><a class="header-anchor" href="#_3-1-获取增强方法" aria-hidden="true">#</a> 3.1 获取增强方法</h3><p>看一下核心类：<strong>AnnotationAwareAspectJAutoProxyCreator</strong>做了哪些事情？</p><figure><img src="`+d+`" alt="image-20221122210650156" tabindex="0" loading="lazy"><figcaption>image-20221122210650156</figcaption></figure><p><code>AnnotationAwareAspectJAutoProxyCreator</code>实现了<code>BeanFactoryAware</code>接口，这样当Spring加载到这个Bean时会调用其<code>postProcessAfterInitialization</code>方法：</p><blockquote><p>代码：org.springframework.aop.framework.autoproxy.AbstractAutoProxyCreator#postProcessAfterInitialization</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token doc-comment comment">/**
	 * 此处是真正创建aop代理的地方, 在实例化之后, 初始化之后就进行处理
	 * 首先查看是否在earlyProxyReferences里是否存在, 如果有就说明处理过了, 不存在就考虑是否进行代理
	 * <span class="token keyword">@see</span> <span class="token reference"><span class="token punctuation">#</span><span class="token field">getAdvicesAndAdvisorsForBean</span></span>
	 * 在解决循环依赖时也用到earlyProxyReferences和wrapIfNecessary
	 * <span class="token keyword">@see</span> <span class="token reference"><span class="token punctuation">#</span><span class="token function">getEarlyBeanReference</span><span class="token punctuation">(</span><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span><span class="token class-name">String</span><span class="token punctuation">)</span></span>
	 */</span>
<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">postProcessAfterInitialization</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Object</span> bean<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>bean <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 获取当前bean的key: 如果beanName不为空, 则以beanName为Key</span>
        <span class="token comment">// 如果为FactoryBean类型, 前面会添加&amp;符号</span>
        <span class="token comment">// 如果beanName为空, 则以当前bean对应的class为key</span>
        <span class="token class-name">Object</span> cacheKey <span class="token operator">=</span> <span class="token function">getCacheKey</span><span class="token punctuation">(</span>bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 判断当前bean是否正在被代理, 如果正在被代理则不进行封装</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>earlyProxyReferences<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">)</span> <span class="token operator">!=</span> bean<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 如果bean需要被代理, 则需要封装指定的bean</span>
            <span class="token keyword">return</span> <span class="token function">wrapIfNecessary</span><span class="token punctuation">(</span>bean<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> cacheKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> bean<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">protected</span> <span class="token class-name">Object</span> <span class="token function">wrapIfNecessary</span><span class="token punctuation">(</span><span class="token class-name">Object</span> bean<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">,</span> <span class="token class-name">Object</span> cacheKey<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 如果已经被处理过, 直接返回</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">hasLength</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>targetSourcedBeans<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 这里的advisedBeans缓存了已经进行了代理的bean，如果缓存中存在, 则可以直接返回</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token constant">FALSE</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>advisedBeans<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// isInfrastructureClass(cls)用户判断当前cls是否为spring自带的bean, 自带的bean是不用代理的, 见下</span>
    <span class="token comment">// Advice/Pointcut/Advisor/AopInfrastructureBean的类或子类</span>
    <span class="token comment">// shouldSkip()用于判断当前bean是否应该被略过(bean的名称是否以.ORIGINAL结尾)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isInfrastructureClass</span><span class="token punctuation">(</span>bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">shouldSkip</span><span class="token punctuation">(</span>bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 对当前bean进行缓存</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>advisedBeans<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">,</span> <span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token constant">FALSE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> bean<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 图(1) &amp;&amp; 核心代码		获取当前bean的Advices和Advisors, Interceptors</span>
    <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> specificInterceptors <span class="token operator">=</span> <span class="token function">getAdvicesAndAdvisorsForBean</span><span class="token punctuation">(</span>bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>specificInterceptors <span class="token operator">!=</span> <span class="token constant">DO_NOT_PROXY</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 对当前bean的代理状态进行缓存</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>advisedBeans<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">,</span> <span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token constant">TRUE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 根据获取到的Advices和Advisors为当前bean生成代理对象(见创建代理一节)</span>
        <span class="token class-name">Object</span> proxy <span class="token operator">=</span> <span class="token function">createProxy</span><span class="token punctuation">(</span>
            bean<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> specificInterceptors<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">SingletonTargetSource</span><span class="token punctuation">(</span>bean<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 缓存生成的代理bean的类型, 并且返回生成的代理bean </span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>proxyTypes<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">,</span> proxy<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> proxy<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">this</span><span class="token punctuation">.</span>advisedBeans<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">,</span> <span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token constant">FALSE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> bean<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+v+'" alt="image-20221127222022040" tabindex="0" loading="lazy"><figcaption>image-20221127222022040</figcaption></figure>',16),Q=e(`<blockquote><p>核心代码：AbstractAdvisorAutoProxyCreator#<strong>getAdvicesAndAdvisorsForBean</strong></p></blockquote><p>先总结一下该方法做了哪些事情：</p><ul><li>获取所有增强方法（即LogAspects切面定义的各个方法）。</li><li>通过切点表达式pointCut判断这些增强方法是否可为当前Bean所用。</li><li>如果有符合的通知方法，则对它们进行排序（排序规则不同版本Spring有所不同，这里就可以解释xml和注解方式使用aop为什么顺序不同）。</li></ul><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getAdvicesAndAdvisorsForBean</span><span class="token punctuation">(</span>
    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> beanClass<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">TargetSource</span> targetSource<span class="token punctuation">)</span> <span class="token punctuation">{</span>
	<span class="token comment">// 核心方法: 找到合适的增强对象</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Advisor</span><span class="token punctuation">&gt;</span></span> advisors <span class="token operator">=</span> <span class="token function">findEligibleAdvisors</span><span class="token punctuation">(</span>beanClass<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>advisors<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token constant">DO_NOT_PROXY</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> advisors<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>	

<span class="token comment">//核心方法</span>
<span class="token keyword">protected</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Advisor</span><span class="token punctuation">&gt;</span></span> <span class="token function">findEligibleAdvisors</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> beanClass<span class="token punctuation">,</span> <span class="token class-name">String</span> beanName<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 图(1). 对所有的切面逻辑进行封装, 从而得到目标Advisor.  	</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Advisor</span><span class="token punctuation">&gt;</span></span> candidateAdvisors <span class="token operator">=</span> <span class="token function">findCandidateAdvisors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 图(2). 对所有的Advisor进行判断, 看其切面定义是否可以应用到当前bean, 从而得到最终需要应用的Advisor(这里不详细介绍)</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Advisor</span><span class="token punctuation">&gt;</span></span> eligibleAdvisors <span class="token operator">=</span> <span class="token function">findAdvisorsThatCanApply</span><span class="token punctuation">(</span>candidateAdvisors<span class="token punctuation">,</span> beanClass<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 图(3). 提供hook方法, 用于对目标Advisor进行扩展, 可以看到比图(2)多了一个Advisor</span>
    <span class="token function">extendAdvisors</span><span class="token punctuation">(</span>eligibleAdvisors<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>eligibleAdvisors<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 对需要代理的Advisor按照一定规则进行排序. </span>
        <span class="token comment">// 在有多个切面的情况下, 多个切点使用了同一个连接点, 这样就需要有一定的顺序, 可以配置@Order来决定顺序</span>
		<span class="token comment">// 里面大概是一个拓扑排序，所以会xml方式和注解方式的执行顺序会有一些不同(在使用@Around、@Before、@After情况下)</span>
        <span class="token comment">// 核心代码</span>
        eligibleAdvisors <span class="token operator">=</span> <span class="token function">sortAdvisors</span><span class="token punctuation">(</span>eligibleAdvisors<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> eligibleAdvisors<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+m+'" alt="image-20221127134219062" tabindex="0" loading="lazy"><figcaption>image-20221127134219062</figcaption></figure>',5),Z=n("figure",null,[n("img",{src:g,alt:"image-20221127212733993",tabindex:"0",loading:"lazy"}),n("figcaption",null,"image-20221127212733993")],-1),nn=n("figure",null,[n("img",{src:b,alt:"image-20221127212918752",tabindex:"0",loading:"lazy"}),n("figcaption",null,"image-20221127212918752")],-1),sn=e('<blockquote><p>核心代码: AbstractAdvisorAutoProxyCreator#<strong>sortAdvisors</strong></p><p><strong>拓扑排序</strong>：在有向无环图下，每次排序选取无前驱的节点</p><figure><img src="'+f+`" alt="image-20221130222304262" tabindex="0" loading="lazy"><figcaption>image-20221130222304262</figcaption></figure><p><strong>增强器执行顺序</strong>：</p><p>官方文档对此有说明：https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#aop-ataspectj-advice-ordering</p><ul><li>在同一个Aspect 切面中，针对同一个 pointCut，定义了两个相同的 Advice（比如：定义了两个 @Before)，那么这两个 advice 的执行顺序是无法确定的，哪怕你给这两个 advice 添加了 @Order 这个注解，也不行。</li><li>针对不同的Aspect切面中，需要实现<strong>org.springframework.core.Ordered</strong>接口，实现它的**getOrder()**方法，值越小的 aspect 越先执行。否则执行顺序不固定</li></ul></blockquote><h3 id="_3-2-创建代理" tabindex="-1"><a class="header-anchor" href="#_3-2-创建代理" aria-hidden="true">#</a> 3.2 创建代理</h3><blockquote><p>createProxy方法点进去在6.x版本会直接进去buildProxy方法，该方法在经过一系列的判断后执行proxyFactory.getProxy(classLoader)创建代理对象</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">Object</span> <span class="token function">buildProxy</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> beanClass<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">String</span> beanName<span class="token punctuation">,</span>
                          <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> specificInterceptors<span class="token punctuation">,</span> <span class="token class-name">TargetSource</span> targetSource<span class="token punctuation">,</span> <span class="token keyword">boolean</span> classOnly<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token comment">// 给bean定义设置一个属性originalTargetClass(不重要)</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>beanFactory <span class="token keyword">instanceof</span> <span class="token class-name">ConfigurableListableBeanFactory</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">AutoProxyUtils</span><span class="token punctuation">.</span><span class="token function">exposeTargetClass</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">ConfigurableListableBeanFactory</span><span class="token punctuation">)</span> <span class="token keyword">this</span><span class="token punctuation">.</span>beanFactory<span class="token punctuation">,</span> beanName<span class="token punctuation">,</span> beanClass<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 创建一个代理工厂</span>
    <span class="token class-name">ProxyFactory</span> proxyFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProxyFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 获取当前类相关属性</span>
    proxyFactory<span class="token punctuation">.</span><span class="token function">copyFrom</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 判断对于给定的bean是否应该使用targetClass代理而不是它的接口代理</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>proxyFactory<span class="token punctuation">.</span><span class="token function">isProxyTargetClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Explicit handling of JDK proxy targets and lambdas (for introduction advice scenarios)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">isProxyClass</span><span class="token punctuation">(</span>beanClass<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token class-name">ClassUtils</span><span class="token punctuation">.</span><span class="token function">isLambdaClass</span><span class="token punctuation">(</span>beanClass<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// Must allow for introductions; can&#39;t just set interfaces to the proxy&#39;s interfaces only.</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> ifc <span class="token operator">:</span> beanClass<span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                proxyFactory<span class="token punctuation">.</span><span class="token function">addInterface</span><span class="token punctuation">(</span>ifc<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// 检查preserveTargetClass, 判断是使用JDK代理还是 CGLIB代理</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">shouldProxyTargetClass</span><span class="token punctuation">(</span>beanClass<span class="token punctuation">,</span> beanName<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 如果是使用CGLIB代理</span>
            proxyFactory<span class="token punctuation">.</span><span class="token function">setProxyTargetClass</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">// 添加代理接口</span>
            <span class="token function">evaluateProxyInterfaces</span><span class="token punctuation">(</span>beanClass<span class="token punctuation">,</span> proxyFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 构建增强器</span>
    <span class="token class-name">Advisor</span><span class="token punctuation">[</span><span class="token punctuation">]</span> advisors <span class="token operator">=</span> <span class="token function">buildAdvisors</span><span class="token punctuation">(</span>beanName<span class="token punctuation">,</span> specificInterceptors<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 设置增强器</span>
    proxyFactory<span class="token punctuation">.</span><span class="token function">addAdvisors</span><span class="token punctuation">(</span>advisors<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 设置要代理的类(MathCalculator)</span>
    proxyFactory<span class="token punctuation">.</span><span class="token function">setTargetSource</span><span class="token punctuation">(</span>targetSource<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 定制代理</span>
    <span class="token function">customizeProxyFactory</span><span class="token punctuation">(</span>proxyFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 代理工厂配置之后, 是否还允许被修改, 默认值是false</span>
    proxyFactory<span class="token punctuation">.</span><span class="token function">setFrozen</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>freezeProxy<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">advisorsPreFiltered</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        proxyFactory<span class="token punctuation">.</span><span class="token function">setPreFiltered</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 新版本新增</span>
    <span class="token comment">// Use original ClassLoader if bean class not locally loaded in overriding class loader</span>
    <span class="token class-name">ClassLoader</span> classLoader <span class="token operator">=</span> <span class="token function">getProxyClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>classLoader <span class="token keyword">instanceof</span> <span class="token class-name">SmartClassLoader</span> <span class="token operator">&amp;&amp;</span> classLoader <span class="token operator">!=</span> beanClass<span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        classLoader <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">SmartClassLoader</span><span class="token punctuation">)</span> classLoader<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getOriginalClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 图(1)   classOnly是false, 所以走getProxy</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>classOnly <span class="token operator">?</span> proxyFactory<span class="token punctuation">.</span><span class="token function">getProxyClass</span><span class="token punctuation">(</span>classLoader<span class="token punctuation">)</span> <span class="token operator">:</span> proxyFactory<span class="token punctuation">.</span><span class="token function">getProxy</span><span class="token punctuation">(</span>classLoader<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+y+'" alt="image-20221130225226529" tabindex="0" loading="lazy"><figcaption>image-20221130225226529</figcaption></figure>',5),an=e(`<p>后续从IOC容器中获得的TargetClass就是被代理后的对象，执行代理对象的目标方法的时候，代理对象会执行相应的通知方法链。</p><blockquote><p>核心代码：org.springframework.aop.framework.DefaultAopProxyFactory#createAopProxy，由proxyFactory.getProxy进入</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">AopProxy</span> <span class="token function">createAopProxy</span><span class="token punctuation">(</span><span class="token class-name">AdvisedSupport</span> config<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">AopConfigException</span> <span class="token punctuation">{</span>
    <span class="token comment">// 判断选择哪种创建代理对象的方式</span>
    <span class="token comment">// config.isOptimize(): 是否对代理类的生成使用策略优化, 作用和isProxyTargetClass(使用aop时可配置)是一样的, 默认为false</span>
    <span class="token comment">// config.isProxyTargetClass(): 是否使用CGLIB的方式创建代理对象, 默认为false</span>
    <span class="token comment">// hasNoUserSuppliedProxyInterfaces: 目标类是否有接口存在 并且 只有一个接口时接口类型是否为SpringProxy类型</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">isOptimize</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> config<span class="token punctuation">.</span><span class="token function">isProxyTargetClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">hasNoUserSuppliedProxyInterfaces</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 上面三个方法有一个为true就进入这里</span>
        <span class="token comment">// 从AdvisordSupport中获取目标类, 对象</span>
        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> targetClass <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token function">getTargetClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>targetClass <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AopConfigException</span><span class="token punctuation">(</span><span class="token string">&quot;TargetSource cannot determine target class: &quot;</span> <span class="token operator">+</span>
                                         <span class="token string">&quot;Either an interface or a target is required for proxy creation.&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token comment">// 如果目标类是接口 Proxy类型 lambad表达式(新增), 则还是使用JDK方式生成代理</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>targetClass<span class="token punctuation">.</span><span class="token function">isInterface</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">isProxyClass</span><span class="token punctuation">(</span>targetClass<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token class-name">ClassUtils</span><span class="token punctuation">.</span><span class="token function">isLambdaClass</span><span class="token punctuation">(</span>targetClass<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JdkDynamicAopProxy</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// 目标类没有接口配置了使用CGLIB进行动态代理, 使用CGLIB创建代理对象</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">ObjenesisCglibAopProxy</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// 使用JDK方式创建代理对象</span>
        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">JdkDynamicAopProxy</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><hr><h4 id="jdk和cglib代理方式" tabindex="-1"><a class="header-anchor" href="#jdk和cglib代理方式" aria-hidden="true">#</a> JDK和CGLIB代理方式</h4><ul><li>如果目标对象实现了接口，默认情况下会采用JDK的动态代理实现AOP</li><li>如果目标对象实现了接口，可以强制使用CGLIB实现AOP，方法见下。</li><li>如果目标对象没有实现接口，必须采用CGLIB库，Spring会自动在JDK和CGLIB中转换。</li></ul><p><strong>如何强制使用CGLIB代理？</strong></p><ul><li>添加CGLIB库</li><li>设置<code>proxyTargetClass = true</code></li></ul><hr><p><strong>JDK代理和CGLIB代理区别：</strong></p><ul><li>JDK动态代理只能针对实现了接口的类生成代理，不能针对类。</li><li>CGLIB代理是针对类实现的代理，主要是针对指定的类生成一个子类，覆盖其中的方法，<strong>因为是继承，所以该类或方法最好不要声明为final</strong>。</li></ul><h2 id="四-生成拦截器链methodinterceptor" tabindex="-1"><a class="header-anchor" href="#四-生成拦截器链methodinterceptor" aria-hidden="true">#</a> 四.. 生成拦截器链MethodInterceptor</h2><p>AOP代理对象生成后，接着关注代理对象的目标方法执行时，增强方法是怎么被执行的。</p><figure><img src="`+h+'" alt="image-20221130225619829" tabindex="0" loading="lazy"><figcaption>image-20221130225619829</figcaption></figure><p>在目标方法执行这里打上断点，开始debug。</p><figure><img src="'+w+`" alt="image-20221130225831730" tabindex="0" loading="lazy"><figcaption>image-20221130225831730</figcaption></figure><p>可以看到获取到的bean就是前面CGLIB代理后的Bean（<strong>MathCalculator$$SpringCGLIB</strong>）。</p><p>Step Into进入内部，程序跳转到下面方法中，说明目标对象的目标方法被拦截了，主要逻辑如下：</p><blockquote><p>拦截器起点：CglibAopProxy.DynamicAdvisedInterceptor#intercept</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">intercept</span><span class="token punctuation">(</span><span class="token class-name">Object</span> proxy<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">,</span> <span class="token class-name">MethodProxy</span> methodProxy<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
    <span class="token class-name">Object</span> oldProxy <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">boolean</span> setProxyContext <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
    <span class="token class-name">Object</span> target <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token comment">// 存放的是要代理的对象(例如: MathCalculator)</span>
    <span class="token class-name">TargetSource</span> targetSource <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>advised<span class="token punctuation">.</span><span class="token function">getTargetSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token comment">// 不重要</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>advised<span class="token punctuation">.</span>exposeProxy<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// Make invocation available if necessary.</span>
            oldProxy <span class="token operator">=</span> <span class="token class-name">AopContext</span><span class="token punctuation">.</span><span class="token function">setCurrentProxy</span><span class="token punctuation">(</span>proxy<span class="token punctuation">)</span><span class="token punctuation">;</span>
            setProxyContext <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token comment">// Get as late as possible to minimize the time we &quot;own&quot; the target, in case it comes from a pool...</span>
        <span class="token comment">// 获取应用的class类</span>
        target <span class="token operator">=</span> targetSource<span class="token punctuation">.</span><span class="token function">getTarget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> targetClass <span class="token operator">=</span> <span class="token punctuation">(</span>target <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> target<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 核心方法: 从advised中获取配置好的AOP拦截器链</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> chain <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>advised<span class="token punctuation">.</span><span class="token function">getInterceptorsAndDynamicInterceptionAdvice</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> targetClass<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Object</span> retVal<span class="token punctuation">;</span>
        <span class="token comment">// Check whether we only have one InvokerInterceptor: that is,</span>
        <span class="token comment">// no real advice, but just reflective invocation of the target.</span>
        <span class="token comment">// 如果拦截器链为空</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>chain<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// We can skip creating a MethodInvocation: just invoke the target directly.</span>
            <span class="token comment">// Note that the final invoker must be an InvokerInterceptor, so we know</span>
            <span class="token comment">// it does nothing but a reflective operation on the target, and no hot</span>
            <span class="token comment">// swapping or fancy proxying.</span>
            <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> argsToUse <span class="token operator">=</span> <span class="token class-name">AopProxyUtils</span><span class="token punctuation">.</span><span class="token function">adaptArgumentsIfNecessary</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// 直接激活原方法</span>
            retVal <span class="token operator">=</span> <span class="token class-name">AopUtils</span><span class="token punctuation">.</span><span class="token function">invokeJoinpointUsingReflection</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> method<span class="token punctuation">,</span> argsToUse<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">// We need to create a method invocation...</span>
            <span class="token comment">// 核心方法：通过CglibMethodInvocation来启动advice通知, 相当于一个纽带</span>
            retVal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CglibMethodInvocation</span><span class="token punctuation">(</span>proxy<span class="token punctuation">,</span> target<span class="token punctuation">,</span> method<span class="token punctuation">,</span> args<span class="token punctuation">,</span> targetClass<span class="token punctuation">,</span> chain<span class="token punctuation">,</span> methodProxy<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        retVal <span class="token operator">=</span> <span class="token function">processReturnType</span><span class="token punctuation">(</span>proxy<span class="token punctuation">,</span> target<span class="token punctuation">,</span> method<span class="token punctuation">,</span> retVal<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> retVal<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">finally</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>targetSource<span class="token punctuation">.</span><span class="token function">isStatic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            targetSource<span class="token punctuation">.</span><span class="token function">releaseTarget</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>setProxyContext<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// Restore old proxy.</span>
            <span class="token class-name">AopContext</span><span class="token punctuation">.</span><span class="token function">setCurrentProxy</span><span class="token punctuation">(</span>oldProxy<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里先重点关注下<strong>getInterceptorsAndDynamicInterceptionAdvice</strong>方法，其源码如下所示：</p><blockquote><p>核心方法： AdvisedSupport#getInterceptorsAndDynamicInterceptionAdvice 获取拦截器链</p><p>所谓的拦截器链，就是在代理对象的某个方法被执行时，从通知方法集合（创建代理对象的时候就已经将可用通知集合保存在代理对象中了）中筛选出适用于该方法的通知，然后封装为拦截器对象集合（类型为MethodInteceptor，下面会介绍到）。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token function">getInterceptorsAndDynamicInterceptionAdvice</span><span class="token punctuation">(</span><span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> targetClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 创建一个method对象, 在MethodCacheKey中实现了equals和hashcode, 还实现了compareTo方法</span>
    <span class="token class-name">MethodCacheKey</span> cacheKey <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MethodCacheKey</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> cached <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>methodCache<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 先从缓存中获取, 缓存中获取不到再调用方法获取, 然后再放到缓存中</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>cached <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 核心方法: 获取MethodInterceptor</span>
        cached <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>advisorChainFactory<span class="token punctuation">.</span><span class="token function">getInterceptorsAndDynamicInterceptionAdvice</span><span class="token punctuation">(</span>
            <span class="token keyword">this</span><span class="token punctuation">,</span> method<span class="token punctuation">,</span> targetClass<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>methodCache<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>cacheKey<span class="token punctuation">,</span> cached<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> cached<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>继续查看<strong>this.advisorChainFactory.getInterceptorsAndDynamicInterceptionAdvice</strong>源码</p><blockquote><p>核心方法：DefaultAdvisorChainFactory#getInterceptorsAndDynamicInterceptionAdvice 主要逻辑：</p><p>遍历代理对象的增强器集合，然后判断是否可以应用于当前调用的目标方法，如果可以，则将增强器（Advisor）转换为MethodInterceptor（直接转换，或者通过适配器转换），最终添加到interceptorList列表中。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token function">getInterceptorsAndDynamicInterceptionAdvice</span><span class="token punctuation">(</span>
    <span class="token class-name">Advised</span> config<span class="token punctuation">,</span> <span class="token class-name">Method</span> method<span class="token punctuation">,</span> <span class="token annotation punctuation">@Nullable</span> <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> targetClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token comment">// This is somewhat tricky... We have to process introductions first,</span>
    <span class="token comment">// but we need to preserve order in the ultimate list.</span>
    <span class="token comment">// 这里使用了单例模式, 获取DefaultAdvisorAdapterRegistry实例</span>
    <span class="token comment">// spring符合单一职责的原则有很多, 每个功能都会有响应的类去处理</span>
    <span class="token comment">// 主要作用是将Advice适配为Advisor, 将Advisor适配为对应的MethodInterceptor</span>
    <span class="token class-name">AdvisorAdapterRegistry</span> registry <span class="token operator">=</span> <span class="token class-name">GlobalAdvisorAdapterRegistry</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 创建一个之前获取到的通知个数集合</span>
    <span class="token class-name">Advisor</span><span class="token punctuation">[</span><span class="token punctuation">]</span> advisors <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token function">getAdvisors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> interceptorList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>advisors<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 如果目标类为null的话, 则从方法签名中获取目标类</span>
    <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> actualClass <span class="token operator">=</span> <span class="token punctuation">(</span>targetClass <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> targetClass <span class="token operator">:</span> method<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 判断是否有引介增强</span>
    <span class="token class-name">Boolean</span> hasIntroductions <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

    <span class="token comment">// 循环目标方法匹配的通知</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Advisor</span> advisor <span class="token operator">:</span> advisors<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>advisor <span class="token keyword">instanceof</span> <span class="token class-name">PointcutAdvisor</span> pointcutAdvisor<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// Add it conditionally.</span>
            <span class="token comment">// 提前进行前置过滤或者当前的Advisor适用于目标类(MathCalculator)</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">isPreFiltered</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> pointcutAdvisor<span class="token punctuation">.</span><span class="token function">getPointcut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>actualClass<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">MethodMatcher</span> mm <span class="token operator">=</span> pointcutAdvisor<span class="token punctuation">.</span><span class="token function">getPointcut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getMethodMatcher</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">boolean</span> match<span class="token punctuation">;</span>
                <span class="token comment">// 检查Advisor是否适用于此目标方法</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>mm <span class="token keyword">instanceof</span> <span class="token class-name">IntroductionAwareMethodMatcher</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>hasIntroductions <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        hasIntroductions <span class="token operator">=</span> <span class="token function">hasMatchingIntroductions</span><span class="token punctuation">(</span>advisors<span class="token punctuation">,</span> actualClass<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    match <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">IntroductionAwareMethodMatcher</span><span class="token punctuation">)</span> mm<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> actualClass<span class="token punctuation">,</span> hasIntroductions<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 匹配当前method是否属于目标类</span>
                    match <span class="token operator">=</span> mm<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>method<span class="token punctuation">,</span> actualClass<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>match<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 核心方法：通过advisor获取拦截器链</span>
                    <span class="token class-name">MethodInterceptor</span><span class="token punctuation">[</span><span class="token punctuation">]</span> interceptors <span class="token operator">=</span> registry<span class="token punctuation">.</span><span class="token function">getInterceptors</span><span class="token punctuation">(</span>advisor<span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>mm<span class="token punctuation">.</span><span class="token function">isRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token comment">// Creating a new object instance in the getInterceptors() method</span>
                        <span class="token comment">// isn&#39;t a problem as we normally cache created chains.</span>
                        <span class="token comment">// 动态切入点会创建一个InterceptorAndDynamicMethodMatcher对象</span>
                        <span class="token comment">// 这个对象包含MethodInterceptor和MethodMatcher实例</span>
                        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">MethodInterceptor</span> interceptor <span class="token operator">:</span> interceptors<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            interceptorList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">InterceptorAndDynamicMethodMatcher</span><span class="token punctuation">(</span>interceptor<span class="token punctuation">,</span> mm<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span>
                    <span class="token keyword">else</span> <span class="token punctuation">{</span>
                        interceptorList<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>interceptors<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>advisor <span class="token keyword">instanceof</span> <span class="token class-name">IntroductionAdvisor</span> ia<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>config<span class="token punctuation">.</span><span class="token function">isPreFiltered</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> ia<span class="token punctuation">.</span><span class="token function">getClassFilter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span>actualClass<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token class-name">Interceptor</span><span class="token punctuation">[</span><span class="token punctuation">]</span> interceptors <span class="token operator">=</span> registry<span class="token punctuation">.</span><span class="token function">getInterceptors</span><span class="token punctuation">(</span>advisor<span class="token punctuation">)</span><span class="token punctuation">;</span>
                interceptorList<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>interceptors<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token class-name">Interceptor</span><span class="token punctuation">[</span><span class="token punctuation">]</span> interceptors <span class="token operator">=</span> registry<span class="token punctuation">.</span><span class="token function">getInterceptors</span><span class="token punctuation">(</span>advisor<span class="token punctuation">)</span><span class="token punctuation">;</span>
            interceptorList<span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span>interceptors<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> interceptorList<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在上面代码中，重点关注一下**registry.getInterceptors(advisor)**这个核心代码：</p><blockquote><p>核心代码: DefaultAdvisorAdapterRegistry#getInterceptors</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">MethodInterceptor</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getInterceptors</span><span class="token punctuation">(</span><span class="token class-name">Advisor</span> advisor<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">UnknownAdviceTypeException</span> <span class="token punctuation">{</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MethodInterceptor</span><span class="token punctuation">&gt;</span></span> interceptors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 从advisor中获取advice</span>
    <span class="token class-name">Advice</span> advice <span class="token operator">=</span> advisor<span class="token punctuation">.</span><span class="token function">getAdvice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>advice <span class="token keyword">instanceof</span> <span class="token class-name">MethodInterceptor</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        interceptors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">MethodInterceptor</span><span class="token punctuation">)</span> advice<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">AdvisorAdapter</span> adapter <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>adapters<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 判断当前advice是否为下面三种</span>
        <span class="token comment">// MethodBeforeAdviceAdapter  AfterReturningAdviceAdapter  ThrowsAdviceAdapter</span>
        <span class="token comment">// 上面三种都没有实现MethodInterceptor接口</span>
        <span class="token comment">// 如果匹配到, 就添加对应的MethodInterceptor</span>
        <span class="token comment">// 为什么要这样设计? 便于扩展</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>adapter<span class="token punctuation">.</span><span class="token function">supportsAdvice</span><span class="token punctuation">(</span>advice<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            interceptors<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>adapter<span class="token punctuation">.</span><span class="token function">getInterceptor</span><span class="token punctuation">(</span>advisor<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>interceptors<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnknownAdviceTypeException</span><span class="token punctuation">(</span>advisor<span class="token punctuation">.</span><span class="token function">getAdvice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> interceptors<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MethodInterceptor</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中，<strong>this.adapters</strong>里面成员如下：</p><figure><img src="`+A+'" alt="image-20221130231741899" tabindex="0" loading="lazy"><figcaption>image-20221130231741899</figcaption></figure><blockquote><p>为什么这三个增强器是通过适配器转换？</p><p>这里整理一下所有增强器实现的接口：</p><img src="'+x+'" alt="image-20221130232128534" style="zoom:80%;"><p>原本所有的advice都可以实现MethodInterceptor接口，但是这样的话再组装MethodInterceptor的时候，就需要添加额外的逻辑才能添加两次MethodInterceptor。</p><p>为了提高扩展性，这里提供了适配器模式，MethodInterceptor接口的某些advice直接通过适配器来实现，而不需要通过原来的方式，这样就可以更好更方便的扩展添加advice。</p></blockquote><h2 id="五-链式调用增强方法" tabindex="-1"><a class="header-anchor" href="#五-链式调用增强方法" aria-hidden="true">#</a> 五.. 链式调用增强方法</h2><blockquote><p>在获取到拦截器链后，会调用核心方法：retVal = new CglibMethodInvocation(proxy, target, method, args, targetClass, chain, methodProxy).proceed();</p></blockquote><figure><img src="'+I+`" alt="image-20221130233319324" tabindex="0" loading="lazy"><figcaption>image-20221130233319324</figcaption></figure><blockquote><p>进入CglibAopProxy.CglibMethodInvocation#proceed方法，该方法在后面会多次调用</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token comment">// 只需要关注这个方法即可</span>
        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">ReflectionUtils</span><span class="token punctuation">.</span><span class="token function">declaresException</span><span class="token punctuation">(</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ex<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span>
            <span class="token class-name">KotlinDetector</span><span class="token punctuation">.</span><span class="token function">isKotlinType</span><span class="token punctuation">(</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// Propagate original exception if declared on the target method</span>
            <span class="token comment">// (with callers expecting it). Always propagate it for Kotlin code</span>
            <span class="token comment">// since checked exceptions do not have to be explicitly declared there.</span>
            <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">// Checked exception thrown in the interceptor but not declared on the</span>
            <span class="token comment">// target method signature -&gt; apply an UndeclaredThrowableException,</span>
            <span class="token comment">// aligned with standard JDK dynamic proxy behavior.</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UndeclaredThrowableException</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-1-拦截器调用具体过程" tabindex="-1"><a class="header-anchor" href="#_5-1-拦截器调用具体过程" aria-hidden="true">#</a> 5.1 拦截器调用具体过程</h3><h4 id="调用链路图" tabindex="-1"><a class="header-anchor" href="#调用链路图" aria-hidden="true">#</a> 调用链路图</h4><figure><img src="`+C+`" alt="image-20221201181120228" tabindex="0" loading="lazy"><figcaption>image-20221201181120228</figcaption></figure><blockquote><p>核心方法：ReflectiveMethodInvocation#proceed</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
    <span class="token comment">// We start with an index of -1 and increment early.</span>
    <span class="token comment">// 从索引为-1的拦截器开始调用, 并按序递增</span>
    <span class="token comment">// 如果拦截器链中的拦截器迭代调用完毕, 开始调用target函数, 这个函数是通过反射完成的</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>currentInterceptorIndex <span class="token operator">==</span> <span class="token keyword">this</span><span class="token punctuation">.</span>interceptorsAndDynamicMethodMatchers<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 开始调用目标函数</span>
        <span class="token keyword">return</span> <span class="token function">invokeJoinpoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token comment">// 获取下一个要执行的拦截器</span>
    <span class="token class-name">Object</span> interceptorOrInterceptionAdvice <span class="token operator">=</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>interceptorsAndDynamicMethodMatchers<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token operator">++</span><span class="token keyword">this</span><span class="token punctuation">.</span>currentInterceptorIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>interceptorOrInterceptionAdvice <span class="token keyword">instanceof</span> <span class="token class-name">InterceptorAndDynamicMethodMatcher</span> dm<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// Evaluate dynamic method matcher here: static part will already have</span>
        <span class="token comment">// been evaluated and found to match.</span>
        <span class="token class-name">Class</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> targetClass <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>targetClass <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> <span class="token keyword">this</span><span class="token punctuation">.</span>targetClass <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>method<span class="token punctuation">.</span><span class="token function">getDeclaringClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>dm<span class="token punctuation">.</span>methodMatcher<span class="token punctuation">.</span><span class="token function">matches</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>method<span class="token punctuation">,</span> targetClass<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>arguments<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> dm<span class="token punctuation">.</span>interceptor<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token comment">// Dynamic matching failed.</span>
            <span class="token comment">// Skip this interceptor and invoke the next in the chain.</span>
            <span class="token keyword">return</span> <span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token comment">// It&#39;s an interceptor, so we just invoke it: The pointcut will have</span>
        <span class="token comment">// been evaluated statically before this object was constructed.</span>
        <span class="token comment">// 因为前面获取到的拦截器对象里面都是拦截器, 所以直接调用这里, 将this作为参数传递以保证当前实例中调用链的执行</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">MethodInterceptor</span><span class="token punctuation">)</span> interceptorOrInterceptionAdvice<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="第一次调用" tabindex="-1"><a class="header-anchor" href="#第一次调用" aria-hidden="true">#</a> 第一次调用</h4><p>程序第一次进该方法时<strong>currentInterceptorIndex值为0</strong>，<strong>this.interceptorsAndDynamicMethodMatchers.get(++this.currentInterceptorIndex)<strong>取出拦截器链第一个拦截器</strong>ExposeInvocationInterceptor</strong>，方法最后调用该拦截器的invoke方法，Step Into进入该方法：</p><img src="`+q+'" alt="image-20221130234031353" style="zoom:80%;"><p><strong>mi</strong>就是我们传入的<strong>ReflectiveMethodInvocation</strong>对象，程序执行到<strong>mi.proceed</strong>方法时，Step Into进入该方法：</p><h4 id="第二次调用" tabindex="-1"><a class="header-anchor" href="#第二次调用" aria-hidden="true">#</a> 第二次调用</h4><p>可以看到，此时程序第二次执行<strong>ReflectiveMethodInvocation</strong>的<strong>poceed</strong>方法，<strong>currentInterceptorIndex值为1</strong>，取出拦截器链第二个拦截器<strong>AspectJAroundAdvice</strong>，方法最后调用该拦截器的invoke方法，Step Into进入该方法：</p><img src="'+_+`" alt="image-20221130234606525" style="zoom:80%;"><blockquote><p>AspectJAroundAdvice#invoke</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">MethodInvocation</span> mi<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>mi <span class="token keyword">instanceof</span> <span class="token class-name">ProxyMethodInvocation</span> pmi<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalStateException</span><span class="token punctuation">(</span><span class="token string">&quot;MethodInvocation is not a Spring ProxyMethodInvocation: &quot;</span> <span class="token operator">+</span> mi<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 创建MethodInvocationProceedingJoinPoint对象包装, 这个对象实现了ProceedingJoinPoint接口</span>
    <span class="token comment">// 而在@Around注解下, 入参参数正是 ProceedingJoinPoint</span>
    <span class="token class-name">ProceedingJoinPoint</span> pjp <span class="token operator">=</span> <span class="token function">lazyGetProceedingJoinPoint</span><span class="token punctuation">(</span>pmi<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">JoinPointMatch</span> jpm <span class="token operator">=</span> <span class="token function">getJoinPointMatch</span><span class="token punctuation">(</span>pmi<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 调用通知的方法</span>
    <span class="token keyword">return</span> <span class="token function">invokeAdviceMethod</span><span class="token punctuation">(</span>pjp<span class="token punctuation">,</span> jpm<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>核心方法：AbstractAspectJAdvice#invokeAdviceMethodWithGivenArgs</p><p>该方法会调用增强器方法，如果通过debug模式，可以看到每次执行增强器方法时，都会经过该方法。</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">protected</span> <span class="token class-name">Object</span> <span class="token function">invokeAdviceMethodWithGivenArgs</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
    <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> actualArgs <span class="token operator">=</span> args<span class="token punctuation">;</span>
    <span class="token comment">// 判断通知的方法是否有参数</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>aspectJAdviceMethod<span class="token punctuation">.</span><span class="token function">getParameterCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        actualArgs <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token class-name">ReflectionUtils</span><span class="token punctuation">.</span><span class="token function">makeAccessible</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>aspectJAdviceMethod<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 执行方法, 这时会执行增强器里面逻辑</span>
        <span class="token comment">// 比如@Around增强, 会执行com.floweryu.aop.LogAspects.logAround里面逻辑</span>
        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>aspectJAdviceMethod<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>aspectInstanceFactory<span class="token punctuation">.</span><span class="token function">getAspectInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> actualArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalArgumentException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">AopInvocationException</span><span class="token punctuation">(</span><span class="token string">&quot;Mismatch on arguments to advice method [&quot;</span> <span class="token operator">+</span>
                                         <span class="token keyword">this</span><span class="token punctuation">.</span>aspectJAdviceMethod <span class="token operator">+</span> <span class="token string">&quot;]; pointcut expression [&quot;</span> <span class="token operator">+</span>
                                         <span class="token keyword">this</span><span class="token punctuation">.</span>pointcut<span class="token punctuation">.</span><span class="token function">getPointcutExpression</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">&quot;]&quot;</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InvocationTargetException</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">throw</span> ex<span class="token punctuation">.</span><span class="token function">getTargetException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>跳转到<strong>logAround</strong>方法执行：</p><figure><img src="`+P+'" alt="image-20221130235312203" tabindex="0" loading="lazy"><figcaption>image-20221130235312203</figcaption></figure><p>可以看到，代码会跳转到<strong>logAround</strong>方法中，在输出方法执行前逻辑后，会继续执行<strong>proceed</strong>方法回到拦截器链中。此时控制台打印：</p><figure><img src="'+j+'" alt="image-20221201000037954" tabindex="0" loading="lazy"><figcaption>image-20221201000037954</figcaption></figure><h4 id="第三次调用" tabindex="-1"><a class="header-anchor" href="#第三次调用" aria-hidden="true">#</a> 第三次调用</h4><p>程序并没有完全执行<strong>logAround</strong>，而是回到拦截器链中进行第三次调用，此时程序第三次执行<strong>ReflectiveMethodInvocation</strong>的<strong>poceed</strong>方法，<strong>currentInterceptorIndex值为2</strong>，取出拦截器链第三个拦截器<strong>MethodBeforeAdviceInterceptor</strong>，Step Into进入invoke方法。</p><figure><img src="'+M+`" alt="image-20221130235613060" tabindex="0" loading="lazy"><figcaption>image-20221130235613060</figcaption></figure><blockquote><p>Before拦截器：MethodBeforeAdviceInterceptor#invoke</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">MethodInvocation</span> mi<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
    <span class="token comment">// 执行前置通知方法</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>advice<span class="token punctuation">.</span><span class="token function">before</span><span class="token punctuation">(</span>mi<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mi<span class="token punctuation">.</span><span class="token function">getArguments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mi<span class="token punctuation">.</span><span class="token function">getThis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 执行下一个拦截器, 但是该拦截器是方法前执行的最后一个了, 所以会调用目标方法</span>
    <span class="token keyword">return</span> mi<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>执行完<strong>before</strong>方法后，控制台输出如下：</p><figure><img src="`+O+'" alt="image-20221201000214146" tabindex="0" loading="lazy"><figcaption>image-20221201000214146</figcaption></figure><p>执行<strong>mi.proceed()</strong>，进入第四次调用</p><h4 id="第四次调用" tabindex="-1"><a class="header-anchor" href="#第四次调用" aria-hidden="true">#</a> 第四次调用</h4><p>此时程序第四次执行<strong>ReflectiveMethodInvocation</strong>的<strong>poceed</strong>方法，<strong>currentInterceptorIndex值为3</strong>，取出拦截器链第四个拦截器<strong>AspectJAfterAdvice</strong>，Step Into进入invoke方法。</p><figure><img src="'+T+`" alt="image-20221201000512886" tabindex="0" loading="lazy"><figcaption>image-20221201000512886</figcaption></figure><blockquote><p>After拦截器：AspectJAfterAdvice#invoke</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">MethodInvocation</span> mi<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> mi<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">finally</span> <span class="token punctuation">{</span>
        <span class="token comment">// 后置执行方法总会被执行, 因为在finally中</span>
        <span class="token function">invokeAdviceMethod</span><span class="token punctuation">(</span><span class="token function">getJoinPointMatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里很特殊，看到After拦截器先继续调用拦截器链，然后再finally中执行具体的增强器逻辑。</p><h4 id="第五次调用" tabindex="-1"><a class="header-anchor" href="#第五次调用" aria-hidden="true">#</a> 第五次调用</h4><p>此时程序第五次执行<strong>ReflectiveMethodInvocation</strong>的<strong>poceed</strong>方法，<strong>currentInterceptorIndex值为4</strong>，取出拦截器链第五个拦截器<strong>AfterReturningAdviceInterceptor</strong>，Step Into进入invoke方法。</p><figure><img src="`+B+`" alt="image-20221201000857402" tabindex="0" loading="lazy"><figcaption>image-20221201000857402</figcaption></figure><blockquote><p>返回拦截器：AfterReturningAdviceInterceptor#invoke</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">MethodInvocation</span> mi<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
    <span class="token comment">// 执行下一个拦截器</span>
    <span class="token class-name">Object</span> retVal <span class="token operator">=</span> mi<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 返回目标方法</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>advice<span class="token punctuation">.</span><span class="token function">afterReturning</span><span class="token punctuation">(</span>retVal<span class="token punctuation">,</span> mi<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mi<span class="token punctuation">.</span><span class="token function">getArguments</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mi<span class="token punctuation">.</span><span class="token function">getThis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> retVal<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里也是先执行下一个拦截器</p><h4 id="第六次调用" tabindex="-1"><a class="header-anchor" href="#第六次调用" aria-hidden="true">#</a> 第六次调用</h4><p>此时程序第六次执行<strong>ReflectiveMethodInvocation</strong>的<strong>poceed</strong>方法，<strong>currentInterceptorIndex值为5</strong>，取出拦截器链第六个拦截器<strong>AspectJAfterThrowingAdvice</strong>，Step Into进入invoke方法。</p><figure><img src="`+S+`" alt="image-20221201001116931" tabindex="0" loading="lazy"><figcaption>image-20221201001116931</figcaption></figure><blockquote><p>抛出异常拦截器：AspectJAfterThrowingAdvice#invoke</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">MethodInvocation</span> mi<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token comment">// 执行下一个拦截器</span>
        <span class="token keyword">return</span> mi<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 抛出异常</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">shouldInvokeOnThrowing</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 执行异常通知</span>
            <span class="token function">invokeAdviceMethod</span><span class="token punctuation">(</span><span class="token function">getJoinPointMatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里也是先执行下一个拦截器</p><h4 id="第七次调用" tabindex="-1"><a class="header-anchor" href="#第七次调用" aria-hidden="true">#</a> 第七次调用</h4><p>此时程序第七次执行<strong>ReflectiveMethodInvocation</strong>的<strong>poceed</strong>方法，<strong>currentInterceptorIndex值为5</strong>，开始调用目标函数。</p><blockquote><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>Object interceptorOrInterceptionAdvice = this.interceptorsAndDynamicMethodMatchers.get(++this.currentInterceptorIndex);
因为上面是++currentInterceptorIndex，currentInterceptorIndex会先加一，再获取拦截器，所以第7次调用的时候，还没有走到这里来，currentInterceptorIndex还是上次调用的5.
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></blockquote><figure><img src="`+L+'" alt="image-20221201001403211" tabindex="0" loading="lazy"><figcaption>image-20221201001403211</figcaption></figure><p>此时，控制台输出如下：</p><figure><img src="'+J+`" alt="image-20221201001841006" tabindex="0" loading="lazy"><figcaption>image-20221201001841006</figcaption></figure><h4 id="退栈调用" tabindex="-1"><a class="header-anchor" href="#退栈调用" aria-hidden="true">#</a> 退栈调用</h4><p>随着<strong>invokeJoinpoint</strong>目标方法执行的成功，程序会返回到<strong>AspectJAfterThrowingAdvice</strong>的<strong>invoke</strong>方法：</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">Object</span> <span class="token function">invoke</span><span class="token punctuation">(</span><span class="token class-name">MethodInvocation</span> mi<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Throwable</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token comment">// 这里没问题的话，方法执行结束，出栈，有问题的话跳转到catch</span>
        <span class="token keyword">return</span> mi<span class="token punctuation">.</span><span class="token function">proceed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 抛出异常</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">shouldInvokeOnThrowing</span><span class="token punctuation">(</span>ex<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// 执行异常通知</span>
            <span class="token function">invokeAdviceMethod</span><span class="token punctuation">(</span><span class="token function">getJoinPointMatch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">throw</span> ex<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>就这个例子来说，<strong>div</strong>方法没有抛出异常，所以<strong>AspectJAfterThrowingAdvice</strong>的<strong>invoke</strong>方法执行结束后出栈，程序回到<strong>AfterReturningAdviceInteceptor</strong>的<strong>invoke</strong>方法：</p><figure><img src="`+N+'" alt="image-20221201002457913" tabindex="0" loading="lazy"><figcaption>image-20221201002457913</figcaption></figure><p><strong>this.advice.afterReturning</strong>执行<strong>afterReturning</strong>增强方法，控制台打印如下：</p><figure><img src="'+D+'" alt="image-20221201002616357" tabindex="0" loading="lazy"><figcaption>image-20221201002616357</figcaption></figure><p><strong>AfterReturningAdviceInteceptor</strong>的<strong>invoke</strong>方法执行结束出栈，程序回到<strong>AspectJAfterAdvice</strong>的<strong>invoke</strong>方法：</p><figure><img src="'+R+'" alt="image-20221201002733843" tabindex="0" loading="lazy"><figcaption>image-20221201002733843</figcaption></figure><p><strong>AspectJAfterAdvice</strong>的<strong>invoke</strong>方法最终执行<strong>finally 的 after 逻辑</strong>，控制台打印内容如下：</p><figure><img src="'+z+'" alt="image-20221201002817304" tabindex="0" loading="lazy"><figcaption>image-20221201002817304</figcaption></figure><p><strong>AspectJAfterAdvice</strong>的<strong>invoke</strong>方法执行结束出栈，程序回到<strong>MethodBeforeAdviceInterceptor</strong>的<strong>invoke</strong>方法：</p><figure><img src="'+E+'" alt="image-20221201002914734" tabindex="0" loading="lazy"><figcaption>image-20221201002914734</figcaption></figure><p><strong>MethodBeforeAdviceInterceptor</strong>的<strong>invoke</strong>方法正常执行结束，程序回到<strong>MethodInvocationProceedingJoinPoint</strong>的<strong>process</strong>，<strong>MethodInvocationProceedingJoinPoint</strong>类实现了<strong>ProceedingJoinPoint</strong>接口，所以这里就开始执行**@Around**增强方法里面的目标方法了。</p><figure><img src="'+F+'" alt="image-20221201003005266" tabindex="0" loading="lazy"><figcaption>image-20221201003005266</figcaption></figure><p>开始执行<strong>logAround</strong>里面的方法，此时可以看到是从**joinPoint.proceed()**方法处返回的：</p><figure><img src="'+K+'" alt="image-20221201003140578" tabindex="0" loading="lazy"><figcaption>image-20221201003140578</figcaption></figure><p>控制台打印：</p><figure><img src="'+U+'" alt="image-20221201003212782" tabindex="0" loading="lazy"><figcaption>image-20221201003212782</figcaption></figure><p><strong>@Around</strong>增强方法执行完成后，会退出堆栈，程序回到<strong>ExposeInvocationInterceptor</strong>的<strong>invoke</strong>方法：</p><figure><img src="'+G+'" alt="image-20221201003350133" tabindex="0" loading="lazy"><figcaption>image-20221201003350133</figcaption></figure><p><strong>ExposeInvocationInterceptor</strong>的<strong>invoke</strong>方法执行结束出栈，程序回到<strong>CglibAopProxy</strong>的<strong>intercept</strong>方法：</p><figure><img src="'+V+'" alt="image-20221201003516164" tabindex="0" loading="lazy"><figcaption>image-20221201003516164</figcaption></figure><p><strong>CglibAopProxy</strong>的<strong>intercept</strong>方法执行结束出栈后，整个AOP的拦截器链调用也随之结束了：</p><figure><img src="'+W+'" alt="image-20221201003552035" tabindex="0" loading="lazy"><figcaption>image-20221201003552035</figcaption></figure>',114);function tn(pn,en){const s=c("center");return i(),l("div",null,[Y,a(s,null,{default:t(()=>[p("xml执行后输出")]),_:1}),$,a(s,null,{default:t(()=>[p("注解方式执行后输出")]),_:1}),H,a(s,null,{default:t(()=>[p("图(1)")]),_:1}),Q,a(s,null,{default:t(()=>[p("图(1)")]),_:1}),Z,a(s,null,{default:t(()=>[p("图(2)")]),_:1}),nn,a(s,null,{default:t(()=>[p("图(3)")]),_:1}),sn,a(s,null,{default:t(()=>[p("图(1)-代理后的对象详情")]),_:1}),an])}const ln=o(X,[["render",tn],["__file","Spring的动态AOP原理.html.vue"]]);export{ln as default};
